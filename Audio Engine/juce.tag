<tagfile>
  <compound kind="class">
    <name>ActionBroadcaster</name>
    <filename>classActionBroadcaster.html</filename>
    <member kind="function">
      <name>ActionBroadcaster</name>
      <anchor>a195c0587f0d2751b9cf5c36ec8d50d50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ActionBroadcaster</name>
      <anchor>a13ffb78c0475303fad4c9e8f61e91c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addActionListener</name>
      <anchor>a6bda58522778ad1458cd5d9baaffd9b5</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeActionListener</name>
      <anchor>ae8c41195cffd093782d4450e209f2420</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeAllActionListeners</name>
      <anchor>ae8f8b1a360c780f0acb538c97200a7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sendActionMessage</name>
      <anchor>a317709b0f409bf00a5834a3aca06fe09</anchor>
      <arglist>(const String &amp;message) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ActionListener</name>
    <filename>classActionListener.html</filename>
    <member kind="function">
      <name>~ActionListener</name>
      <anchor>a11e316dbd4e2b404eb9946c8543b094e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>actionListenerCallback</name>
      <anchor>af8171cbe6bea29143ec411a77cec9683</anchor>
      <arglist>(const String &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ActionListenerList</name>
    <base>MessageListener</base>
    <filename>classActionListenerList.html</filename>
    <member kind="function">
      <name>ActionListenerList</name>
      <anchor>a8499dc0635c7ab29ed444f3b70a53a68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ActionListenerList</name>
      <anchor>a7ab500fca00c8b2dfaeb0aab0d49f10c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addActionListener</name>
      <anchor>af562a1b00f6abd6b8de8c4a6bcb7d620</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeActionListener</name>
      <anchor>afb81200646761e685c5a2e84b8a07271</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeAllActionListeners</name>
      <anchor>aec12a868df00cf3b34a0a20df5a5f751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sendActionMessage</name>
      <anchor>a1d49009b722411af9264f5142377ba08</anchor>
      <arglist>(const String &amp;message) const </arglist>
    </member>
    <member kind="function">
      <name>handleMessage</name>
      <anchor>ad964bc1978ea916d3d13657e5d023b0f</anchor>
      <arglist>(const Message &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ActiveXControlComponent</name>
    <base>Component</base>
    <filename>classActiveXControlComponent.html</filename>
    <member kind="function">
      <name>ActiveXControlComponent</name>
      <anchor>af7b5ac27646fe23cb28c7aa5d22a3529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ActiveXControlComponent</name>
      <anchor>a75ba2e2a8034c56afccbe27e5be43cde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createControl</name>
      <anchor>ae54c9bc9f943e8cd566d88fd777febdb</anchor>
      <arglist>(const void *controlIID)</arglist>
    </member>
    <member kind="function">
      <name>deleteControl</name>
      <anchor>ac2d524d7b6a6c17611e9aaff213f3443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isControlOpen</name>
      <anchor>a7ea00b68766d3d076424d3bc014f82f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>queryInterface</name>
      <anchor>aec74d476e939d707b578c32cdd5cebd3</anchor>
      <arglist>(const void *iid) const </arglist>
    </member>
    <member kind="function">
      <name>setMouseEventsAllowed</name>
      <anchor>a1fe356a2de0bc7713efbe25c4f7a1066</anchor>
      <arglist>(bool eventsCanReachControl)</arglist>
    </member>
    <member kind="function">
      <name>areMouseEventsAllowed</name>
      <anchor>ac0f003426189a88ade557a313ec46b93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a704849697066ca9d0ba033506aa8759b</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>originalWndProc</name>
      <anchor>ab7cd48f5d77edfb728803193bd7e7436</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AffineTransform</name>
    <filename>classAffineTransform.html</filename>
    <member kind="function">
      <name>AffineTransform</name>
      <anchor>a132688121d6b6b6f239b8968b7ca80ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AffineTransform</name>
      <anchor>a1868486b5175793b85860cd0b051834c</anchor>
      <arglist>(const AffineTransform &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>AffineTransform</name>
      <anchor>aad92918180645a274b28a5aadbd749dd</anchor>
      <arglist>(const float mat00, const float mat01, const float mat02, const float mat10, const float mat11, const float mat12)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>af09fee37801c3c3bcb7e74f602bdf239</anchor>
      <arglist>(const AffineTransform &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>aa93fc3e32a2baae4f6b00c0be67b9d58</anchor>
      <arglist>(const AffineTransform &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>ac8bf153909496d5329ecdfd41f847e5e</anchor>
      <arglist>(const AffineTransform &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>transformPoint</name>
      <anchor>a5f2e3fd79beb14f36c72455acbdbe532</anchor>
      <arglist>(float &amp;x, float &amp;y) const </arglist>
    </member>
    <member kind="function">
      <name>transformPoint</name>
      <anchor>a182350a3d282332f89bee00068ea99bf</anchor>
      <arglist>(double &amp;x, double &amp;y) const </arglist>
    </member>
    <member kind="function">
      <name>translated</name>
      <anchor>a1d61149b3be5b2b0afb3014891c33ddb</anchor>
      <arglist>(const float deltaX, const float deltaY) const </arglist>
    </member>
    <member kind="function">
      <name>translation</name>
      <anchor>a529912378fff857cf155d71167b24f7d</anchor>
      <arglist>(const float deltaX, const float deltaY)</arglist>
    </member>
    <member kind="function">
      <name>rotated</name>
      <anchor>a6b0c44317b327ffdbce90d630f3bc63c</anchor>
      <arglist>(const float angleInRadians) const </arglist>
    </member>
    <member kind="function">
      <name>rotated</name>
      <anchor>ae984506b9997524843ded78d67fa2619</anchor>
      <arglist>(const float angleInRadians, const float pivotX, const float pivotY) const </arglist>
    </member>
    <member kind="function">
      <name>rotation</name>
      <anchor>a2126966bc842846b96e35d3c7aef42f6</anchor>
      <arglist>(const float angleInRadians)</arglist>
    </member>
    <member kind="function">
      <name>rotation</name>
      <anchor>ad48d6229e1e16dd99e0e3785a0bd5460</anchor>
      <arglist>(const float angleInRadians, const float pivotX, const float pivotY)</arglist>
    </member>
    <member kind="function">
      <name>scaled</name>
      <anchor>a41d3ca0b8712efb6179bba976ffb2c63</anchor>
      <arglist>(const float factorX, const float factorY) const </arglist>
    </member>
    <member kind="function">
      <name>scale</name>
      <anchor>aaabd35d109f8e829772e2d2499a831f8</anchor>
      <arglist>(const float factorX, const float factorY)</arglist>
    </member>
    <member kind="function">
      <name>sheared</name>
      <anchor>ae1f616557229de7202937b6fde63de2a</anchor>
      <arglist>(const float shearX, const float shearY) const </arglist>
    </member>
    <member kind="function">
      <name>inverted</name>
      <anchor>af7b1572ca24f5daf4bfb43a87b7002b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>followedBy</name>
      <anchor>a803d289487cec9bc49c0eaed4703e5b2</anchor>
      <arglist>(const AffineTransform &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>isIdentity</name>
      <anchor>ace6797642a27004964e19c9244a4a90a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isSingularity</name>
      <anchor>a8a26cef32cba2a7bc45bcd021d0d7944</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isOnlyTranslation</name>
      <anchor>a1845fd5c938e05c5f8d4671d75952ec1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTranslationX</name>
      <anchor>a1c20aaded20f49c9811f0584b82f2908</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTranslationY</name>
      <anchor>a0f92e2c1a76307e091fce1329f297214</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>identity</name>
      <anchor>a2173017e6300f667a23467505ca36276</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mat00</name>
      <anchor>a390c9854a92ca378371a48dfde5058c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mat01</name>
      <anchor>a0d029ed208508b06d5ec8a50377fa11a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mat02</name>
      <anchor>a1eaf23de4e5477aa16132ab89894ff6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mat10</name>
      <anchor>af75941aa8f1180b3b324732613780740</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mat11</name>
      <anchor>a808a65da0b88a09f0e2ac752fd2648ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mat12</name>
      <anchor>ae26718eb62e1240ad8f800f7e7ce3a74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AiffAudioFormat</name>
    <base>AudioFormat</base>
    <filename>classAiffAudioFormat.html</filename>
    <member kind="function">
      <name>AiffAudioFormat</name>
      <anchor>a3673ab24fc35a3960be374bbff6a0d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AiffAudioFormat</name>
      <anchor>ac9dc64077a6e590b299e15c0896f4fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPossibleSampleRates</name>
      <anchor>a620e6149b606613dd3bfab8a5f40bd2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPossibleBitDepths</name>
      <anchor>a19165c3612c205fbc3fdc89542ed143f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canDoStereo</name>
      <anchor>a98ebba1e0b20ef6a7f1a1154d11d1813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canDoMono</name>
      <anchor>a380f333576b6363eef9146bce960238b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canHandleFile</name>
      <anchor>aa1529ddfcedc64c049e942c0287acf16</anchor>
      <arglist>(const File &amp;fileToTest)</arglist>
    </member>
    <member kind="function">
      <name>createReaderFor</name>
      <anchor>a8df3c8902dedb3c430e94f77c57488c6</anchor>
      <arglist>(InputStream *sourceStream, const bool deleteStreamIfOpeningFails)</arglist>
    </member>
    <member kind="function">
      <name>createWriterFor</name>
      <anchor>a09862b7e1ada5906805f4b6f0d56a1c8</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlertWindow</name>
    <base>TopLevelWindow</base>
    <base>ButtonListener</base>
    <filename>classAlertWindow.html</filename>
    <member kind="function">
      <name>AlertIconType</name>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oIcon</name>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3a6b6648ee3f02f6832d897a214c647421</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uestionIcon</name>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3a63d1a179c412afc32f7f3c8061b238be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>arningIcon</name>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3a8af24c68ddba14cc97687e2b2b75f373</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nfoIcon</name>
      <anchor>a2582d1f79937cb47a6a3764c7d9bdba3a3a24dd7ddec3b6ec31d320aaa525e43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>ad2f8b8ba50ce8a744e37e05e9a40dce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>ad2f8b8ba50ce8a744e37e05e9a40dce1ad8174d9e6fb186697dba3b380b1195c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>ad2f8b8ba50ce8a744e37e05e9a40dce1ae52947cad55bc25fee88e0e2a97d02c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utlineColourId</name>
      <anchor>ad2f8b8ba50ce8a744e37e05e9a40dce1a4ca5b0e9de7b0838cf1358a85b551d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AlertWindow</name>
      <anchor>ae30f11b94b74c97629e6e4a0675ddd4d</anchor>
      <arglist>(const String &amp;title, const String &amp;message, AlertIconType iconType, Component *associatedComponent=0)</arglist>
    </member>
    <member kind="function">
      <name>~AlertWindow</name>
      <anchor>a3c76e1a1ce702a161064eebb134f1adc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getAlertType</name>
      <anchor>ac3d30b94e61a833191809805b6d82153</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setMessage</name>
      <anchor>a726f6cb55274959235efa16a0d18f794</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function">
      <name>addButton</name>
      <anchor>a783bbf81186dc21addde7e0fdb6f8001</anchor>
      <arglist>(const String &amp;name, int returnValue, const KeyPress &amp;shortcutKey1=KeyPress(), const KeyPress &amp;shortcutKey2=KeyPress())</arglist>
    </member>
    <member kind="function">
      <name>getNumButtons</name>
      <anchor>a4a13402031851ad78b07909d41ae5c4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>addTextEditor</name>
      <anchor>a7d2c472d75eaa3a7a2876a48a2c2f884</anchor>
      <arglist>(const String &amp;name, const String &amp;initialContents, const String &amp;onScreenLabel=String::empty, bool isPasswordBox=false)</arglist>
    </member>
    <member kind="function">
      <name>getTextEditorContents</name>
      <anchor>a9b7037a2e4733bd75ecbcf0bc11e3857</anchor>
      <arglist>(const String &amp;nameOfTextEditor) const </arglist>
    </member>
    <member kind="function">
      <name>addComboBox</name>
      <anchor>a29a5cd68a7ae8e7ffbf1e59b638a248d</anchor>
      <arglist>(const String &amp;name, const StringArray &amp;items, const String &amp;onScreenLabel=String::empty)</arglist>
    </member>
    <member kind="function">
      <name>getComboBoxComponent</name>
      <anchor>aea82c357eb43eb15a6857452a579d838</anchor>
      <arglist>(const String &amp;nameOfList) const </arglist>
    </member>
    <member kind="function">
      <name>addTextBlock</name>
      <anchor>a06c68ddf379fcd3247182d0fee87a7f4</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>addProgressBarComponent</name>
      <anchor>a9b7ccfa6a4b4d3e871d20b4690c35b34</anchor>
      <arglist>(double &amp;progressValue)</arglist>
    </member>
    <member kind="function">
      <name>addCustomComponent</name>
      <anchor>a18e5456aa067a106f8ecbb03dc01f032</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <name>getNumCustomComponents</name>
      <anchor>af2526e588df3d21a77959e77ec97c4ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCustomComponent</name>
      <anchor>a91b7ff614c484629c7c4033cc29acbf7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>removeCustomComponent</name>
      <anchor>a9ea24f9c13a13253c0c73b4d35fbdb82</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>containsAnyExtraComponents</name>
      <anchor>a905adfc09c6a05eebe538f4a789aa952</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>showMessageBox</name>
      <anchor>abf86d169b570894bcf6de1d92f38b3b5</anchor>
      <arglist>(AlertIconType iconType, const String &amp;title, const String &amp;message, const String &amp;buttonText=String::empty, Component *associatedComponent=0)</arglist>
    </member>
    <member kind="function">
      <name>showOkCancelBox</name>
      <anchor>ac2fb96e7b10342fe3d12c57c77b221d2</anchor>
      <arglist>(AlertIconType iconType, const String &amp;title, const String &amp;message, const String &amp;button1Text=String::empty, const String &amp;button2Text=String::empty, Component *associatedComponent=0)</arglist>
    </member>
    <member kind="function">
      <name>showYesNoCancelBox</name>
      <anchor>a4c3a6dcab1e7d5a346fc6cd435addd4f</anchor>
      <arglist>(AlertIconType iconType, const String &amp;title, const String &amp;message, const String &amp;button1Text=String::empty, const String &amp;button2Text=String::empty, const String &amp;button3Text=String::empty, Component *associatedComponent=0)</arglist>
    </member>
    <member kind="function">
      <name>showNativeDialogBox</name>
      <anchor>a796e868eb78c49ec3e7de0f220a5bd00</anchor>
      <arglist>(const String &amp;title, const String &amp;bodyText, bool isOkCancel)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a5c12d4ff78b97a93eebf896fe28bbdf2</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a1e6f388afe7b4e04bbc548fe373b8e08</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>a81962b75d87d7d1485f5ac9120770f3b</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>ab9c5a3635bcea4cb386e6bc59fd38ced</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>a0b89d5f526b7caa7c703df4cedfc1a92</anchor>
      <arglist>(Button *button)</arglist>
    </member>
    <member kind="function">
      <name>lookAndFeelChanged</name>
      <anchor>a9a41e270705311cab13bf727e4def68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>userTriedToCloseWindow</name>
      <anchor>a8d1f8e4fadd01bdc6067d8a8f619b04f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDesktopWindowStyleFlags</name>
      <anchor>a08de045df0dfe9246dae2fff50a5e28c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AppleRemoteDevice</name>
    <filename>classAppleRemoteDevice.html</filename>
    <member kind="function">
      <name>ButtonType</name>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>enuButton</name>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a4763e099e23574fe8e7b649e3c964cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>layButton</name>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0ada64dfa4c77be0c1e9450efd26db7f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lusButton</name>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a0a1a0de82c6d765607247bf97fb9f106</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>inusButton</name>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a9acc904c6686677ad3d8dc783d547f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightButton</name>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a41364e422072e6231a74a487f63f08fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eftButton</name>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a811f6391048193b13e401ca40d610713</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightButton_Long</name>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0aebf3d7bc747ddd6b471d7a71a330432b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eftButton_Long</name>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a9a8742b6148aca5e32dec97292781ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>enuButton_Long</name>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a0fc32b5afdcfca212c4003ea68bdbfaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>layButtonSleepMode</name>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0a57f28e98dc961f444c7db15bbd2ee8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>witched</name>
      <anchor>a63ccce128a48e63972e2d71a8de5f8d0ae278b856f84c176f8a1628c118e902fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AppleRemoteDevice</name>
      <anchor>ac44938079806a0136950f95850e587f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AppleRemoteDevice</name>
      <anchor>aa7ce0c2716f3a62e1eab5cbd23445ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>buttonPressed</name>
      <anchor>a6f3fab42c69e84f4833cdcd7efcc6238</anchor>
      <arglist>(const ButtonType buttonId, const bool isDown)=0</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>a0777ec62b7abe89843299d2e43d9877c</anchor>
      <arglist>(const bool inExclusiveMode)</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>af828962a01ccbbedf9cc8b086b3edb34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isActive</name>
      <anchor>a0857b406b9e57efb90a12142d7c9ae40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRemoteId</name>
      <anchor>a1df8dc96b957911ffce788aa5adb6405</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>handleCallbackInternal</name>
      <anchor>ac8e52a06c78f8901fcc32b709608fba2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationCommandManager</name>
    <base>AsyncUpdater</base>
    <base>FocusChangeListener</base>
    <filename>classApplicationCommandManager.html</filename>
    <member kind="function">
      <name>ApplicationCommandManager</name>
      <anchor>a71ba22aa70cc12a7ab52c4e531db32ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ApplicationCommandManager</name>
      <anchor>affac02208039201c7e6a59599a1010df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearCommands</name>
      <anchor>a33f916c7f4ac00736958a83883057df0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>registerCommand</name>
      <anchor>a151be8c30a8339675ad5dcba5a5c4e62</anchor>
      <arglist>(const ApplicationCommandInfo &amp;newCommand)</arglist>
    </member>
    <member kind="function">
      <name>registerAllCommandsForTarget</name>
      <anchor>ac3f8c831583499556579848779e030cf</anchor>
      <arglist>(ApplicationCommandTarget *target)</arglist>
    </member>
    <member kind="function">
      <name>removeCommand</name>
      <anchor>a910296ce97f93bc7fcd8a24085ac7ca6</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <name>commandStatusChanged</name>
      <anchor>a91fef61705d98da881276733e304e7af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumCommands</name>
      <anchor>ad81badf96e31ddc2bca240d1e33edc80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCommandForIndex</name>
      <anchor>a229ffe958dac566142ff5107003cb3d7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getCommandForID</name>
      <anchor>a2b2c97e97601d50a84390e1fae166ae1</anchor>
      <arglist>(CommandID commandID) const </arglist>
    </member>
    <member kind="function">
      <name>getNameOfCommand</name>
      <anchor>a31812859523daab84ede2c74bc9a04fe</anchor>
      <arglist>(CommandID commandID) const </arglist>
    </member>
    <member kind="function">
      <name>getDescriptionOfCommand</name>
      <anchor>aa13fbef2cb86ad0f848e369d8f4b1ba6</anchor>
      <arglist>(CommandID commandID) const </arglist>
    </member>
    <member kind="function">
      <name>getCommandCategories</name>
      <anchor>a80e05d24ad73a201660f326082c48fe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCommandsInCategory</name>
      <anchor>ac163518b33fa96fa88ac3ccf6d107a46</anchor>
      <arglist>(const String &amp;categoryName) const </arglist>
    </member>
    <member kind="function">
      <name>getKeyMappings</name>
      <anchor>ae5943d4b8e28397963164b1fd1d8dba8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>invokeDirectly</name>
      <anchor>a55f04432929174c2de6d622cb2d23c67</anchor>
      <arglist>(CommandID commandID, bool asynchronously)</arglist>
    </member>
    <member kind="function">
      <name>invoke</name>
      <anchor>a6b506331c1cfb3d07b2925ac16b8141e</anchor>
      <arglist>(const ApplicationCommandTarget::InvocationInfo &amp;invocationInfo, bool asynchronously)</arglist>
    </member>
    <member kind="function">
      <name>getFirstCommandTarget</name>
      <anchor>a45f5c00e8bb2d670f0931c78dd166d4b</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <name>setFirstCommandTarget</name>
      <anchor>a6ea1a7b9cbe4d0e6766069d0a4d87311</anchor>
      <arglist>(ApplicationCommandTarget *newTarget)</arglist>
    </member>
    <member kind="function">
      <name>getTargetForCommand</name>
      <anchor>ab9fcbf2c2a3b58cf1a54babf906d9e84</anchor>
      <arglist>(CommandID commandID, ApplicationCommandInfo &amp;upToDateInfo)</arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>ada313b4a4cdd787f5d3786b9102c483e</anchor>
      <arglist>(ApplicationCommandManagerListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>a851148eb572ded776b1ba84a5de178fa</anchor>
      <arglist>(ApplicationCommandManagerListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>findDefaultComponentTarget</name>
      <anchor>add1c985aacfb09c72d038e88ce91341a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>findTargetForComponent</name>
      <anchor>a87ba6516153573f6f1a3e9888965adb6</anchor>
      <arglist>(Component *component)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationCommandManagerListener</name>
    <filename>classApplicationCommandManagerListener.html</filename>
    <member kind="function">
      <name>~ApplicationCommandManagerListener</name>
      <anchor>a9b2c9f6c718ad68306791c2aeb29f754</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>applicationCommandInvoked</name>
      <anchor>a127ded071ab7cf432aefe8a1f1b5a646</anchor>
      <arglist>(const ApplicationCommandTarget::InvocationInfo &amp;info)=0</arglist>
    </member>
    <member kind="function">
      <name>applicationCommandListChanged</name>
      <anchor>a918fb2446acd367655fe88815d3be5fe</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationCommandTarget</name>
    <filename>classApplicationCommandTarget.html</filename>
    <member kind="function">
      <name>ApplicationCommandTarget</name>
      <anchor>a87a924f9667311234b74292dcd737a98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ApplicationCommandTarget</name>
      <anchor>aedcfa2f5c7f9798eaa717579d3d6e12a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNextCommandTarget</name>
      <anchor>a540016056ca6fc19818e951359c710da</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getAllCommands</name>
      <anchor>a12b1c7a6abe2e5a5f27fda4a292fe33d</anchor>
      <arglist>(Array&lt; CommandID &gt; &amp;commands)=0</arglist>
    </member>
    <member kind="function">
      <name>getCommandInfo</name>
      <anchor>a54171f3ee599f0b508fed08e647edf89</anchor>
      <arglist>(CommandID commandID, ApplicationCommandInfo &amp;result)=0</arglist>
    </member>
    <member kind="function">
      <name>perform</name>
      <anchor>a0e8f962cda82e8aa1207d38361ff96f9</anchor>
      <arglist>(const InvocationInfo &amp;info)=0</arglist>
    </member>
    <member kind="function">
      <name>invoke</name>
      <anchor>aeffaac3af6c4922240e1e5e03ad0a1b5</anchor>
      <arglist>(const InvocationInfo &amp;invocationInfo, const bool asynchronously)</arglist>
    </member>
    <member kind="function">
      <name>invokeDirectly</name>
      <anchor>a93daac13c40f226ccab1e92a390ad61a</anchor>
      <arglist>(const CommandID commandID, const bool asynchronously)</arglist>
    </member>
    <member kind="function">
      <name>getTargetForCommand</name>
      <anchor>aee836277019ca8182636e32701d814d7</anchor>
      <arglist>(const CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <name>isCommandActive</name>
      <anchor>ab5ee995932e10bd18dc6fff111f3835e</anchor>
      <arglist>(const CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <name>findFirstTargetParentComponent</name>
      <anchor>aa8fb128295bd2117cfdc982db022ef6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationProperties</name>
    <base>DeletedAtShutdown</base>
    <filename>classApplicationProperties.html</filename>
    <member kind="function">
      <name>ApplicationProperties</name>
      <anchor>aca8eb83646fdaf5fe87360738fb20bbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ApplicationProperties</name>
      <anchor>ad0b5bcee64fb881459536ae91f98df9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>juce_DeclareSingleton</name>
      <anchor>af276d7d7fcd7545ba5ff8630f96ee7ad</anchor>
      <arglist>(ApplicationProperties, false) void setStorageParameters(const String &amp;applicationName</arglist>
    </member>
    <member kind="function">
      <name>throw</name>
      <anchor>a4317c94c7bf601e04e7a5aab1383a3a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>testWriteAccess</name>
      <anchor>a697e45cdffc1d4ec10aef93ff3755d66</anchor>
      <arglist>(bool testUserSettings, bool testCommonSettings, bool showWarningDialogOnFailure)</arglist>
    </member>
    <member kind="function">
      <name>getUserSettings</name>
      <anchor>a5b7ea2bc0531fc2b5db6aed82d753905</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCommonSettings</name>
      <anchor>a66aa5855d6c127e6ada14ad86a6926a5</anchor>
      <arglist>(bool returnUserPropsIfReadOnly)</arglist>
    </member>
    <member kind="function">
      <name>saveIfNeeded</name>
      <anchor>aff18ff76ec1447a771769fb3bd905623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeFiles</name>
      <anchor>a5f0c75ea625bf1cca3ef8fe9f66687af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileNameSuffix</name>
      <anchor>a8887a807281df1b080dbeb27a6d21719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>folderName</name>
      <anchor>ae377c6de766816428366c034be78241a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>millisecondsBeforeSaving</name>
      <anchor>a6d13ddab18ab40d9df82ba031bf43d7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array</name>
    <filename>classArray.html</filename>
    <member kind="function">
      <name>ScopedLockType</name>
      <anchor>aaee0afbd84038238c8cbda6378e665c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Array</name>
      <anchor>a0d84c7f0ab5d18543d3138d0968c82c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Array</name>
      <anchor>ae603294033a54425cb6533893c8ea51c</anchor>
      <arglist>(const Array&lt; ElementType, TypeOfCriticalSectionToUse &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Array</name>
      <anchor>a548c7587b38068f0b011347c81f114e8</anchor>
      <arglist>(const ElementType *values)</arglist>
    </member>
    <member kind="function">
      <name>Array</name>
      <anchor>a2a0f126e3f3fb015dbbc3230dea3dc1c</anchor>
      <arglist>(const ElementType *values, int numValues)</arglist>
    </member>
    <member kind="function">
      <name>~Array</name>
      <anchor>a540323526557fec8347019aee786316a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a2bdf7874aec427a12c98073f14ca47a2</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a73dca144a592cf2bcfce861a2b0fbcf3</anchor>
      <arglist>(const OtherArrayType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a6b4842f73642caa218902c8e1ad17f55</anchor>
      <arglist>(const OtherArrayType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a6bd7485bde05c4218a26d4f98b3ffca2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearQuick</name>
      <anchor>ab7f0aefd80fc3a88310ac9931bafd8e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>ad62a50c75cbb3b45a06aada9b059853a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>a2b9999cb713e0c71f7dbb430a9361948</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>getUnchecked</name>
      <anchor>a9c2641b7264b2db8dd3e9b21ff9c5c2a</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>getReference</name>
      <anchor>a9caa47b639224f05f568ac6f0abe97d2</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>getFirst</name>
      <anchor>aa428610d7f1bd9dd2de313b39403bd4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLast</name>
      <anchor>adef4469c2868dbf4b22dc352cd179e4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>a797a78ba08e023c46813902f98f8bee8</anchor>
      <arglist>(ParameterType elementToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>a5fce70ec38c3d7c200cf35a73429f61b</anchor>
      <arglist>(ParameterType elementToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>a561fa77f1c1b1333a0b0a4aa4bbe97e8</anchor>
      <arglist>(ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>a06ca3a23fb5cc785febb054ad806cd32</anchor>
      <arglist>(int indexToInsertAt, ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <name>insertMultiple</name>
      <anchor>a214123e46743df1830c33de5ec1c16e7</anchor>
      <arglist>(int indexToInsertAt, ParameterType newElement, int numberOfTimesToInsertIt)</arglist>
    </member>
    <member kind="function">
      <name>insertArray</name>
      <anchor>afa66359a31f0c05315bf27e1819ace0f</anchor>
      <arglist>(int indexToInsertAt, const ElementType *newElements, int numberOfElements)</arglist>
    </member>
    <member kind="function">
      <name>addIfNotAlreadyThere</name>
      <anchor>a66a7dd59118110a1fff8f346af478d4a</anchor>
      <arglist>(ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <name>set</name>
      <anchor>a311e3be8a59826e972ec981e9d719ace</anchor>
      <arglist>(const int indexToChange, ParameterType newValue)</arglist>
    </member>
    <member kind="function">
      <name>setUnchecked</name>
      <anchor>a0a6a1de585acb2d4c63a5b3b18a6530e</anchor>
      <arglist>(const int indexToChange, ParameterType newValue)</arglist>
    </member>
    <member kind="function">
      <name>addArray</name>
      <anchor>a2a08583b99a5d56cba633211ac46cc95</anchor>
      <arglist>(const ElementType *elementsToAdd, int numElementsToAdd)</arglist>
    </member>
    <member kind="function">
      <name>swapWithArray</name>
      <anchor>abd26be1858218b79742d016278024d66</anchor>
      <arglist>(Array &amp;otherArray)</arglist>
    </member>
    <member kind="function">
      <name>addArray</name>
      <anchor>ace9aa68cb5c8254b8338b75c6decccb2</anchor>
      <arglist>(const OtherArrayType &amp;arrayToAddFrom, int startIndex=0, int numElementsToAdd=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>addSorted</name>
      <anchor>a2da4f0f814fb53e7e71ae9e1fcb3b601</anchor>
      <arglist>(ElementComparator &amp;comparator, ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <name>addUsingDefaultSort</name>
      <anchor>a98f0f3de328039fe3f9f194268805348</anchor>
      <arglist>(ParameterType newElement)</arglist>
    </member>
    <member kind="function">
      <name>indexOfSorted</name>
      <anchor>a605255239f767b648a413b099066cd98</anchor>
      <arglist>(ElementComparator &amp;comparator, ParameterType elementToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>ae4b625b7ef05f179b051845debaf8462</anchor>
      <arglist>(const int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <name>removeValue</name>
      <anchor>a33c7a37ab4dae2be6f820225c289bff5</anchor>
      <arglist>(ParameterType valueToRemove)</arglist>
    </member>
    <member kind="function">
      <name>removeRange</name>
      <anchor>a76aff614d2a99bbeffbc7234f61da108</anchor>
      <arglist>(int startIndex, int numberToRemove)</arglist>
    </member>
    <member kind="function">
      <name>removeLast</name>
      <anchor>a6fa7c7c47f86781b474e222656fbb23a</anchor>
      <arglist>(int howManyToRemove=1)</arglist>
    </member>
    <member kind="function">
      <name>removeValuesIn</name>
      <anchor>a0c50ede3cbf6d6ad0d838ffc17ed8ae8</anchor>
      <arglist>(const OtherArrayType &amp;otherArray)</arglist>
    </member>
    <member kind="function">
      <name>removeValuesNotIn</name>
      <anchor>a36ff2439add0584b14b5ca4200923642</anchor>
      <arglist>(const OtherArrayType &amp;otherArray)</arglist>
    </member>
    <member kind="function">
      <name>swap</name>
      <anchor>aa719aa8439aab1cb265845002c8e3322</anchor>
      <arglist>(const int index1, const int index2)</arglist>
    </member>
    <member kind="function">
      <name>move</name>
      <anchor>a81fd938c9775af47e5ef80eb216e9044</anchor>
      <arglist>(const int currentIndex, int newIndex)</arglist>
    </member>
    <member kind="function">
      <name>minimiseStorageOverheads</name>
      <anchor>a21753e1704c1a8a5028ce0fd5d166e6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ensureStorageAllocated</name>
      <anchor>a9ea4982f49ac5ec83e967c82de49edbf</anchor>
      <arglist>(const int minNumElements)</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>a8b57c5002e3ac749ef3cf63c2cdf3bb7</anchor>
      <arglist>(ElementComparator &amp;comparator, const bool retainOrderOfEquivalentItems=false) const </arglist>
    </member>
    <member kind="function">
      <name>getLock</name>
      <anchor>a8845599ee98252259f38ded30943f9d0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayAllocationBase</name>
    <base>TypeOfCriticalSectionToUse</base>
    <filename>classArrayAllocationBase.html</filename>
    <member kind="function">
      <name>ArrayAllocationBase</name>
      <anchor>a76530cdaeddf1beb00cefd2365f819ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ArrayAllocationBase</name>
      <anchor>a1111e17860b8d4dec72a3a87c3865fbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAllocatedSize</name>
      <anchor>a56354968cbfcf19977aae75b00768df6</anchor>
      <arglist>(const int numElements)</arglist>
    </member>
    <member kind="function">
      <name>ensureAllocatedSize</name>
      <anchor>af97c1591bed76fcc161d0a2ce2eda35c</anchor>
      <arglist>(const int minNumElements)</arglist>
    </member>
    <member kind="function">
      <name>shrinkToNoMoreThan</name>
      <anchor>ad7efe3596e7ed01cad96a559b96b592e</anchor>
      <arglist>(const int maxNumElements)</arglist>
    </member>
    <member kind="function">
      <name>swapWith</name>
      <anchor>a8388faad7ae97dfd41c9b89fe3d2e857</anchor>
      <arglist>(ArrayAllocationBase&lt; ElementType, TypeOfCriticalSectionToUse &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>elements</name>
      <anchor>a68e9e3954a47f3a9b0721c979d4d9fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numAllocated</name>
      <anchor>a5afe5480fba4ad678e2496e0a5fc5d37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrowButton</name>
    <base>Button</base>
    <filename>classArrowButton.html</filename>
    <member kind="function">
      <name>ArrowButton</name>
      <anchor>a82f6faeca8951e35dbbd6a3d2951fcc5</anchor>
      <arglist>(const String &amp;buttonName, float arrowDirection, const Colour &amp;arrowColour)</arglist>
    </member>
    <member kind="function">
      <name>~ArrowButton</name>
      <anchor>a9198279ce75060e66f9f4a52510bc76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintButton</name>
      <anchor>a3b06635408cb843e1e58a427a1eaf604</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>buttonStateChanged</name>
      <anchor>a0840541f1d0964758ab2c663cbf51495</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AsyncUpdater</name>
    <filename>classAsyncUpdater.html</filename>
    <member kind="function">
      <name>AsyncUpdater</name>
      <anchor>a5cb530c31e68d13bbdf078ed54911e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AsyncUpdater</name>
      <anchor>af28a6da5c2adf73e2c18286574939d4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>triggerAsyncUpdate</name>
      <anchor>a4eece806c6ba9f591382fed54c5983b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cancelPendingUpdate</name>
      <anchor>a24aa791c9a98efc3a8a16e04ac0880d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleUpdateNowIfNeeded</name>
      <anchor>a5f65e2ad091e96ce4e3979d2b701bc85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleAsyncUpdate</name>
      <anchor>a446f3af793131f8772329f1f8b526578</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Atomic</name>
    <filename>classAtomic.html</filename>
    <member kind="function">
      <name>increment</name>
      <anchor>a4814ee24139d2ddd0eef10c90d8d5df5</anchor>
      <arglist>(int32 &amp;variable)</arglist>
    </member>
    <member kind="function">
      <name>incrementAndReturn</name>
      <anchor>a3b19a92e51eb24d7af1844313e16c940</anchor>
      <arglist>(int32 &amp;variable)</arglist>
    </member>
    <member kind="function">
      <name>decrement</name>
      <anchor>aeedce67d9814d2e406e43ff6f21f9231</anchor>
      <arglist>(int32 &amp;variable)</arglist>
    </member>
    <member kind="function">
      <name>decrementAndReturn</name>
      <anchor>ac8ad8d4a0b0c47a186680ac3a17f6a27</anchor>
      <arglist>(int32 &amp;variable)</arglist>
    </member>
    <member kind="function">
      <name>compareAndExchange</name>
      <anchor>aab4a34ae4153cae2fb7e10b6e05e14b1</anchor>
      <arglist>(int32 &amp;destination, int32 newValue, int32 requiredCurrentValue)</arglist>
    </member>
    <member kind="function">
      <name>swapPointers</name>
      <anchor>a75b8e9876426c681275d57e7f8545f83</anchor>
      <arglist>(void *volatile *value1, void *value2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioDataConverters</name>
    <filename>classAudioDataConverters.html</filename>
    <member kind="function">
      <name>DataFormat</name>
      <anchor>ab61072a75ca010290e4c03efc8078a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nt16LE</name>
      <anchor>ab61072a75ca010290e4c03efc8078a50a243339416b017cdc35a3cb5a6c0ce8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nt16BE</name>
      <anchor>ab61072a75ca010290e4c03efc8078a50a5413345207dc9e22a532a3f71cb63ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nt24LE</name>
      <anchor>ab61072a75ca010290e4c03efc8078a50a86d4b3fbe4206a23135697b42801a72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nt24BE</name>
      <anchor>ab61072a75ca010290e4c03efc8078a50a6d6c4e9b147146368a9e37573f7d3ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nt32LE</name>
      <anchor>ab61072a75ca010290e4c03efc8078a50a7dbfa7f347adba31c018c85f4e88e474</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nt32BE</name>
      <anchor>ab61072a75ca010290e4c03efc8078a50ae66e24664940104a48ec3fa5e9c73e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>loat32LE</name>
      <anchor>ab61072a75ca010290e4c03efc8078a50ac0a9af131ea728266516d78d7ed60b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>loat32BE</name>
      <anchor>ab61072a75ca010290e4c03efc8078a50a967b624b78df07208abf588c3c87636c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>convertFloatToInt16LE</name>
      <anchor>a46e7783a14d3db370f99e2f4673eadb2</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=2)</arglist>
    </member>
    <member kind="function">
      <name>convertFloatToInt16BE</name>
      <anchor>a2b70ce732f21f861c14ad05ff048d7f4</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=2)</arglist>
    </member>
    <member kind="function">
      <name>convertFloatToInt24LE</name>
      <anchor>aecc99da81c4759127156a9a0184a37f8</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=3)</arglist>
    </member>
    <member kind="function">
      <name>convertFloatToInt24BE</name>
      <anchor>aa463faa96b1f9b4936bc462dc3d10e69</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=3)</arglist>
    </member>
    <member kind="function">
      <name>convertFloatToInt32LE</name>
      <anchor>ab5e3b78350ff3ce6ec4cb309268f1914</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=4)</arglist>
    </member>
    <member kind="function">
      <name>convertFloatToInt32BE</name>
      <anchor>a5558380ea1601f1e5adf0fad83ca9f2b</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=4)</arglist>
    </member>
    <member kind="function">
      <name>convertFloatToFloat32LE</name>
      <anchor>a6cf904f30301cf523d984570f215891d</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=4)</arglist>
    </member>
    <member kind="function">
      <name>convertFloatToFloat32BE</name>
      <anchor>ad8154a2931bde3ef70b1e610161c740f</anchor>
      <arglist>(const float *source, void *dest, int numSamples, int destBytesPerSample=4)</arglist>
    </member>
    <member kind="function">
      <name>convertInt16LEToFloat</name>
      <anchor>a34f59c881de48ff27c3f920f0833ce81</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=2)</arglist>
    </member>
    <member kind="function">
      <name>convertInt16BEToFloat</name>
      <anchor>ab8ab2c663016bdd9d1867b516efdc1f8</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=2)</arglist>
    </member>
    <member kind="function">
      <name>convertInt24LEToFloat</name>
      <anchor>a3584b16537c9c652017928416f65be08</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=3)</arglist>
    </member>
    <member kind="function">
      <name>convertInt24BEToFloat</name>
      <anchor>a96a8c299845b4cc929cdc4f5ff3f5a4c</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=3)</arglist>
    </member>
    <member kind="function">
      <name>convertInt32LEToFloat</name>
      <anchor>ad37c86c3bde96edfc3f898f119c7bcb9</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=4)</arglist>
    </member>
    <member kind="function">
      <name>convertInt32BEToFloat</name>
      <anchor>a1dd2a4b22ed53b861c31f07c0ee052a7</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=4)</arglist>
    </member>
    <member kind="function">
      <name>convertFloat32LEToFloat</name>
      <anchor>a10cde5d94f2ea19f5425ac418d8dce4c</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=4)</arglist>
    </member>
    <member kind="function">
      <name>convertFloat32BEToFloat</name>
      <anchor>a9e9ad69c914a77be1048e9df6397edbc</anchor>
      <arglist>(const void *source, float *dest, int numSamples, int srcBytesPerSample=4)</arglist>
    </member>
    <member kind="function">
      <name>convertFloatToFormat</name>
      <anchor>a1b7c2abcb69f9d9cbdbf55166f84ef53</anchor>
      <arglist>(DataFormat destFormat, const float *source, void *dest, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>convertFormatToFloat</name>
      <anchor>a105215c8f851b10b7174228c85bd3a97</anchor>
      <arglist>(DataFormat sourceFormat, const void *source, float *dest, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>interleaveSamples</name>
      <anchor>a8eb9899465d9f9a34f6b95037f04e020</anchor>
      <arglist>(const float **source, float *dest, int numSamples, int numChannels)</arglist>
    </member>
    <member kind="function">
      <name>deinterleaveSamples</name>
      <anchor>aac3f177b8617346f5cb1dd93cf09d152</anchor>
      <arglist>(const float *source, float **dest, int numSamples, int numChannels)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioDeviceManager</name>
    <base>ChangeBroadcaster</base>
    <filename>classAudioDeviceManager.html</filename>
    <member kind="function">
      <name>AudioDeviceManager</name>
      <anchor>accab16a03e809121d56e8b272125f3ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AudioDeviceManager</name>
      <anchor>aba2ff8bbc69b9434dfc90c3a7bc09d6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>initialise</name>
      <anchor>abba3eca56d64ca8df0f1eeff82aeff38</anchor>
      <arglist>(int numInputChannelsNeeded, int numOutputChannelsNeeded, const XmlElement *savedState, bool selectDefaultDeviceOnFailure, const String &amp;preferredDefaultDeviceName=String::empty, const AudioDeviceSetup *preferredSetupOptions=0)</arglist>
    </member>
    <member kind="function">
      <name>createStateXml</name>
      <anchor>abb846b502125744f4ea04f06cde5d92c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAudioDeviceSetup</name>
      <anchor>a85c1d3c219a8a30caf09dbb9da4afe5a</anchor>
      <arglist>(AudioDeviceSetup &amp;setup)</arglist>
    </member>
    <member kind="function">
      <name>setAudioDeviceSetup</name>
      <anchor>a2243f4a653bf180154bbd7d89d5ff87c</anchor>
      <arglist>(const AudioDeviceSetup &amp;newSetup, bool treatAsChosenDevice)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentAudioDevice</name>
      <anchor>a45c8468d19d8b085667baf7b399dcb73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentAudioDeviceType</name>
      <anchor>a256b40a38f7f3343b9aabac445e427c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentDeviceTypeObject</name>
      <anchor>a01438e7795abd52342d2cc845c1e74c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setCurrentAudioDeviceType</name>
      <anchor>a49e34c1ed60dafcebefc55d12f9175ad</anchor>
      <arglist>(const String &amp;type, bool treatAsChosenDevice)</arglist>
    </member>
    <member kind="function">
      <name>closeAudioDevice</name>
      <anchor>af9829fcacafb4a395d084b34cdb8391c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>restartLastAudioDevice</name>
      <anchor>ac46693f5b78c06357b16bf5e95560605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addAudioCallback</name>
      <anchor>acf3977dcc83f22b7f51091d7ff7b8aff</anchor>
      <arglist>(AudioIODeviceCallback *newCallback)</arglist>
    </member>
    <member kind="function">
      <name>removeAudioCallback</name>
      <anchor>af6d672043bfc5ca423ea0ca41b5ad2d1</anchor>
      <arglist>(AudioIODeviceCallback *callback)</arglist>
    </member>
    <member kind="function">
      <name>getCpuUsage</name>
      <anchor>ab7d067e2864f399a471b35cc83bf9a57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setMidiInputEnabled</name>
      <anchor>a5c16cde5d7c4c49dd9b6d00cc17ba481</anchor>
      <arglist>(const String &amp;midiInputDeviceName, bool enabled)</arglist>
    </member>
    <member kind="function">
      <name>isMidiInputEnabled</name>
      <anchor>a68824aadea468bbe6cd338c333fff715</anchor>
      <arglist>(const String &amp;midiInputDeviceName) const </arglist>
    </member>
    <member kind="function">
      <name>addMidiInputCallback</name>
      <anchor>a31e11b7a8596530a87cfcf8e48b978d2</anchor>
      <arglist>(const String &amp;midiInputDeviceName, MidiInputCallback *callback)</arglist>
    </member>
    <member kind="function">
      <name>removeMidiInputCallback</name>
      <anchor>a1338a65adb3849560847f99252adcbd2</anchor>
      <arglist>(const String &amp;midiInputDeviceName, MidiInputCallback *callback)</arglist>
    </member>
    <member kind="function">
      <name>setDefaultMidiOutput</name>
      <anchor>a02d957a7dfc854c2de56278db62a171f</anchor>
      <arglist>(const String &amp;deviceName)</arglist>
    </member>
    <member kind="function">
      <name>getDefaultMidiOutputName</name>
      <anchor>a722359cd7f7e328277c148387a025403</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDefaultMidiOutput</name>
      <anchor>ad8bd2bab4e005ee7091912a15c1e4c6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAvailableDeviceTypes</name>
      <anchor>a577475b3171c4d2cf8dbd7a6a48a02ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createAudioDeviceTypes</name>
      <anchor>ad7d7e0e64926665b12b62a53082caecc</anchor>
      <arglist>(OwnedArray&lt; AudioIODeviceType &gt; &amp;types)</arglist>
    </member>
    <member kind="function">
      <name>playTestSound</name>
      <anchor>ab32b74d9dda550d70d47c0cca76fdd25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enableInputLevelMeasurement</name>
      <anchor>a6a351316f351119fc2a75b69913b4a69</anchor>
      <arglist>(bool enableMeasurement)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentInputLevel</name>
      <anchor>a350c5ba19ff07a66cc17caf01f191d89</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioDeviceSelectorComponent</name>
    <base>Component</base>
    <base>ComboBoxListener</base>
    <base>ButtonListener</base>
    <base>ChangeListener</base>
    <filename>classAudioDeviceSelectorComponent.html</filename>
    <member kind="function">
      <name>AudioDeviceSelectorComponent</name>
      <anchor>aa30a0ebbfb7504abc5479a87d4dcad1f</anchor>
      <arglist>(AudioDeviceManager &amp;deviceManager, const int minAudioInputChannels, const int maxAudioInputChannels, const int minAudioOutputChannels, const int maxAudioOutputChannels, const bool showMidiInputOptions, const bool showMidiOutputSelector, const bool showChannelsAsStereoPairs, const bool hideAdvancedOptionsWithButton)</arglist>
    </member>
    <member kind="function">
      <name>~AudioDeviceSelectorComponent</name>
      <anchor>a4d8df94ada78d63f0114b0633a6b1024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>af1520a5a4ecbdf773b8e48a5d8c8755e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>comboBoxChanged</name>
      <anchor>a2da65a07b27350be0aed9b6d7a3e3ce5</anchor>
      <arglist>(ComboBox *)</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>a700ea48ede2752ba7da7ec91f7d06676</anchor>
      <arglist>(Button *)</arglist>
    </member>
    <member kind="function">
      <name>changeListenerCallback</name>
      <anchor>a532d3dab059a1d886ccc095c34aab1cd</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <name>childBoundsChanged</name>
      <anchor>a2fc15473fd8832a825d81ba34b5615ca</anchor>
      <arglist>(Component *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormat</name>
    <filename>classAudioFormat.html</filename>
    <member kind="function">
      <name>~AudioFormat</name>
      <anchor>aa8d7789f75b2d9640eadb0262abd1fc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioFormat</name>
      <anchor>afa34afa4446e53959bd52d00a49d5a8f</anchor>
      <arglist>(const String &amp;formatName, const juce_wchar **const fileExtensions)</arglist>
    </member>
    <member kind="function">
      <name>getFormatName</name>
      <anchor>a8b33099d624ef043f53e4b0082800abf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFileExtensions</name>
      <anchor>a1efaa8ebdc8c026fdaad727e766b311c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>canHandleFile</name>
      <anchor>a1bb639929ca98b8e34183d568c380c79</anchor>
      <arglist>(const File &amp;fileToTest)</arglist>
    </member>
    <member kind="function">
      <name>getPossibleSampleRates</name>
      <anchor>add158da22294270ec9904f0834aa6637</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getPossibleBitDepths</name>
      <anchor>abb759067cd3537bc9545d7b1b195af2e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>canDoStereo</name>
      <anchor>a9ad5466caa8ccba6005ffad301e294a9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>canDoMono</name>
      <anchor>a40fc3d0b8ce9fe7b3dd87dfd1c57e72d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>isCompressed</name>
      <anchor>a507f233bee0df2059b74d032460de870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getQualityOptions</name>
      <anchor>a65e282ba04c7af85f9a91b6b4c69ccd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createReaderFor</name>
      <anchor>ac9170b668913beb74d70a7612f01aabd</anchor>
      <arglist>(InputStream *sourceStream, const bool deleteStreamIfOpeningFails)=0</arglist>
    </member>
    <member kind="function">
      <name>createWriterFor</name>
      <anchor>ae93a8144520e5bd2902a5daa97cc443b</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatManager</name>
    <filename>classAudioFormatManager.html</filename>
    <member kind="function">
      <name>AudioFormatManager</name>
      <anchor>ab6f17392bd6758b6ee2c544cfc377850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AudioFormatManager</name>
      <anchor>ae5e43f96f3854585e116637732c798d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>juce_DeclareSingleton</name>
      <anchor>a216aa94ba4bbde3fe98e4c308b67a462</anchor>
      <arglist>(AudioFormatManager, false)</arglist>
    </member>
    <member kind="function">
      <name>registerFormat</name>
      <anchor>aa9527a11651cbf1f34c4942f44ea5bf4</anchor>
      <arglist>(AudioFormat *newFormat, bool makeThisTheDefaultFormat)</arglist>
    </member>
    <member kind="function">
      <name>registerBasicFormats</name>
      <anchor>a1a8510b3078662358013ad78239d688e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearFormats</name>
      <anchor>aa321a315fd1fdb294779832386092450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumKnownFormats</name>
      <anchor>aef8170d93782573c9a2970430ac64f5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getKnownFormat</name>
      <anchor>a7f8c19e9820a10264371c2097ce3bfee</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>findFormatForFileExtension</name>
      <anchor>a36344f4d5c1820133a430572a0cbf6d6</anchor>
      <arglist>(const String &amp;fileExtension) const </arglist>
    </member>
    <member kind="function">
      <name>getDefaultFormat</name>
      <anchor>a19c093d4ddead5c031c50d37a61bc9b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getWildcardForAllFormats</name>
      <anchor>add966ad2a10db3727c74ca342a73388a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createReaderFor</name>
      <anchor>ab78bd5aa0ff2b9b667b5156b3bac5e83</anchor>
      <arglist>(const File &amp;audioFile)</arglist>
    </member>
    <member kind="function">
      <name>createReaderFor</name>
      <anchor>a8b691e67fef322c482262635fcfd3fee</anchor>
      <arglist>(InputStream *audioFileStream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatReader</name>
    <filename>classAudioFormatReader.html</filename>
    <member kind="function">
      <name>AudioFormatReader</name>
      <anchor>a2dfb6080eb01440fa8e8dde6b7baf5c6</anchor>
      <arglist>(InputStream *sourceStream, const String &amp;formatName)</arglist>
    </member>
    <member kind="function">
      <name>~AudioFormatReader</name>
      <anchor>aa5c4a7c0715e60d829a03b8aa67a8c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFormatName</name>
      <anchor>a5b24502d1b28cea61c24fdb744ba58e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>af9c470267bc9fc3bf2fba8f70a93dbce</anchor>
      <arglist>(int **destSamples, int numDestChannels, int64 startSampleInSource, int numSamplesToRead, bool fillLeftoverChannelsWithCopies)</arglist>
    </member>
    <member kind="function">
      <name>readMaxLevels</name>
      <anchor>aa6393d5cb57b6a03cb7544df495d86b6</anchor>
      <arglist>(int64 startSample, int64 numSamples, float &amp;lowestLeft, float &amp;highestLeft, float &amp;lowestRight, float &amp;highestRight)</arglist>
    </member>
    <member kind="function">
      <name>searchForLevel</name>
      <anchor>a088e8f4f625a23a4fd0234eec16ec53a</anchor>
      <arglist>(int64 startSample, int64 numSamplesToSearch, double magnitudeRangeMinimum, double magnitudeRangeMaximum, int minimumConsecutiveSamples)</arglist>
    </member>
    <member kind="function">
      <name>readSamples</name>
      <anchor>a8447eed7f81e0b931248a8eb98ed106f</anchor>
      <arglist>(int **destSamples, int numDestChannels, int startOffsetInDestBuffer, int64 startSampleInFile, int numSamples)=0</arglist>
    </member>
    <member kind="function">
      <name>sampleRate</name>
      <anchor>aafcd07b3ac08e83c019621cd8cd0c7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bitsPerSample</name>
      <anchor>aa450170dd89d247be8eb1f657b8b47d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lengthInSamples</name>
      <anchor>af7373fd7e45ed1f026647fc8671e997f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numChannels</name>
      <anchor>a2a7c577b4ececb03d3658fd0625c5b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>usesFloatingPointData</name>
      <anchor>aed5e9ba760d519f110c18053d6adba7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>metadataValues</name>
      <anchor>a8dfe48ed0e171928185c716811f5ecdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>input</name>
      <anchor>a81797ede6915ec762408d8ed23ec4d10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatReaderSource</name>
    <base>PositionableAudioSource</base>
    <filename>classAudioFormatReaderSource.html</filename>
    <member kind="function">
      <name>AudioFormatReaderSource</name>
      <anchor>ac275b5f5e75704523a1aa26550e350ee</anchor>
      <arglist>(AudioFormatReader *const sourceReader, const bool deleteReaderWhenThisIsDeleted)</arglist>
    </member>
    <member kind="function">
      <name>~AudioFormatReaderSource</name>
      <anchor>a6efb3ee10a5980d3830c4f2272040779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setLooping</name>
      <anchor>a8d5ea284b6a3b47fc71f510c5acb395a</anchor>
      <arglist>(const bool shouldLoop)</arglist>
    </member>
    <member kind="function">
      <name>isLooping</name>
      <anchor>a2599bffcdcd9eed30705e866e27a1889</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAudioFormatReader</name>
      <anchor>a5f3bd6397db55b071b6e5453dd97cb6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>prepareToPlay</name>
      <anchor>a73fe788334483f5829ad96d6a14db007</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <name>releaseResources</name>
      <anchor>acb26c6dec539a6badd7197f72a7e5865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNextAudioBlock</name>
      <anchor>ae6f4c17dedb24e7e35abb45a41cc9aa9</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
    <member kind="function">
      <name>setNextReadPosition</name>
      <anchor>a5af8d332dc9a1cda79cfbd86dcacc516</anchor>
      <arglist>(int newPosition)</arglist>
    </member>
    <member kind="function">
      <name>getNextReadPosition</name>
      <anchor>ad346811ae825f65191cb10e91dd76408</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTotalLength</name>
      <anchor>a043971ebac9efb8583d8c1d11be8ef49</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioFormatWriter</name>
    <filename>classAudioFormatWriter.html</filename>
    <member kind="function">
      <name>AudioFormatWriter</name>
      <anchor>ad13516434d025d9427fab9ac9b208a77</anchor>
      <arglist>(OutputStream *destStream, const String &amp;formatName, double sampleRate, unsigned int numberOfChannels, unsigned int bitsPerSample)</arglist>
    </member>
    <member kind="function">
      <name>~AudioFormatWriter</name>
      <anchor>ad3e3c4a5e1ba629c0d1aaa47827389f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFormatName</name>
      <anchor>afbcf29086a674418d6c39577c16388e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>a60dc79a5cd9ed0307ea04637ed25ea8b</anchor>
      <arglist>(const int **samplesToWrite, int numSamples)=0</arglist>
    </member>
    <member kind="function">
      <name>writeFromAudioReader</name>
      <anchor>a3a691c94e9609383c915af71cbf760db</anchor>
      <arglist>(AudioFormatReader &amp;reader, int64 startSample, int64 numSamplesToRead)</arglist>
    </member>
    <member kind="function">
      <name>writeFromAudioSource</name>
      <anchor>a4d09d96836ebe2779d2e82a090d0b29f</anchor>
      <arglist>(AudioSource &amp;source, int numSamplesToRead, int samplesPerBlock=2048)</arglist>
    </member>
    <member kind="function">
      <name>getSampleRate</name>
      <anchor>a5d8a19b9953df2f6d372b3815ae2559e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumChannels</name>
      <anchor>ab057e692af172bce18eb7e0d911f3de0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBitsPerSample</name>
      <anchor>a9ad81c45a02e0d830788c11056603f1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isFloatingPoint</name>
      <anchor>ac6ff914fed061b00edf2d57ae577e8b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>sampleRate</name>
      <anchor>aafefbda90e2a58cb057e89e995decfd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numChannels</name>
      <anchor>af33e6836e6dbbcd774ac166453c5446c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bitsPerSample</name>
      <anchor>aa1c1c0accbc262067e2f9ad75d70d155</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>usesFloatingPointData</name>
      <anchor>a876800b982bbe25e583633d3876a9a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>output</name>
      <anchor>aeef1f96e051a7f40b69664636393bf5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioIODevice</name>
    <filename>classAudioIODevice.html</filename>
    <member kind="function">
      <name>~AudioIODevice</name>
      <anchor>a0af67fc5598fb5fd9b033d3938968a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioIODevice</name>
      <anchor>aa380a49e49176fb883d89b094bf2448c</anchor>
      <arglist>(const String &amp;deviceName, const String &amp;typeName)</arglist>
    </member>
    <member kind="function">
      <name>getName</name>
      <anchor>a9b32e12853cc7812686b126e77c082cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTypeName</name>
      <anchor>a54e5c79062ae0971ab7ff37f4e4297f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getOutputChannelNames</name>
      <anchor>a4b6a18c5e8472a034f7c41c9e68110da</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getInputChannelNames</name>
      <anchor>a04647ff4e261559911ba2b2f5715d248</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getNumSampleRates</name>
      <anchor>a2da113c18b9c090d07a0f8bb586f1cdd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getSampleRate</name>
      <anchor>a89da96e465e0ea4a3029c90f77081df8</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function">
      <name>getNumBufferSizesAvailable</name>
      <anchor>ae0e9207ed5fdcbd753cc51674f5c28e8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getBufferSizeSamples</name>
      <anchor>adb66b7d42aed9babc19406a295c8a8c2</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function">
      <name>getDefaultBufferSize</name>
      <anchor>a71384f0310a9f6850cd826d0fd91f8f4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>a64204fa3c56064eb658243e3cdadb1e6</anchor>
      <arglist>(const BigInteger &amp;inputChannels, const BigInteger &amp;outputChannels, double sampleRate, int bufferSizeSamples)=0</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>a7ca9104dc82d77961b3dfcc005810004</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>isOpen</name>
      <anchor>aebfdd9a70545dd500041cd7e5cd736c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>aa3a17cf757a6297aab23a1327579347f</anchor>
      <arglist>(AudioIODeviceCallback *callback)=0</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>aca2e8897d904bc36b5faa647cfa8d20a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>isPlaying</name>
      <anchor>af8b5c71cb2512bcdf477267e3fc4faf7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getLastError</name>
      <anchor>a192693a8f2465ec1c5c51407580f1e2d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getCurrentBufferSizeSamples</name>
      <anchor>af7636fe06f58b58c41bc8575184f518f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getCurrentSampleRate</name>
      <anchor>afba31b6d244b7cc257e925a04c5c383c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getCurrentBitDepth</name>
      <anchor>abab889e2e9ff5dd49626faa15bfbac37</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getActiveOutputChannels</name>
      <anchor>aba618baceb85d434e6a8de5767235e7d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>getActiveInputChannels</name>
      <anchor>a6e87292b657fadedd7313e9602ee6790</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>getOutputLatencyInSamples</name>
      <anchor>a693804fbf5a7cceb31ece10a9f03bd11</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getInputLatencyInSamples</name>
      <anchor>a3998b9256b8f5056e5e1cbf17c3e520d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>hasControlPanel</name>
      <anchor>a61f6654ab66f66e60e30bc7e5b08647b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>showControlPanel</name>
      <anchor>ab8871c0f3b0639e0408582b354b28247</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>a8f0fcd3c3672601cfd44749221452ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>typeName</name>
      <anchor>a0f3aec64dbabccdd7a9a688def70cf45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioIODeviceCallback</name>
    <filename>classAudioIODeviceCallback.html</filename>
    <member kind="function">
      <name>~AudioIODeviceCallback</name>
      <anchor>a922abd58862d1bc04c067683a6a8e59a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>audioDeviceIOCallback</name>
      <anchor>a9ba147cd10fe995c3016dbf35132f995</anchor>
      <arglist>(const float **inputChannelData, int numInputChannels, float **outputChannelData, int numOutputChannels, int numSamples)=0</arglist>
    </member>
    <member kind="function">
      <name>audioDeviceAboutToStart</name>
      <anchor>a1bec2ae89543a93e31461991f7404aec</anchor>
      <arglist>(AudioIODevice *device)=0</arglist>
    </member>
    <member kind="function">
      <name>audioDeviceStopped</name>
      <anchor>a7b3e3c479e4e0b3b19ea992960ef46f5</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioIODeviceType</name>
    <filename>classAudioIODeviceType.html</filename>
    <member kind="function">
      <name>~AudioIODeviceType</name>
      <anchor>adc7de51c8ca7633ace84e982b13272d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioIODeviceType</name>
      <anchor>a4750d3af810f03d74d9a73584f2bf1d0</anchor>
      <arglist>(const String &amp;typeName)</arglist>
    </member>
    <member kind="function">
      <name>getTypeName</name>
      <anchor>affba851fea02b10a0c9f2cba336be28f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>scanForDevices</name>
      <anchor>a9215b39e523934ac648d4f85f1e1bdf5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getDeviceNames</name>
      <anchor>a6734b91a4f0d4b7a76df001aeafb990d</anchor>
      <arglist>(bool wantInputNames=false) const =0</arglist>
    </member>
    <member kind="function">
      <name>getDefaultDeviceIndex</name>
      <anchor>af12cc963a4d445c2665452c3173bac67</anchor>
      <arglist>(bool forInput) const =0</arglist>
    </member>
    <member kind="function">
      <name>getIndexOfDevice</name>
      <anchor>a76d7d6b6c3f600dce0594be7bab24bc8</anchor>
      <arglist>(AudioIODevice *device, bool asInput) const =0</arglist>
    </member>
    <member kind="function">
      <name>hasSeparateInputsAndOutputs</name>
      <anchor>ac87c3129c8e55018e968225b4a47dc74</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>createDevice</name>
      <anchor>a71099710a2d23a76ccba190882635f76</anchor>
      <arglist>(const String &amp;outputDeviceName, const String &amp;inputDeviceName)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPlayHead</name>
    <filename>classAudioPlayHead.html</filename>
    <member kind="function">
      <name>FrameRateType</name>
      <anchor>a9afad1749c8002945b2a6921eef92b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ps24</name>
      <anchor>a9afad1749c8002945b2a6921eef92b25a0a9a4305317d85cf1975f6be3569e9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ps25</name>
      <anchor>a9afad1749c8002945b2a6921eef92b25a8deb0cfa8182f6be90cb4d91b4b68456</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ps2997</name>
      <anchor>a9afad1749c8002945b2a6921eef92b25a7c5eadafb62a8be03ab5690d34fb7460</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ps30</name>
      <anchor>a9afad1749c8002945b2a6921eef92b25a77c3bd70c42f416f663c83036bff401d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ps2997drop</name>
      <anchor>a9afad1749c8002945b2a6921eef92b25ac03944a2bba5e61cabcca112edfd1efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ps30drop</name>
      <anchor>a9afad1749c8002945b2a6921eef92b25a2263e006dec6f9cf53adbbcecdc9e287</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>psUnknown</name>
      <anchor>a9afad1749c8002945b2a6921eef92b25a7e58343767d199b598a16ea25c09b062</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AudioPlayHead</name>
      <anchor>a9e78c0595510555a3d816a54bffeb610</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AudioPlayHead</name>
      <anchor>a9c32cae9ee0bb7442a2c465a73aca6bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCurrentPosition</name>
      <anchor>ae8ff79b6ec79fbecb1e8276ad9867cd2</anchor>
      <arglist>(CurrentPositionInfo &amp;result)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPluginFormat</name>
    <filename>classAudioPluginFormat.html</filename>
    <member kind="function">
      <name>~AudioPluginFormat</name>
      <anchor>a13029b260e822e954d6b33229db75d50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioPluginFormat</name>
      <anchor>ad380e17f85b81e109a9826183ada0d2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioPluginFormat</name>
      <anchor>ad1cf478e264e6811b30aea32e1826ab2</anchor>
      <arglist>(const AudioPluginFormat &amp;)</arglist>
    </member>
    <member kind="function">
      <name>getName</name>
      <anchor>a29616e058a14ff353ec3036d493e3034</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>findAllTypesForFile</name>
      <anchor>a9d23e71b2c2429cad9775a14e021abd6</anchor>
      <arglist>(OwnedArray&lt; PluginDescription &gt; &amp;results, const String &amp;fileOrIdentifier)=0</arglist>
    </member>
    <member kind="function">
      <name>createInstanceFromDescription</name>
      <anchor>a8efba8d029ae6b22a88cc6d7c84e5ec0</anchor>
      <arglist>(const PluginDescription &amp;desc)=0</arglist>
    </member>
    <member kind="function">
      <name>fileMightContainThisPluginType</name>
      <anchor>a89c2413dae86f4b9ea8fb29ed205edc5</anchor>
      <arglist>(const String &amp;fileOrIdentifier)=0</arglist>
    </member>
    <member kind="function">
      <name>getNameOfPluginFromIdentifier</name>
      <anchor>a5fc8b45352e320e3b6f1d33e9994d400</anchor>
      <arglist>(const String &amp;fileOrIdentifier)=0</arglist>
    </member>
    <member kind="function">
      <name>doesPluginStillExist</name>
      <anchor>aa75ed0f5726f88ca1276208f0c42da41</anchor>
      <arglist>(const PluginDescription &amp;desc)=0</arglist>
    </member>
    <member kind="function">
      <name>searchPathsForPlugins</name>
      <anchor>aafd4516e98258e9b54915fa50ea9a734</anchor>
      <arglist>(const FileSearchPath &amp;directoriesToSearch, bool recursive)=0</arglist>
    </member>
    <member kind="function">
      <name>getDefaultLocationsToSearch</name>
      <anchor>a5f011d294b24a5850709b9de1da31261</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a3b7b05251498466d1e0aeb208a0f963f</anchor>
      <arglist>(const AudioPluginFormat &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPluginFormatManager</name>
    <base>DeletedAtShutdown</base>
    <filename>classAudioPluginFormatManager.html</filename>
    <member kind="function">
      <name>AudioPluginFormatManager</name>
      <anchor>ac2781ab5b9b81784a1041edb16c3bdd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AudioPluginFormatManager</name>
      <anchor>af665e2e901d438a93a75282df73dd1b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>juce_DeclareSingleton_SingleThreaded</name>
      <anchor>a6d325582d6292ade88c91b0a9b915c6a</anchor>
      <arglist>(AudioPluginFormatManager, false)</arglist>
    </member>
    <member kind="function">
      <name>addDefaultFormats</name>
      <anchor>a43c3c16e48f1c50069573c8aede0b776</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumFormats</name>
      <anchor>a3c93f8d5747cf2c9f1aa6967e19b5dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFormat</name>
      <anchor>af3ca1507dff8b7a7a5abfe4674652305</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <name>addFormat</name>
      <anchor>af9c563ede401d890130c10f1461a3b70</anchor>
      <arglist>(AudioPluginFormat *const format)</arglist>
    </member>
    <member kind="function">
      <name>createPluginInstance</name>
      <anchor>a246abfba112f90b88b0e537ee5b97e0a</anchor>
      <arglist>(const PluginDescription &amp;description, String &amp;errorMessage) const </arglist>
    </member>
    <member kind="function">
      <name>doesPluginStillExist</name>
      <anchor>aa72ffaa8d7fa00a3b510a75064bcb913</anchor>
      <arglist>(const PluginDescription &amp;description) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPluginInstance</name>
    <base>AudioProcessor</base>
    <filename>classAudioPluginInstance.html</filename>
    <member kind="function">
      <name>~AudioPluginInstance</name>
      <anchor>adfede30a4e4f8debd321785322a472b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioPluginInstance</name>
      <anchor>a728172a1e902b7ab16c5d2b580a93e79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioPluginInstance</name>
      <anchor>a2595038917fbd4031cd8e056bbe06d56</anchor>
      <arglist>(const AudioPluginInstance &amp;)</arglist>
    </member>
    <member kind="function">
      <name>fillInPluginDescription</name>
      <anchor>addcf6a53ee6ac9d21e1e4ad1ba0bcc5d</anchor>
      <arglist>(PluginDescription &amp;description) const =0</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ab23be88575759ca02079e1c2ebbf7faf</anchor>
      <arglist>(const AudioPluginInstance &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessor</name>
    <filename>classAudioProcessor.html</filename>
    <member kind="function">
      <name>AudioProcessor</name>
      <anchor>a8602919358f1bf8799abd0c179c5e03b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AudioProcessor</name>
      <anchor>ac36ca53f3b198e097e38b8e830890878</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getName</name>
      <anchor>a71affad7782adb55b183d6d4d0853253</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>prepareToPlay</name>
      <anchor>ac7ebd6fb3dd06bd023159c590e3a7d2a</anchor>
      <arglist>(double sampleRate, int estimatedSamplesPerBlock)=0</arglist>
    </member>
    <member kind="function">
      <name>releaseResources</name>
      <anchor>a49e88e7d6c7c40899624beb9e3508f3a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>processBlock</name>
      <anchor>a7d8c56f45dfd03b507e120eeca7435dd</anchor>
      <arglist>(AudioSampleBuffer &amp;buffer, MidiBuffer &amp;midiMessages)=0</arglist>
    </member>
    <member kind="function">
      <name>getPlayHead</name>
      <anchor>a9f12f2ce97d2710311c6e299414c6631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSampleRate</name>
      <anchor>ab80fec2b71040aa6d0349853976b52be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBlockSize</name>
      <anchor>a8472ebaff870e59228c4de4acf6582fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumInputChannels</name>
      <anchor>a8aa98953d792b29ca197656eba3de5c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumOutputChannels</name>
      <anchor>a9c18ce4233c1a114a5564b759dad89af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getInputChannelName</name>
      <anchor>adf21b872bcc2e95025adf66ccf54f463</anchor>
      <arglist>(const int channelIndex) const =0</arglist>
    </member>
    <member kind="function">
      <name>getOutputChannelName</name>
      <anchor>a21ce14a15ff829fb37d3fdccd2351580</anchor>
      <arglist>(const int channelIndex) const =0</arglist>
    </member>
    <member kind="function">
      <name>isInputChannelStereoPair</name>
      <anchor>a1de55114a91badc007d1e389a81a14eb</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function">
      <name>isOutputChannelStereoPair</name>
      <anchor>aa429d156af1caf829627043615b5ede7</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function">
      <name>getLatencySamples</name>
      <anchor>a19a2fef2f25305dc18ed5a79dab205ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setLatencySamples</name>
      <anchor>ae8be96abd60dfce0945f8d083f301a1a</anchor>
      <arglist>(const int newLatency)</arglist>
    </member>
    <member kind="function">
      <name>acceptsMidi</name>
      <anchor>ae482a0c2928bfe77de821e6824ffaee6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>producesMidi</name>
      <anchor>a719715472b12c40e8144109561c04e65</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>getCallbackLock</name>
      <anchor>ade90017d46ae5f1ef58aa3c615f70a3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>suspendProcessing</name>
      <anchor>a79515f3f39d87a8798356df3ed136462</anchor>
      <arglist>(const bool shouldBeSuspended)</arglist>
    </member>
    <member kind="function">
      <name>isSuspended</name>
      <anchor>a23e1c124934ee51bad05d66c490198f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>ab10c4739ceb56e5cd70dbce8aa8c4f61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNonRealtime</name>
      <anchor>a2b1b57bd6221249ac6860478372ca173</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setNonRealtime</name>
      <anchor>a4e532a70ed35108c2c6ecb80b36d532b</anchor>
      <arglist>(const bool isNonRealtime)</arglist>
    </member>
    <member kind="function">
      <name>createEditor</name>
      <anchor>a103fc8a8666b7d31b472e017262be84d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getActiveEditor</name>
      <anchor>a2b83c113aa997beda64f926e6210174d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createEditorIfNeeded</name>
      <anchor>a0e06519ec925a8da3180df1a7a34f3eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumParameters</name>
      <anchor>ad6b6bab11612f3af64dbace66c8990f8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getParameterName</name>
      <anchor>ab25b03cba4e0ec2f6eac32e7341960c7</anchor>
      <arglist>(int parameterIndex)=0</arglist>
    </member>
    <member kind="function">
      <name>getParameter</name>
      <anchor>a27473b6db976c8ee59f570870ea5fde3</anchor>
      <arglist>(int parameterIndex)=0</arglist>
    </member>
    <member kind="function">
      <name>getParameterText</name>
      <anchor>a97bb7a26a396cc437fcecde38a70d6b9</anchor>
      <arglist>(int parameterIndex)=0</arglist>
    </member>
    <member kind="function">
      <name>setParameter</name>
      <anchor>a4e4d173766f679763fe9484ba733ca38</anchor>
      <arglist>(int parameterIndex, float newValue)=0</arglist>
    </member>
    <member kind="function">
      <name>setParameterNotifyingHost</name>
      <anchor>ab09a26934acb4d7fe3f71448aeb80f18</anchor>
      <arglist>(int parameterIndex, float newValue)</arglist>
    </member>
    <member kind="function">
      <name>isParameterAutomatable</name>
      <anchor>a854a99d8216288d7518024828398f74b</anchor>
      <arglist>(int parameterIndex) const </arglist>
    </member>
    <member kind="function">
      <name>isMetaParameter</name>
      <anchor>a525c28ae5c579beaf0008cbf09d490c7</anchor>
      <arglist>(int parameterIndex) const </arglist>
    </member>
    <member kind="function">
      <name>beginParameterChangeGesture</name>
      <anchor>ad082383dc1b0e4f648bb4edaf61cf385</anchor>
      <arglist>(int parameterIndex)</arglist>
    </member>
    <member kind="function">
      <name>endParameterChangeGesture</name>
      <anchor>a4205962ffb34852cfc1ef1476050dd68</anchor>
      <arglist>(int parameterIndex)</arglist>
    </member>
    <member kind="function">
      <name>updateHostDisplay</name>
      <anchor>ab53b860c69380cb34e466b60a3bce3f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumPrograms</name>
      <anchor>a510123768a99f32ff4a23d0458e15e13</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getCurrentProgram</name>
      <anchor>ac111282810f1e9ddb057e1267fa0bd79</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>setCurrentProgram</name>
      <anchor>aafe9fab0a94b6bb23cecdbb67851f206</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function">
      <name>getProgramName</name>
      <anchor>af0facfc9ed31fb3d2948ceac7ae89d87</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function">
      <name>changeProgramName</name>
      <anchor>accd5bd7b594fbc1a385f7a8b31c7b3f3</anchor>
      <arglist>(int index, const String &amp;newName)=0</arglist>
    </member>
    <member kind="function">
      <name>getStateInformation</name>
      <anchor>ae70805896f21b97e24a9497ce5ad4f85</anchor>
      <arglist>(JUCE_NAMESPACE::MemoryBlock &amp;destData)=0</arglist>
    </member>
    <member kind="function">
      <name>getCurrentProgramStateInformation</name>
      <anchor>a3450e9c1d3afc841924a3b0e6e36c5b0</anchor>
      <arglist>(JUCE_NAMESPACE::MemoryBlock &amp;destData)</arglist>
    </member>
    <member kind="function">
      <name>setStateInformation</name>
      <anchor>a6154837fea67c594a9b35c487894df27</anchor>
      <arglist>(const void *data, int sizeInBytes)=0</arglist>
    </member>
    <member kind="function">
      <name>setCurrentProgramStateInformation</name>
      <anchor>ade2c2df3606218b0f9fa1a3a376440a5</anchor>
      <arglist>(const void *data, int sizeInBytes)</arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>a81939cd9287c3013a1d0787eb622ed76</anchor>
      <arglist>(AudioProcessorListener *const newListener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>ac502b4d7b8cf013882974085998126aa</anchor>
      <arglist>(AudioProcessorListener *const listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <name>editorBeingDeleted</name>
      <anchor>a5afb5863e17801c837d1e3fb4995b17d</anchor>
      <arglist>(AudioProcessorEditor *const editor)</arglist>
    </member>
    <member kind="function">
      <name>setPlayHead</name>
      <anchor>ad408d6d08ace695ec3b7f518feab12f2</anchor>
      <arglist>(AudioPlayHead *const newPlayHead)</arglist>
    </member>
    <member kind="function">
      <name>setPlayConfigDetails</name>
      <anchor>a638c2c26c20ffd7efc8ff4962a167a81</anchor>
      <arglist>(const int numIns, const int numOuts, const double sampleRate, const int blockSize)</arglist>
    </member>
    <member kind="function">
      <name>copyXmlToBinary</name>
      <anchor>af9dab8546eb1b0cc2572593c69578682</anchor>
      <arglist>(const XmlElement &amp;xml, JUCE_NAMESPACE::MemoryBlock &amp;destData)</arglist>
    </member>
    <member kind="function">
      <name>getXmlFromBinary</name>
      <anchor>a1e7b387fcdb2646f06c2ab3923f63869</anchor>
      <arglist>(const void *data, const int sizeInBytes)</arglist>
    </member>
    <member kind="function">
      <name>sendParamChangeMessageToListeners</name>
      <anchor>a158d33574667236696bf05acddb15234</anchor>
      <arglist>(const int parameterIndex, const float newValue)</arglist>
    </member>
    <member kind="function">
      <name>playHead</name>
      <anchor>a78d1c3e1cabecff818b93de44891d973</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorEditor</name>
    <base>Component</base>
    <filename>classAudioProcessorEditor.html</filename>
    <member kind="function">
      <name>AudioProcessorEditor</name>
      <anchor>a847fdf496ec31874d131a83f71d8cf87</anchor>
      <arglist>(AudioProcessor *const owner)</arglist>
    </member>
    <member kind="function">
      <name>~AudioProcessorEditor</name>
      <anchor>a097320aae2fae460cfd0c01fc8e9ccb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getAudioProcessor</name>
      <anchor>a5560b499d890140ac1518a6e897130bc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorGraph</name>
    <base>AudioProcessor</base>
    <base>AsyncUpdater</base>
    <filename>classAudioProcessorGraph.html</filename>
    <member kind="function">
      <name>AudioProcessorGraph</name>
      <anchor>a8d33e2e949c97a1a37b47e39bbe43f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AudioProcessorGraph</name>
      <anchor>acd8a5defb48ec3344ad412e489aa58fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a13486fcb6b0a740331b0cecb3d22109f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumNodes</name>
      <anchor>afe70efc0108fa9f1e6c1ff18d66d1a6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNode</name>
      <anchor>a40d3499471e7f1901fc8503a3aa90cd3</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>getNodeForId</name>
      <anchor>ab2cf79e6540bb6a95df2c6e8fbe14b2f</anchor>
      <arglist>(const uint32 nodeId) const </arglist>
    </member>
    <member kind="function">
      <name>addNode</name>
      <anchor>a6a75a45b9daea9e424ea327b924e4bf9</anchor>
      <arglist>(AudioProcessor *newProcessor, uint32 nodeId=0)</arglist>
    </member>
    <member kind="function">
      <name>removeNode</name>
      <anchor>a35e6dcbafebe8ac84db3dad6983aad6c</anchor>
      <arglist>(uint32 nodeId)</arglist>
    </member>
    <member kind="function">
      <name>getNumConnections</name>
      <anchor>a5ec854f3964347bcc429bed74b1c0143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getConnection</name>
      <anchor>abb71ccd0af51ad8c64df980836f53856</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getConnectionBetween</name>
      <anchor>aecf825019c1bf0256105fc6c8ef130e7</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex) const </arglist>
    </member>
    <member kind="function">
      <name>isConnected</name>
      <anchor>a9f52ec181d8aabf723170d69b4bf4d7d</anchor>
      <arglist>(uint32 possibleSourceNodeId, uint32 possibleDestNodeId) const </arglist>
    </member>
    <member kind="function">
      <name>canConnect</name>
      <anchor>a1e196b127080aa6cb3f3f395c2a9366f</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex) const </arglist>
    </member>
    <member kind="function">
      <name>addConnection</name>
      <anchor>adde28972b8d725a3c9c7af43bbe0b569</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex)</arglist>
    </member>
    <member kind="function">
      <name>removeConnection</name>
      <anchor>a59e7b99abf5a7a515e9659e2fbfd3cb5</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>removeConnection</name>
      <anchor>a24cb1c816cb611f1a22978976f50aed0</anchor>
      <arglist>(uint32 sourceNodeId, int sourceChannelIndex, uint32 destNodeId, int destChannelIndex)</arglist>
    </member>
    <member kind="function">
      <name>disconnectNode</name>
      <anchor>a8fb912ad3add171eb08c6e58a66e1687</anchor>
      <arglist>(uint32 nodeId)</arglist>
    </member>
    <member kind="function">
      <name>removeIllegalConnections</name>
      <anchor>a3d025471473ded56797653edd4669220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getName</name>
      <anchor>a925407bb5f02f3af5215c47abf35e3b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>prepareToPlay</name>
      <anchor>a4fd25bbb34e5d3e0896e40cad0423a50</anchor>
      <arglist>(double sampleRate, int estimatedSamplesPerBlock)</arglist>
    </member>
    <member kind="function">
      <name>releaseResources</name>
      <anchor>a2354cf962164a7ad9d7fbd965848d8d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>processBlock</name>
      <anchor>a05a22a29cab3204540a96508e375593b</anchor>
      <arglist>(AudioSampleBuffer &amp;buffer, MidiBuffer &amp;midiMessages)</arglist>
    </member>
    <member kind="function">
      <name>getInputChannelName</name>
      <anchor>a3ebebba6d9a1763cf6069a2752f23e82</anchor>
      <arglist>(const int channelIndex) const </arglist>
    </member>
    <member kind="function">
      <name>getOutputChannelName</name>
      <anchor>ab84afeefda8f6ed4304716eed2521c60</anchor>
      <arglist>(const int channelIndex) const </arglist>
    </member>
    <member kind="function">
      <name>isInputChannelStereoPair</name>
      <anchor>ab182318b40d53198ea261e6418e66eea</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>isOutputChannelStereoPair</name>
      <anchor>ac58be7ec9eb1daa64b7ab22dcf16496b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>acceptsMidi</name>
      <anchor>a0ba15590303932887b009a65f547aeeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>producesMidi</name>
      <anchor>adcb61b28a2bd7057d1b7eca0d7750d80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createEditor</name>
      <anchor>af4f0ec32540bd6185f5f93491bd498c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumParameters</name>
      <anchor>a689c7a0e16af432e240db298cd8fcc6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getParameterName</name>
      <anchor>a2a8460a9ca99c57b70a1ef88586b654a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>getParameter</name>
      <anchor>a59a500045c3465fd77b1e760d8611070</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>getParameterText</name>
      <anchor>a52665f29438df941eb74d2a490a801c4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>setParameter</name>
      <anchor>a8b97fd964424095327b5f8f4ab70d6a6</anchor>
      <arglist>(int, float)</arglist>
    </member>
    <member kind="function">
      <name>getNumPrograms</name>
      <anchor>ad1a8e7d33cee0ea6e313cc36d562e565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCurrentProgram</name>
      <anchor>a08135dc8dd9281001eb2f2e3eb372c0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCurrentProgram</name>
      <anchor>a8b87ed5854da307847298cc5cc09af78</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>getProgramName</name>
      <anchor>a7dc237ff7cfc72a142ee29762fd87019</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>changeProgramName</name>
      <anchor>a4e95629fc3af742a6e92a8d8801900d4</anchor>
      <arglist>(int, const String &amp;)</arglist>
    </member>
    <member kind="function">
      <name>getStateInformation</name>
      <anchor>a981f6531ba5d0e46f3f83e8b9e7ea87b</anchor>
      <arglist>(JUCE_NAMESPACE::MemoryBlock &amp;destData)</arglist>
    </member>
    <member kind="function">
      <name>setStateInformation</name>
      <anchor>ad1953b78a5b717d234ba953c016ce26c</anchor>
      <arglist>(const void *data, int sizeInBytes)</arglist>
    </member>
    <member kind="function">
      <name>handleAsyncUpdate</name>
      <anchor>a13aae03ced87afaca564ac27dd35f2a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>midiChannelIndex</name>
      <anchor>acde235cdad97d2bba6dd828ceeb7c4e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorGraph::AudioGraphIOProcessor</name>
    <base>AudioPluginInstance</base>
    <filename>classAudioProcessorGraph_1_1AudioGraphIOProcessor.html</filename>
    <member kind="function">
      <name>AudioGraphIOProcessor::IODeviceType</name>
      <anchor>a612fff538a6a57529626b4121934761a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>udioInputNode</name>
      <anchor>a612fff538a6a57529626b4121934761aa002564f5df42036b1b8a791d8c3a760d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>udioOutputNode</name>
      <anchor>a612fff538a6a57529626b4121934761aac004122d6a09fdb5bce7fdb2221340f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>idiInputNode</name>
      <anchor>a612fff538a6a57529626b4121934761aa6ba4fa6ffb1f9ca1025fca01a222e000</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>idiOutputNode</name>
      <anchor>a612fff538a6a57529626b4121934761aac88e470585a2a9265dda58a0911b1c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::AudioGraphIOProcessor</name>
      <anchor>a8eb56847dc607a88b1872e3f36b53722</anchor>
      <arglist>(const IODeviceType type)</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::~AudioGraphIOProcessor</name>
      <anchor>a75d863be80c6fbec07b67cdaf4def49e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getType</name>
      <anchor>a98d60fe2efb9fa3b0d3654e7d62818ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getParentGraph</name>
      <anchor>a35e2317cf69e6147f1eadc9e7f1a1979</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::isInput</name>
      <anchor>a8e5cb11fe8779e395a712cb9c8631f70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::isOutput</name>
      <anchor>a3f9d57d4c945db5bb5494c784f3cf934</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getName</name>
      <anchor>a481d6ac7318053cea329664114e35605</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::fillInPluginDescription</name>
      <anchor>a7e77523de0448128eed6e44b0d587dcd</anchor>
      <arglist>(PluginDescription &amp;d) const </arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::prepareToPlay</name>
      <anchor>a43927c92dce9c1e862ca4d1b5c0ba668</anchor>
      <arglist>(double sampleRate, int estimatedSamplesPerBlock)</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::releaseResources</name>
      <anchor>ac18368bb954b2c8365c9d5397c53f430</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::processBlock</name>
      <anchor>a1bcf2e025745eb46eca0f0fb825fff44</anchor>
      <arglist>(AudioSampleBuffer &amp;buffer, MidiBuffer &amp;midiMessages)</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getInputChannelName</name>
      <anchor>a54749afd606e23ebe91a8f1336e2d8cb</anchor>
      <arglist>(const int channelIndex) const </arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getOutputChannelName</name>
      <anchor>a9395db3aa9564760b5a5a008c4a586dc</anchor>
      <arglist>(const int channelIndex) const </arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::isInputChannelStereoPair</name>
      <anchor>afe93b338e5adf5cebc16351f31bf6e55</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::isOutputChannelStereoPair</name>
      <anchor>ada482674d1ce15134d760bfc465e4859</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::acceptsMidi</name>
      <anchor>a19d60e1066eb20ae47e5c5ce5b738895</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::producesMidi</name>
      <anchor>aa349c8420bd6f5a3e3608b1413a07468</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::createEditor</name>
      <anchor>af6861e82318e75b06f45a53fa2c2d8b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getNumParameters</name>
      <anchor>a7cf2796c833f2faec48f347a0f0ac470</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getParameterName</name>
      <anchor>adff96858f5729d7a7ffad377b0bc62a4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getParameter</name>
      <anchor>aa7cc15b92ec1e9719fd558f767dfa487</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getParameterText</name>
      <anchor>a09bf3652ad6969b553814446b7c14b4a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::setParameter</name>
      <anchor>a66e83c73c358c6180c3e732961225cd4</anchor>
      <arglist>(int, float)</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getNumPrograms</name>
      <anchor>aab191dc5e7d73349211164a38a84dc3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getCurrentProgram</name>
      <anchor>aa8227ca23876adf8a1883e0591481f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::setCurrentProgram</name>
      <anchor>a5e9680d72ff565a017660078f56aa263</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getProgramName</name>
      <anchor>a0dee0c0ee8c581a1a23a2271a89068df</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::changeProgramName</name>
      <anchor>ad98756fb9c09d19de71394c9ab62e2f3</anchor>
      <arglist>(int, const String &amp;)</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::getStateInformation</name>
      <anchor>aa22115f052446d78c58517ad2e858e9b</anchor>
      <arglist>(JUCE_NAMESPACE::MemoryBlock &amp;destData)</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::setStateInformation</name>
      <anchor>a06926974db8fe8d6d73acb239742e4e6</anchor>
      <arglist>(const void *data, int sizeInBytes)</arglist>
    </member>
    <member kind="function">
      <name>AudioGraphIOProcessor::setParentGraph</name>
      <anchor>aa16e6188b3b4b1d7e62044f1844aa1c7</anchor>
      <arglist>(AudioProcessorGraph *graph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorGraph::Node</name>
    <base>ReferenceCountedObject</base>
    <filename>classAudioProcessorGraph_1_1Node.html</filename>
    <member kind="function">
      <name>Node::Ptr</name>
      <anchor>a1cd4fece57dfbe4994e6a52ab7fca74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Node::~Node</name>
      <anchor>a637a78d1de5e58670adc2c24feaf7f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Node::id</name>
      <anchor>a4c6ade1fbfef8c224972b19589d13d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Node::processor</name>
      <anchor>aed7832c2facf1df53640d4709b2b4e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Node::properties</name>
      <anchor>afc706ebfb3beddad1c5bc16bc7fa2a2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorListener</name>
    <filename>classAudioProcessorListener.html</filename>
    <member kind="function">
      <name>~AudioProcessorListener</name>
      <anchor>a255083443e5612f75ae3ab98bde7deb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>audioProcessorParameterChanged</name>
      <anchor>aa08a28d958759256aecd0f4af8a826f4</anchor>
      <arglist>(AudioProcessor *processor, int parameterIndex, float newValue)=0</arglist>
    </member>
    <member kind="function">
      <name>audioProcessorChanged</name>
      <anchor>aa639a646573153b1ecf666506318abd4</anchor>
      <arglist>(AudioProcessor *processor)=0</arglist>
    </member>
    <member kind="function">
      <name>audioProcessorParameterChangeGestureBegin</name>
      <anchor>a38075b5e4654a8c50e135eee40c74f2e</anchor>
      <arglist>(AudioProcessor *processor, int parameterIndex)</arglist>
    </member>
    <member kind="function">
      <name>audioProcessorParameterChangeGestureEnd</name>
      <anchor>a3d78c8d30a546bcccf98827c1b6effb4</anchor>
      <arglist>(AudioProcessor *processor, int parameterIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorPlayer</name>
    <base>AudioIODeviceCallback</base>
    <base>MidiInputCallback</base>
    <filename>classAudioProcessorPlayer.html</filename>
    <member kind="function">
      <name>AudioProcessorPlayer</name>
      <anchor>a79e9ec05a63015aceae92bc023368876</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AudioProcessorPlayer</name>
      <anchor>ad029b9ad85fd3aac440cdc019d190498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setProcessor</name>
      <anchor>a5c4a0998732e4b2fff5904a3041795d7</anchor>
      <arglist>(AudioProcessor *const processorToPlay)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentProcessor</name>
      <anchor>a7caf364ce349cc39c5385ebe8ccbcd9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMidiMessageCollector</name>
      <anchor>adc788f1fdedc0e774633777de68254c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>audioDeviceIOCallback</name>
      <anchor>abb955b974380c462a3d2ac0b34c46260</anchor>
      <arglist>(const float **inputChannelData, int totalNumInputChannels, float **outputChannelData, int totalNumOutputChannels, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>audioDeviceAboutToStart</name>
      <anchor>a8ffc4da36281435806538b0a607f894c</anchor>
      <arglist>(AudioIODevice *device)</arglist>
    </member>
    <member kind="function">
      <name>audioDeviceStopped</name>
      <anchor>a6aa3b4fc87b99ddd046f82f387124954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleIncomingMidiMessage</name>
      <anchor>aeb216987cd6273e8f8ce32ced93b1719</anchor>
      <arglist>(MidiInput *source, const MidiMessage &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioSampleBuffer</name>
    <filename>classAudioSampleBuffer.html</filename>
    <member kind="function">
      <name>AudioSampleBuffer</name>
      <anchor>aca9e0b47e101d3f9bd4af002d1c39b3f</anchor>
      <arglist>(int numChannels, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>AudioSampleBuffer</name>
      <anchor>ab8ab311e9a7127d9079376ca92155434</anchor>
      <arglist>(float **dataToReferTo, int numChannels, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>AudioSampleBuffer</name>
      <anchor>a9ae4afd73c2d7513f80990c326193076</anchor>
      <arglist>(const AudioSampleBuffer &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~AudioSampleBuffer</name>
      <anchor>ab1d7c7b3ed58edf06eefef2fce69219a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a0f2592e50a3c6cd643c13fed5420c678</anchor>
      <arglist>(const AudioSampleBuffer &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>getNumChannels</name>
      <anchor>af5f271f7fc1e358d506fa410552b8c0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumSamples</name>
      <anchor>a57a2c22e2641a9b54f187fcc2de75c8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSampleData</name>
      <anchor>a66134b27f39961ce5f3b672deb0cf7be</anchor>
      <arglist>(const int channelNumber) const </arglist>
    </member>
    <member kind="function">
      <name>getSampleData</name>
      <anchor>ac6415918a1861feaf5f53c1feb4c50a3</anchor>
      <arglist>(const int channelNumber, const int sampleOffset) const </arglist>
    </member>
    <member kind="function">
      <name>getArrayOfChannels</name>
      <anchor>ae710ffe72a0f521e36007d667de7150f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setSize</name>
      <anchor>a6a187cd75d5d80d0cf76c26cb17c03db</anchor>
      <arglist>(int newNumChannels, int newNumSamples, bool keepExistingContent=false, bool clearExtraSpace=false, bool avoidReallocating=false)</arglist>
    </member>
    <member kind="function">
      <name>setDataToReferTo</name>
      <anchor>ac03441125e5a3937cb50301ca5be22e8</anchor>
      <arglist>(float **dataToReferTo, int numChannels, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a6d4acabd2efd22e0098a12128da613d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>af3d147bfbb3280d8c2eafdc78366a044</anchor>
      <arglist>(int startSample, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a1c7a7d5785c55503782c82fd3f5ca3c5</anchor>
      <arglist>(int channel, int startSample, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>applyGain</name>
      <anchor>a700e13df7420220d404973f6bcb81f98</anchor>
      <arglist>(int channel, int startSample, int numSamples, float gain)</arglist>
    </member>
    <member kind="function">
      <name>applyGain</name>
      <anchor>a675344dff7989a652959cee09e2ab769</anchor>
      <arglist>(int startSample, int numSamples, float gain)</arglist>
    </member>
    <member kind="function">
      <name>applyGainRamp</name>
      <anchor>a345d0dfebd9c1ce2cfab78549eca8a9d</anchor>
      <arglist>(int channel, int startSample, int numSamples, float startGain, float endGain)</arglist>
    </member>
    <member kind="function">
      <name>addFrom</name>
      <anchor>ab3077062cf68b029738778420617bcf7</anchor>
      <arglist>(int destChannel, int destStartSample, const AudioSampleBuffer &amp;source, int sourceChannel, int sourceStartSample, int numSamples, float gainToApplyToSource=1.0f)</arglist>
    </member>
    <member kind="function">
      <name>addFrom</name>
      <anchor>a8739ef41439958d41999a47a36b1168b</anchor>
      <arglist>(int destChannel, int destStartSample, const float *source, int numSamples, float gainToApplyToSource=1.0f)</arglist>
    </member>
    <member kind="function">
      <name>addFromWithRamp</name>
      <anchor>a9e33d506d463365574c11e3b966c5884</anchor>
      <arglist>(int destChannel, int destStartSample, const float *source, int numSamples, float startGain, float endGain)</arglist>
    </member>
    <member kind="function">
      <name>copyFrom</name>
      <anchor>a53ffaf8721eb6eea0a29054e76a69d02</anchor>
      <arglist>(int destChannel, int destStartSample, const AudioSampleBuffer &amp;source, int sourceChannel, int sourceStartSample, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>copyFrom</name>
      <anchor>ad23b720609090dea196a1e4128862ecd</anchor>
      <arglist>(int destChannel, int destStartSample, const float *source, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>copyFrom</name>
      <anchor>a0966c38c2a210caa8568908fe3eb37d7</anchor>
      <arglist>(int destChannel, int destStartSample, const float *source, int numSamples, float gain)</arglist>
    </member>
    <member kind="function">
      <name>copyFromWithRamp</name>
      <anchor>a85e171401824673c23e8f9b6e2bd86fd</anchor>
      <arglist>(int destChannel, int destStartSample, const float *source, int numSamples, float startGain, float endGain)</arglist>
    </member>
    <member kind="function">
      <name>findMinMax</name>
      <anchor>a30bcc00044694ae647cb23c3100f9ec6</anchor>
      <arglist>(int channel, int startSample, int numSamples, float &amp;minVal, float &amp;maxVal) const </arglist>
    </member>
    <member kind="function">
      <name>getMagnitude</name>
      <anchor>ae1a28deacae48f8dc4dc0552dce3bffa</anchor>
      <arglist>(int channel, int startSample, int numSamples) const </arglist>
    </member>
    <member kind="function">
      <name>getMagnitude</name>
      <anchor>a7c8e1ce24a5f183f6460c6906ea25435</anchor>
      <arglist>(int startSample, int numSamples) const </arglist>
    </member>
    <member kind="function">
      <name>getRMSLevel</name>
      <anchor>a63a8332ca7c35447e827c566df4af89a</anchor>
      <arglist>(int channel, int startSample, int numSamples) const </arglist>
    </member>
    <member kind="function">
      <name>readFromAudioReader</name>
      <anchor>a098c9c8610ee9c877a95a8666c16fe2d</anchor>
      <arglist>(AudioFormatReader *reader, int startSample, int numSamples, int readerStartSample, bool useReaderLeftChan, bool useReaderRightChan)</arglist>
    </member>
    <member kind="function">
      <name>writeToAudioWriter</name>
      <anchor>a2a7c55787463cd132c0c9e0eda923062</anchor>
      <arglist>(AudioFormatWriter *writer, int startSample, int numSamples) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioSource</name>
    <filename>classAudioSource.html</filename>
    <member kind="function">
      <name>AudioSource</name>
      <anchor>a58ad52e32668f022d45fa6239e56a85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AudioSource</name>
      <anchor>a38b04f6bf7ea63b6cf465213c164623b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prepareToPlay</name>
      <anchor>a653279dbd167f70e318fd280681dbddf</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)=0</arglist>
    </member>
    <member kind="function">
      <name>releaseResources</name>
      <anchor>a7823bf0f1c43333eed41664c7994f290</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getNextAudioBlock</name>
      <anchor>a36fc2484ead8fb8dc03be57d09dd5735</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioSourcePlayer</name>
    <base>AudioIODeviceCallback</base>
    <filename>classAudioSourcePlayer.html</filename>
    <member kind="function">
      <name>AudioSourcePlayer</name>
      <anchor>a708828c1d38dc7d003f79bd98f577a94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AudioSourcePlayer</name>
      <anchor>a7cf30ef2b4616108e95a133fced197bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSource</name>
      <anchor>a27acf0932a719dd1cd6d730af0c232fa</anchor>
      <arglist>(AudioSource *newSource)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentSource</name>
      <anchor>ac15f99d0550cced87e043466026204a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setGain</name>
      <anchor>a37009479f8d14253882456defc110e97</anchor>
      <arglist>(const float newGain)</arglist>
    </member>
    <member kind="function">
      <name>audioDeviceIOCallback</name>
      <anchor>a071312c273e76742c08a2640ca337ba1</anchor>
      <arglist>(const float **inputChannelData, int totalNumInputChannels, float **outputChannelData, int totalNumOutputChannels, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>audioDeviceAboutToStart</name>
      <anchor>a6e7f0d7e27cc5e98458f0b6e1df6a48e</anchor>
      <arglist>(AudioIODevice *device)</arglist>
    </member>
    <member kind="function">
      <name>audioDeviceStopped</name>
      <anchor>a5e60c05676f9afeacd9ada6533cacea9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioSubsectionReader</name>
    <base>AudioFormatReader</base>
    <filename>classAudioSubsectionReader.html</filename>
    <member kind="function">
      <name>AudioSubsectionReader</name>
      <anchor>a534254f7895a750d6e02863f0b1f72de</anchor>
      <arglist>(AudioFormatReader *sourceReader, int64 subsectionStartSample, int64 subsectionLength, bool deleteSourceWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <name>~AudioSubsectionReader</name>
      <anchor>a6ea56901d6a179240bbb18e8ade97c90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readSamples</name>
      <anchor>acae9f55a1e41fdbd9e4697603f7e7586</anchor>
      <arglist>(int **destSamples, int numDestChannels, int startOffsetInDestBuffer, int64 startSampleInFile, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>readMaxLevels</name>
      <anchor>aff14d305baadb5227eba020b071a2a75</anchor>
      <arglist>(int64 startSample, int64 numSamples, float &amp;lowestLeft, float &amp;highestLeft, float &amp;lowestRight, float &amp;highestRight)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioThumbnail</name>
    <base>ChangeBroadcaster</base>
    <base>TimeSliceClient</base>
    <base>Timer</base>
    <filename>classAudioThumbnail.html</filename>
    <member kind="function">
      <name>AudioThumbnail</name>
      <anchor>abfa7516538eb0518cddeec4c71cf329d</anchor>
      <arglist>(int sourceSamplesPerThumbnailSample, AudioFormatManager &amp;formatManagerToUse, AudioThumbnailCache &amp;cacheToUse)</arglist>
    </member>
    <member kind="function">
      <name>~AudioThumbnail</name>
      <anchor>ac4e25d85982477ec205c5e968f16a56c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSource</name>
      <anchor>a1143eeec9a4a678ac72859185a6efe37</anchor>
      <arglist>(InputSource *newSource)</arglist>
    </member>
    <member kind="function">
      <name>loadFrom</name>
      <anchor>a59680950d18da52b3342f65cd44d9ecd</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <name>saveTo</name>
      <anchor>adeb15dd8aa79320eccc122ed07488e9b</anchor>
      <arglist>(OutputStream &amp;output) const </arglist>
    </member>
    <member kind="function">
      <name>getNumChannels</name>
      <anchor>a4b7294cd53e7439d3c4d43bdba168eb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTotalLength</name>
      <anchor>a597a87e6a02d7a539f31ee916b162ab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>drawChannel</name>
      <anchor>a9a84f78c3ba85807bcc93bd83c3f61e2</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int w, int h, double startTimeSeconds, double endTimeSeconds, int channelNum, float verticalZoomFactor)</arglist>
    </member>
    <member kind="function">
      <name>isFullyLoaded</name>
      <anchor>a2e1f475942da26a917b2d87e8b9b578a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>useTimeSlice</name>
      <anchor>a7cf08b503633c1bcf49aa666c75643e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>timerCallback</name>
      <anchor>a811cee713a5589b3e2b5f158326374a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioThumbnailCache</name>
    <base>TimeSliceThread</base>
    <filename>classAudioThumbnailCache.html</filename>
    <member kind="function">
      <name>AudioThumbnailCache</name>
      <anchor>a8b337276f3ec8979475e1884e9dde170</anchor>
      <arglist>(int maxNumThumbsToStore)</arglist>
    </member>
    <member kind="function">
      <name>~AudioThumbnailCache</name>
      <anchor>a4fd600ae0247a18e13c9922d318799cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a52c8490b5df7c750822d9c15ca829dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>loadThumb</name>
      <anchor>a9a677aae9adc64dc8b834e4e14e847d2</anchor>
      <arglist>(AudioThumbnail &amp;thumb, int64 hashCode)</arglist>
    </member>
    <member kind="function">
      <name>storeThumb</name>
      <anchor>a8e4f02bbe7910c168040b57424fba45c</anchor>
      <arglist>(const AudioThumbnail &amp;thumb, int64 hashCode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioTransportSource</name>
    <base>PositionableAudioSource</base>
    <base>ChangeBroadcaster</base>
    <filename>classAudioTransportSource.html</filename>
    <member kind="function">
      <name>AudioTransportSource</name>
      <anchor>ace4826902928ee0bb94026d29eebe419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~AudioTransportSource</name>
      <anchor>a8a47ae2093d1c04f53a13a014530419f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSource</name>
      <anchor>a99f3a1991005d1d6de169096402f7304</anchor>
      <arglist>(PositionableAudioSource *const newSource, int readAheadBufferSize=0, double sourceSampleRateToCorrectFor=0.0)</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>aab002d853ed9e9389fcaa25014c1fc72</anchor>
      <arglist>(double newPosition)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentPosition</name>
      <anchor>ac7fe93e119dc374f5acdef19649314b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hasStreamFinished</name>
      <anchor>ad5ee78893d543e121f6146b4f570e3ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>a1cfd309ab61fb226bc03e5774c6ce65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>a8c29c458d172bf51712f318de69d50db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isPlaying</name>
      <anchor>a2f8a32f65598a696fe1c6e62386c5a0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setGain</name>
      <anchor>aae6eeeed2b5119db3aa871a711141bce</anchor>
      <arglist>(const float newGain)</arglist>
    </member>
    <member kind="function">
      <name>getGain</name>
      <anchor>aba085253abe101791a32a5c8409a2e74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>prepareToPlay</name>
      <anchor>aac6c4daaa9344005f74ed22e168f6840</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <name>releaseResources</name>
      <anchor>ae30e372b920717ecc008e377a891e65b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNextAudioBlock</name>
      <anchor>a986e8df85340079d34194ffcaa1b1389</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
    <member kind="function">
      <name>setNextReadPosition</name>
      <anchor>a0a04c541dd3064bd8b1aaf7bed218d8f</anchor>
      <arglist>(int newPosition)</arglist>
    </member>
    <member kind="function">
      <name>getNextReadPosition</name>
      <anchor>aba443632191a1b66507c475c8c8928d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTotalLength</name>
      <anchor>a1c1fe49091f584ea8fbfb971fa382187</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isLooping</name>
      <anchor>a8a6e63b835a94c995139ec36f44257c6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BigInteger</name>
    <filename>classBigInteger.html</filename>
    <member kind="function">
      <name>BigInteger</name>
      <anchor>a67a108dbe651911a21b3fc4310a505dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>BigInteger</name>
      <anchor>ad261e8f0c3eef5e4f1d67a75c03e6713</anchor>
      <arglist>(unsigned int value)</arglist>
    </member>
    <member kind="function">
      <name>BigInteger</name>
      <anchor>af655a4ff4311721f8c33510bb15edd39</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <name>BigInteger</name>
      <anchor>a60dbec51bf8fcc775cf40aef3d49ae55</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <name>BigInteger</name>
      <anchor>ad40dd27e6670acf98ffb62a190ace292</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~BigInteger</name>
      <anchor>a987e3a4e9c4405404719be08caaa3146</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a480b91a54b0faa0b6114c386c988d26e</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>swapWith</name>
      <anchor>a3b67b95d55173eaae6b5341c42a20841</anchor>
      <arglist>(BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>ad890507b3a12b2a542dbe2ad19658bff</anchor>
      <arglist>(int bit) const </arglist>
    </member>
    <member kind="function">
      <name>isZero</name>
      <anchor>a9541bf84b98e82292e45de278db26338</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isOne</name>
      <anchor>a4a329c79bcf4887e39fe88b7f52c7db3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>toInteger</name>
      <anchor>a800aabf1159142c8b3797752d72faf2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>ad09deac0bc58011e211a59cd80c134f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearBit</name>
      <anchor>a38af8ac7e74e956e10d9689e0d5804d8</anchor>
      <arglist>(int bitNumber)</arglist>
    </member>
    <member kind="function">
      <name>setBit</name>
      <anchor>ad75e08bf5ec6959b99b1971fd858459d</anchor>
      <arglist>(int bitNumber)</arglist>
    </member>
    <member kind="function">
      <name>setBit</name>
      <anchor>ab062a5ac87d3b389e420e7a26b35629b</anchor>
      <arglist>(int bitNumber, bool shouldBeSet)</arglist>
    </member>
    <member kind="function">
      <name>setRange</name>
      <anchor>a1bc23c87d83558c4556b76a4c3b60972</anchor>
      <arglist>(int startBit, int numBits, bool shouldBeSet)</arglist>
    </member>
    <member kind="function">
      <name>insertBit</name>
      <anchor>a90fc29cee61181cff82a70f5307186e8</anchor>
      <arglist>(int bitNumber, bool shouldBeSet)</arglist>
    </member>
    <member kind="function">
      <name>getBitRange</name>
      <anchor>a0bae9cad6079a785a72203720b37c2cb</anchor>
      <arglist>(int startBit, int numBits) const </arglist>
    </member>
    <member kind="function">
      <name>getBitRangeAsInt</name>
      <anchor>a03b627e0083e5a4d23d7eab57e686b1a</anchor>
      <arglist>(int startBit, int numBits) const </arglist>
    </member>
    <member kind="function">
      <name>setBitRangeAsInt</name>
      <anchor>a74cb8e683b5386a955fcdcbaac703749</anchor>
      <arglist>(int startBit, int numBits, unsigned int valueToSet)</arglist>
    </member>
    <member kind="function">
      <name>shiftBits</name>
      <anchor>ac78d23b9c93713430758df01c0a68f48</anchor>
      <arglist>(int howManyBitsLeft, int startBit)</arglist>
    </member>
    <member kind="function">
      <name>countNumberOfSetBits</name>
      <anchor>a66cca56a4c79fd9eff37a5974d4d8a05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>findNextSetBit</name>
      <anchor>a198507e52679eb7eba5ec7e8903c9bfb</anchor>
      <arglist>(int startIndex=0) const </arglist>
    </member>
    <member kind="function">
      <name>findNextClearBit</name>
      <anchor>a1d047808fa61e64cfa0918f8c5f37fff</anchor>
      <arglist>(int startIndex=0) const </arglist>
    </member>
    <member kind="function">
      <name>getHighestBit</name>
      <anchor>a99c8d58ff824f1db74f6fdd12ac023e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>ac15ac09922b91bdb8ae4d5b50e20eaa1</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;=</name>
      <anchor>aa92b52f95550ecaca55142bfb420c167</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator*=</name>
      <anchor>a501bf8c285feb29c98a5ac886aa49282</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>a54c4fb0932b40f591f16f964f60f98a8</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator|=</name>
      <anchor>a9614be62eebe4f5242f92d03ae2f62d8</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;=</name>
      <anchor>aa5db7c429c0a5bec4841b8389232c3ed</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator^=</name>
      <anchor>a37a495ddc4105bc9d89289920ca21824</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator%=</name>
      <anchor>a10935bcb59d354af8d819a9f6307dccc</anchor>
      <arglist>(const BigInteger &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;=</name>
      <anchor>ae0fc34611974febbef389fe009f3281e</anchor>
      <arglist>(int numBitsToShift)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;=</name>
      <anchor>a76aace76cfea3cd498606fed2fafa0cf</anchor>
      <arglist>(int numBitsToShift)</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>a9a3d2c5b1447311c814f60f6b096ac59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;&amp;#45;</name>
      <anchor>a461022c98269d400f19ba718efcbbdb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>a1fe72ea4af6a55bbaf2c0f6cbd566fc8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;&amp;#45;</name>
      <anchor>a072e602b51571aa26fa00f26c84fb5f3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;</name>
      <anchor>a497e70d1a51cbf7bd8397e51e0570384</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>aba493eb2ac797cac782b3047929a3ed9</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;</name>
      <anchor>a82ddff23392bb9fc145d26324b3e2560</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>a579ab026e16f672b0e1272c94d67fe76</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>a1569c3bab19d1e5ceda926ea3d6cd178</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator|</name>
      <anchor>a3ddd0682c6d132cec4647d9d6bfaecf3</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>aa4249bbfab89980fb2c08152f776d5f1</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator^</name>
      <anchor>a0f5d49c985c549118a3fca32625c091d</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator%</name>
      <anchor>a417abf13be0c5a0659847dd6c63d88c7</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a7cf082d36e8ff944ce38a4ae829d6bd7</anchor>
      <arglist>(int numBitsToShift) const </arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>a9d8a9637d1cb8cd4aeac593ca0fdcfff</anchor>
      <arglist>(int numBitsToShift) const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a5a4ab973f4d76b81960c2b50c9649493</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>aa7fd4a43d4a735d5c052352997e425c9</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>a0ef3b19e1d12d10abb8021b5375f250a</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>a3ae756daff302895e034476f9c48a139</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>aa3717316bea091d3d09d0fb2d6973a47</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>a5a9dd6161a8ad42feaa4430bdd85d93c</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>ad3c120714b2f4c89c98588daf0ba3efb</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>compareAbsolute</name>
      <anchor>a20032f816d57f76954131b338fb434be</anchor>
      <arglist>(const BigInteger &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>divideBy</name>
      <anchor>a9c0bd824652adc58adec98eafa452963</anchor>
      <arglist>(const BigInteger &amp;divisor, BigInteger &amp;remainder)</arglist>
    </member>
    <member kind="function">
      <name>findGreatestCommonDivisor</name>
      <anchor>abdd0ab5e5dfd6d7021fb554a5b00d0f5</anchor>
      <arglist>(BigInteger other) const </arglist>
    </member>
    <member kind="function">
      <name>exponentModulo</name>
      <anchor>a6ff2a42d364b1f36c7e51d63cba5a882</anchor>
      <arglist>(const BigInteger &amp;exponent, const BigInteger &amp;modulus)</arglist>
    </member>
    <member kind="function">
      <name>inverseModulo</name>
      <anchor>ae071b9b24f05d8e50d8f3d640a225304</anchor>
      <arglist>(const BigInteger &amp;modulus)</arglist>
    </member>
    <member kind="function">
      <name>isNegative</name>
      <anchor>a8bc27470f749fad4f526b53e54dd7040</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setNegative</name>
      <anchor>a725d6ea434a94ef33f037daf8c8ce03c</anchor>
      <arglist>(const bool shouldBeNegative)</arglist>
    </member>
    <member kind="function">
      <name>negate</name>
      <anchor>a5536e066475eae18688d08301ddf3ba2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>a0afda97a4ca46a329cdfc71101da1c57</anchor>
      <arglist>(int base, int minimumNumCharacters=1) const </arglist>
    </member>
    <member kind="function">
      <name>parseString</name>
      <anchor>abf36aea51fbe0db4bffeef6772139cfe</anchor>
      <arglist>(const String &amp;text, int base)</arglist>
    </member>
    <member kind="function">
      <name>toMemoryBlock</name>
      <anchor>a0983884159834b5fbd75fb15c85021b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>loadFromMemoryBlock</name>
      <anchor>af1ad0e8dcaaa34c7d14d01dca224a668</anchor>
      <arglist>(const MemoryBlock &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BlowFish</name>
    <filename>classBlowFish.html</filename>
    <member kind="function">
      <name>BlowFish</name>
      <anchor>a7a90652859afaf45194281939e881270</anchor>
      <arglist>(const void *keyData, int keyBytes)</arglist>
    </member>
    <member kind="function">
      <name>BlowFish</name>
      <anchor>a71e471baddd2aab5108ed1aaf962f680</anchor>
      <arglist>(const BlowFish &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~BlowFish</name>
      <anchor>af5846c06628622de8be357aaceee4add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a4fb745c5546ceaaf7c2713b5c3aae0ac</anchor>
      <arglist>(const BlowFish &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>encrypt</name>
      <anchor>a1bef93644b4b4eb013f923d0b7bb9477</anchor>
      <arglist>(uint32 &amp;data1, uint32 &amp;data2) const </arglist>
    </member>
    <member kind="function">
      <name>decrypt</name>
      <anchor>acfe61a39d94c2bc51dd182f8312b2f6d</anchor>
      <arglist>(uint32 &amp;data1, uint32 &amp;data2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BooleanPropertyComponent</name>
    <base>PropertyComponent</base>
    <base>ButtonListener</base>
    <filename>classBooleanPropertyComponent.html</filename>
    <member kind="function">
      <name>BooleanPropertyComponent</name>
      <anchor>a866e6decfd615cbdefe91da904bde660</anchor>
      <arglist>(const String &amp;propertyName, const String &amp;buttonTextWhenTrue, const String &amp;buttonTextWhenFalse)</arglist>
    </member>
    <member kind="function">
      <name>BooleanPropertyComponent</name>
      <anchor>a9bdf7035a16fadfeaffd4c37ad56969d</anchor>
      <arglist>(const Value &amp;valueToControl, const String &amp;propertyName, const String &amp;buttonText)</arglist>
    </member>
    <member kind="function">
      <name>~BooleanPropertyComponent</name>
      <anchor>afde82e86dafa0ce21c07f018ab7f049a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setState</name>
      <anchor>a6e2b7a6d257e7c9b6d7ff9373c9a98c7</anchor>
      <arglist>(bool newState)</arglist>
    </member>
    <member kind="function">
      <name>getState</name>
      <anchor>a873145d733afe272da3ea2950c0fd7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>ac4c9af0bff4b847f5a81264287337280</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>ab6754ee52f6ea1f64f721f59a06aaf2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>a8b953e76e05013749aa4f2ef5ee7cea9</anchor>
      <arglist>(Button *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BorderSize</name>
    <filename>classBorderSize.html</filename>
    <member kind="function">
      <name>BorderSize</name>
      <anchor>a0e9c6bb9150ffd956ce0eedf46d76a4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>BorderSize</name>
      <anchor>a0670a2de5ac810323c88794a6a28e15b</anchor>
      <arglist>(const BorderSize &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>BorderSize</name>
      <anchor>a4bde90c35695965d4a83695fe2511aa0</anchor>
      <arglist>(int topGap, int leftGap, int bottomGap, int rightGap)</arglist>
    </member>
    <member kind="function">
      <name>BorderSize</name>
      <anchor>a04d51d5916a948398aebb48bd16e32f8</anchor>
      <arglist>(int allGaps)</arglist>
    </member>
    <member kind="function">
      <name>~BorderSize</name>
      <anchor>ae676aa73f8bf571bd9c7ff857a8b5743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTop</name>
      <anchor>ac9ab2f1d049a52e41601ac90debb83bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLeft</name>
      <anchor>a1202b0490a4d199f21ac0355babda040</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBottom</name>
      <anchor>aa00fde4a43f5c227075875e77cd404be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRight</name>
      <anchor>a1e3373c2a34d094e60359ad959ff8862</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTopAndBottom</name>
      <anchor>a266a25448f578217f6bd517218fb9826</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLeftAndRight</name>
      <anchor>a6c275c5db9dd7b0168efbec1be0cd6ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setTop</name>
      <anchor>a6afebd16435fb46a7fa1dc377f63cd12</anchor>
      <arglist>(int newTopGap)</arglist>
    </member>
    <member kind="function">
      <name>setLeft</name>
      <anchor>a838ff3520bd735022df1bc54be710b4f</anchor>
      <arglist>(int newLeftGap)</arglist>
    </member>
    <member kind="function">
      <name>setBottom</name>
      <anchor>afed6f2918d9bcbcab30f8e764301ae25</anchor>
      <arglist>(int newBottomGap)</arglist>
    </member>
    <member kind="function">
      <name>setRight</name>
      <anchor>ae1af89f65d25fd57a89327270c38fa6f</anchor>
      <arglist>(int newRightGap)</arglist>
    </member>
    <member kind="function">
      <name>subtractedFrom</name>
      <anchor>a12546d7f2e4cd003800dcd61be965305</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;original) const </arglist>
    </member>
    <member kind="function">
      <name>subtractFrom</name>
      <anchor>a6bf71c9ec918e22ec71653afde184036</anchor>
      <arglist>(Rectangle&lt; int &gt; &amp;rectangle) const </arglist>
    </member>
    <member kind="function">
      <name>addedTo</name>
      <anchor>a19a6c7b6608499c1eea835fda82a49f1</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;original) const </arglist>
    </member>
    <member kind="function">
      <name>addTo</name>
      <anchor>a90a1715b40dcf7fd289f213204a680d6</anchor>
      <arglist>(Rectangle&lt; int &gt; &amp;original) const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>ac357f7fb3ae0cfae2fab1444183e3a37</anchor>
      <arglist>(const BorderSize &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>ac8824a36ef87c919e35fd4e148dd611f</anchor>
      <arglist>(const BorderSize &amp;other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BubbleComponent</name>
    <base>Component</base>
    <filename>classBubbleComponent.html</filename>
    <member kind="function">
      <name>BubblePlacement</name>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bove</name>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3a46398aeabcf45a9b397beca92dcf85b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>elow</name>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3a971b484b6fd9e0e0f97ec4ef2c64de50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eft</name>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3a55e0c30c9b033af546bc8ffd96c0534c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ight</name>
      <anchor>aba96d481d723fd2549f497ccd7ed41a3a2dee448ac06c9b0186287c5f7e071b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BubbleComponent</name>
      <anchor>a7cce909ece8964165fdcfc173940b74b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~BubbleComponent</name>
      <anchor>a11f1e39d0be20493c46477fe59e30685</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAllowedPlacement</name>
      <anchor>a7c0081674149dc2a8380a0b20cf6f6ae</anchor>
      <arglist>(int newPlacement)</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>a9dce0f241c8f14de8ca2a60cdc83e537</anchor>
      <arglist>(Component *componentToPointTo)</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>a39197190fe609319eaeb68ed3306a6a5</anchor>
      <arglist>(int arrowTipX, int arrowTipY)</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>abf3cc8be633ef5fde16533fece6edebf</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangleToPointTo)</arglist>
    </member>
    <member kind="function">
      <name>getContentSize</name>
      <anchor>a0763d0b281eaea28861f8a3d3e7b6dbe</anchor>
      <arglist>(int &amp;width, int &amp;height)=0</arglist>
    </member>
    <member kind="function">
      <name>paintContent</name>
      <anchor>a30f7ac74c7ce0452d0a85c72db2309f1</anchor>
      <arglist>(Graphics &amp;g, int width, int height)=0</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a535cd0c80a4d38d15fdc878e118165fd</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BubbleMessageComponent</name>
    <base>BubbleComponent</base>
    <base>Timer</base>
    <filename>classBubbleMessageComponent.html</filename>
    <member kind="function">
      <name>BubbleMessageComponent</name>
      <anchor>a17b34a71669df21e5632440d1a43b844</anchor>
      <arglist>(int fadeOutLengthMs=150)</arglist>
    </member>
    <member kind="function">
      <name>~BubbleMessageComponent</name>
      <anchor>aae5d8029a52bbb1d677adbfda80a978e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>showAt</name>
      <anchor>ad4e709979e32cc9a6758c52ed77184c6</anchor>
      <arglist>(int x, int y, const String &amp;message, int numMillisecondsBeforeRemoving, bool removeWhenMouseClicked=true, bool deleteSelfAfterUse=false)</arglist>
    </member>
    <member kind="function">
      <name>showAt</name>
      <anchor>a8829c7ccc74e9429d1c3612e0c15d116</anchor>
      <arglist>(Component *component, const String &amp;message, int numMillisecondsBeforeRemoving, bool removeWhenMouseClicked=true, bool deleteSelfAfterUse=false)</arglist>
    </member>
    <member kind="function">
      <name>getContentSize</name>
      <anchor>a68991e5ad34d560640b5de73e740ac47</anchor>
      <arglist>(int &amp;w, int &amp;h)</arglist>
    </member>
    <member kind="function">
      <name>paintContent</name>
      <anchor>a6a7f7977a122d92d0ad9729db6e4b3c6</anchor>
      <arglist>(Graphics &amp;g, int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>timerCallback</name>
      <anchor>a8847ef165716b306d142907d03c6a916</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BufferedInputStream</name>
    <base>InputStream</base>
    <filename>classBufferedInputStream.html</filename>
    <member kind="function">
      <name>BufferedInputStream</name>
      <anchor>a28fb830b98e3134853083fdcdaaacb2d</anchor>
      <arglist>(InputStream *sourceStream, int bufferSize, bool deleteSourceWhenDestroyed)</arglist>
    </member>
    <member kind="function">
      <name>~BufferedInputStream</name>
      <anchor>ab353c2eacfa486206f3e155619162c3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTotalLength</name>
      <anchor>af64a5954ae853c10b1987ed72054dbec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>abaecef9974ce3454a4da41dedbaf7585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>a1c44fae209948c7752e06f126089f718</anchor>
      <arglist>(int64 newPosition)</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>a5e925c6427dbcafe77199fb45bd35c54</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)</arglist>
    </member>
    <member kind="function">
      <name>readString</name>
      <anchor>a85507d97b37fa867a18fa11ba5ab8fc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isExhausted</name>
      <anchor>a1d78eb47ed6c235bdbd04d7c97c12cb7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BufferingAudioSource</name>
    <base>PositionableAudioSource</base>
    <filename>classBufferingAudioSource.html</filename>
    <member kind="function">
      <name>BufferingAudioSource</name>
      <anchor>a312306a90c6dcdf6489c3017407c096e</anchor>
      <arglist>(PositionableAudioSource *source, const bool deleteSourceWhenDeleted, int numberOfSamplesToBuffer)</arglist>
    </member>
    <member kind="function">
      <name>~BufferingAudioSource</name>
      <anchor>a2633cef1b35b4d435db60374d7b2859f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prepareToPlay</name>
      <anchor>a784d02cc766c7fef5635347f5a1291b8</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <name>releaseResources</name>
      <anchor>a03c599c8e21f52462430ac1adbd0528e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNextAudioBlock</name>
      <anchor>af1d906e18e7d845463e9b9f2f4e80fda</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
    <member kind="function">
      <name>setNextReadPosition</name>
      <anchor>a251253247437fdabac9ed3854f9c9fe9</anchor>
      <arglist>(int newPosition)</arglist>
    </member>
    <member kind="function">
      <name>getNextReadPosition</name>
      <anchor>a5f486190699f8ed1e405c9a60b550a7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTotalLength</name>
      <anchor>ad669811d3f9dc04bf3d9cbb7c3b30d8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isLooping</name>
      <anchor>a5a39b87de2a6ac0aac802293bc9fd5d2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Button</name>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>ApplicationCommandManagerListener</base>
    <base>Value::Listener</base>
    <base>KeyListener</base>
    <filename>classButton.html</filename>
    <member kind="function">
      <name>ConnectedEdgeFlags</name>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>onnectedOnLeft</name>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82aa1dd81c8737a08302b5b0ddb6414d9d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>onnectedOnRight</name>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82aaeedde6687fd468865bfa2e8a1deee68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>onnectedOnTop</name>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82a856730f0a48a5b785df067d42110d009</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>onnectedOnBottom</name>
      <anchor>aebb14d53173b13f0e98d01a02aee8e82a680ea807983e767189afaa48f24e4ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ButtonState</name>
      <anchor>ad8312db93093c21df8b1d2be74ae1957</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uttonNormal</name>
      <anchor>ad8312db93093c21df8b1d2be74ae1957a09756d7da1b944c70299dbce2d4d85c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uttonOver</name>
      <anchor>ad8312db93093c21df8b1d2be74ae1957ab1bafc26d8c989fe21ad1289d0ce11f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uttonDown</name>
      <anchor>ad8312db93093c21df8b1d2be74ae1957a2510a242cf6f7e93eb33245a03268d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Button</name>
      <anchor>a37f37f35bbcb27d88fc508be94dba87e</anchor>
      <arglist>(const String &amp;buttonName)</arglist>
    </member>
    <member kind="function">
      <name>~Button</name>
      <anchor>a6d35cf666b119be6153a717427f9b5e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setButtonText</name>
      <anchor>a96f4185a0a716d10309f1081f0af2f91</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <name>getButtonText</name>
      <anchor>a39b099059b95341d2e2b04ae500d54bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isDown</name>
      <anchor>a5b192bdf07bbc8ed04e0b555c7c9be20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isOver</name>
      <anchor>aad49a61cb82204caa4c7f3c25737edef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setToggleState</name>
      <anchor>ab1413e8056b7ad53f1ca1502e6c660ed</anchor>
      <arglist>(bool shouldBeOn, bool sendChangeNotification)</arglist>
    </member>
    <member kind="function">
      <name>getToggleState</name>
      <anchor>a026ed4e425a7673768b211a1507cf342</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getToggleStateValue</name>
      <anchor>a30d3104699bb64de1b6c2b78d20158a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setClickingTogglesState</name>
      <anchor>a50d56ddf31ef24d3d512acdbb766b555</anchor>
      <arglist>(bool shouldToggle)</arglist>
    </member>
    <member kind="function">
      <name>getClickingTogglesState</name>
      <anchor>ad2467963004fc668a47452015ffbae10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setRadioGroupId</name>
      <anchor>a94f39a6f954ab585bda4281c965d73e0</anchor>
      <arglist>(int newGroupId)</arglist>
    </member>
    <member kind="function">
      <name>getRadioGroupId</name>
      <anchor>aa0afdd2e3458aab520702ad2a9ed9777</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>addButtonListener</name>
      <anchor>a722da3b25ec3d39e7734aa98c58891d5</anchor>
      <arglist>(ButtonListener *newListener)</arglist>
    </member>
    <member kind="function">
      <name>removeButtonListener</name>
      <anchor>a6d927609f3b70ad1c926cb18e6c33c65</anchor>
      <arglist>(ButtonListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>triggerClick</name>
      <anchor>a8a6488055955fede16492a90a8967168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCommandToTrigger</name>
      <anchor>a1e925690da1e48ceae6f233fc6cfe4bb</anchor>
      <arglist>(ApplicationCommandManager *commandManagerToUse, int commandID, bool generateTooltip)</arglist>
    </member>
    <member kind="function">
      <name>getCommandID</name>
      <anchor>ac66c3513522d9723194216ea50ec334e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>addShortcut</name>
      <anchor>ae22ef00ae147738f4556570424b0a091</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>clearShortcuts</name>
      <anchor>aa8d27148fe4dc88ffa06eecabca9bed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRegisteredForShortcut</name>
      <anchor>a59b7d2d3e78abf96d180a4e2b4605046</anchor>
      <arglist>(const KeyPress &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>setRepeatSpeed</name>
      <anchor>ab13141956af354a2d2659ffe7f12ac17</anchor>
      <arglist>(int initialDelayInMillisecs, int repeatDelayInMillisecs, int minimumDelayInMillisecs=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>setTriggeredOnMouseDown</name>
      <anchor>ade34aaa864c4fdfcf21cde8b81a8d121</anchor>
      <arglist>(bool isTriggeredOnMouseDown)</arglist>
    </member>
    <member kind="function">
      <name>getMillisecondsSinceButtonDown</name>
      <anchor>af06714b6baf18831dd199c4a40dd30ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setVisible</name>
      <anchor>af997c4e697525b769f82c9e308ee2fb7</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <name>setTooltip</name>
      <anchor>a4ad526e165b01957b01eba2c648ee6a7</anchor>
      <arglist>(const String &amp;newTooltip)</arglist>
    </member>
    <member kind="function">
      <name>getTooltip</name>
      <anchor>a963037ee06c03fb4771bae191f71a436</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setConnectedEdges</name>
      <anchor>a17ae41254e2d68b1570ef5027d796ac3</anchor>
      <arglist>(int connectedEdgeFlags)</arglist>
    </member>
    <member kind="function">
      <name>getConnectedEdgeFlags</name>
      <anchor>aa5215f417de6ab89542627eefd7e0463</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isConnectedOnLeft</name>
      <anchor>ac1122fe22a0186090b0782b82fd66977</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isConnectedOnRight</name>
      <anchor>a9b6e94d0e4e744d64e402258b11b8841</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isConnectedOnTop</name>
      <anchor>ac1b535e972c844fe7e34aba3dac1b9a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isConnectedOnBottom</name>
      <anchor>a68d118d2135a939af1d44229e5b01f38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setState</name>
      <anchor>aa53d62ecda7a4658968b41e3f6a57f2a</anchor>
      <arglist>(const ButtonState newState)</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>a149ef29188b0519c3e39624c7b4d9400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>af57cd4eec484491dc536e05d75e556dd</anchor>
      <arglist>(const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>paintButton</name>
      <anchor>a42622e1dc165f718a9835c0ef94aacca</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)=0</arglist>
    </member>
    <member kind="function">
      <name>buttonStateChanged</name>
      <anchor>aa0e5a9bb6117baa8b6df29a47db861c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>internalClickCallback</name>
      <anchor>aed53c392941728d6b4260db5e9271a19</anchor>
      <arglist>(const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>handleCommandMessage</name>
      <anchor>aae12ae7871c6ea88c0175fba8b529a3b</anchor>
      <arglist>(int commandId)</arglist>
    </member>
    <member kind="function">
      <name>mouseEnter</name>
      <anchor>ad0bc319ee92c0ebbe080e92baeb73128</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseExit</name>
      <anchor>aeb941925bb9f3417a0b4611a597c748f</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a47fb0edf76c51305be496119c2f2ad69</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>a260a6fb18d7c9a6cffdfa50d26a7b1ca</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>aa59fd470023f08b73aaacd894f199b6d</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>a641310943b87f694fb34b3b238b159e1</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>adce9be9e1ab0ea62290578a8cb0e5506</anchor>
      <arglist>(const KeyPress &amp;key, Component *originatingComponent)</arglist>
    </member>
    <member kind="function">
      <name>keyStateChanged</name>
      <anchor>a9b70ad6bda583e098ecd4a10f1d8bf06</anchor>
      <arglist>(bool isKeyDown, Component *originatingComponent)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a04a3d0af86e1706c5d668160c812ba97</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>parentHierarchyChanged</name>
      <anchor>a036213dc05dbee4d357f1b1a96bc6ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>focusGained</name>
      <anchor>a37d610a5b83ad77f4229b528f21f8968</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <name>focusLost</name>
      <anchor>a4a5e7250e06ed2151b15b785a63513a8</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <name>enablementChanged</name>
      <anchor>a521509e4561e750d65385601be52396b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>applicationCommandInvoked</name>
      <anchor>ac210d9dc7c756cc1fc0ebd07fc6cfdaf</anchor>
      <arglist>(const ApplicationCommandTarget::InvocationInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <name>applicationCommandListChanged</name>
      <anchor>a0ddde695dda3817d251f8dd3f2afffb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>a4a97b7340319e3c0edce572d6f44f219</anchor>
      <arglist>(Value &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ButtonListener</name>
    <filename>classButtonListener.html</filename>
    <member kind="function">
      <name>~ButtonListener</name>
      <anchor>a87adb8e5270116e1d6bd4973ec5bad3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>a7d0a022844566802f91616954999adad</anchor>
      <arglist>(Button *button)=0</arglist>
    </member>
    <member kind="function">
      <name>buttonStateChanged</name>
      <anchor>af1897d50dbfd53957630671368910cf9</anchor>
      <arglist>(Button *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ButtonPropertyComponent</name>
    <base>PropertyComponent</base>
    <base>ButtonListener</base>
    <filename>classButtonPropertyComponent.html</filename>
    <member kind="function">
      <name>ButtonPropertyComponent</name>
      <anchor>a25eeae4339791fc2d87045f1dd521d4d</anchor>
      <arglist>(const String &amp;propertyName, bool triggerOnMouseDown)</arglist>
    </member>
    <member kind="function">
      <name>~ButtonPropertyComponent</name>
      <anchor>ad4532aa811fe1025cb47b6fa848172cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>ae38c05546f045db1e40a06112bc2f546</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getButtonText</name>
      <anchor>a4185a7d03e1eabe87960239a2f912141</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>a526375fb6a25fda38df91aa22ee65067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>afa718766db01628e12b736a6640bdcb4</anchor>
      <arglist>(Button *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ByteOrder</name>
    <filename>classByteOrder.html</filename>
    <member kind="function">
      <name>swap</name>
      <anchor>ad7f27038bd5a2454a2737c747da005c0</anchor>
      <arglist>(uint16 value)</arglist>
    </member>
    <member kind="function">
      <name>swap</name>
      <anchor>a1e8c8283251256fc5ee507d6832b5f6e</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function">
      <name>swap</name>
      <anchor>ab8ccdd097d3afa83b7664d6db337fc2f</anchor>
      <arglist>(uint64 value)</arglist>
    </member>
    <member kind="function">
      <name>swapIfBigEndian</name>
      <anchor>aaa5098c1fe0e8ef9a1b84504df560b1f</anchor>
      <arglist>(uint16 value)</arglist>
    </member>
    <member kind="function">
      <name>swapIfBigEndian</name>
      <anchor>a14c5f1662a389b2f33729ef41aa6bbd3</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function">
      <name>swapIfBigEndian</name>
      <anchor>a73bc9ac7015e4b43d780ac556dfdc93f</anchor>
      <arglist>(uint64 value)</arglist>
    </member>
    <member kind="function">
      <name>swapIfLittleEndian</name>
      <anchor>a1103519b49f0e4cc7b0fb711288da632</anchor>
      <arglist>(uint16 value)</arglist>
    </member>
    <member kind="function">
      <name>swapIfLittleEndian</name>
      <anchor>a20d29ea3aaa4bf73c0552e2dc78da29c</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function">
      <name>swapIfLittleEndian</name>
      <anchor>a2eb0203392d0b832448de74233220420</anchor>
      <arglist>(uint64 value)</arglist>
    </member>
    <member kind="function">
      <name>littleEndianInt</name>
      <anchor>abe147f36b014922497a6c0b322cf2be6</anchor>
      <arglist>(const void *bytes)</arglist>
    </member>
    <member kind="function">
      <name>littleEndianShort</name>
      <anchor>a6a9ba604abff4f9a13c83c8630042d7f</anchor>
      <arglist>(const void *bytes)</arglist>
    </member>
    <member kind="function">
      <name>bigEndianInt</name>
      <anchor>ab56f5bb7f972b3727c4dce5e9988e11f</anchor>
      <arglist>(const void *bytes)</arglist>
    </member>
    <member kind="function">
      <name>bigEndianShort</name>
      <anchor>a2c28f1597c0d539b60df1fffb2004124</anchor>
      <arglist>(const void *bytes)</arglist>
    </member>
    <member kind="function">
      <name>littleEndian24Bit</name>
      <anchor>a8e0a93af21e6d1b5ec1299d6db465b99</anchor>
      <arglist>(const char *bytes)</arglist>
    </member>
    <member kind="function">
      <name>bigEndian24Bit</name>
      <anchor>aeaa8651018c78f620f26b4772ff315c0</anchor>
      <arglist>(const char *bytes)</arglist>
    </member>
    <member kind="function">
      <name>littleEndian24BitToChars</name>
      <anchor>a8efdab6e96d009859e80eb7897e9891c</anchor>
      <arglist>(int value, char *destBytes)</arglist>
    </member>
    <member kind="function">
      <name>bigEndian24BitToChars</name>
      <anchor>a69368ae641ae20d4019b86b3cbc26043</anchor>
      <arglist>(int value, char *destBytes)</arglist>
    </member>
    <member kind="function">
      <name>isBigEndian</name>
      <anchor>a3f1fa53d69bcbb29fb4de11eb1de63fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CallbackMessage</name>
    <base>Message</base>
    <filename>classCallbackMessage.html</filename>
    <member kind="function">
      <name>CallbackMessage</name>
      <anchor>a88e01d36fce7bfc6f78bc70b0ec09316</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~CallbackMessage</name>
      <anchor>afa4bb7bd8f5962edcc53c5df37cd8b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>messageCallback</name>
      <anchor>a1f72c1e680e26f44780ac9437f3450de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>post</name>
      <anchor>aca2d9a4ffcf539a2e72aae91817bbf11</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CarbonViewWrapperComponent</name>
    <base>Component</base>
    <base>ComponentMovementWatcher</base>
    <base>Timer</base>
    <filename>classCarbonViewWrapperComponent.html</filename>
    <member kind="function">
      <name>CarbonViewWrapperComponent</name>
      <anchor>a2aa8d0843091eba517e2dbc05df42999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~CarbonViewWrapperComponent</name>
      <anchor>ad6cccef9794aafbbf993c52c46e2c639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>attachView</name>
      <anchor>a4ced8c603f61d1727545eaf81e2bafeb</anchor>
      <arglist>(WindowRef windowRef, HIViewRef rootView)=0</arglist>
    </member>
    <member kind="function">
      <name>removeView</name>
      <anchor>aed1aac56cfd756d86110cd8b7ce29c07</anchor>
      <arglist>(HIViewRef embeddedView)=0</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a12dc1c674dca650916fc072e46050673</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>ab47306dfa512da28223790f4719c20e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getEmbeddedViewSize</name>
      <anchor>a1c8cca93e8dff2216b6e8554ca7440cb</anchor>
      <arglist>(int &amp;w, int &amp;h)</arglist>
    </member>
    <member kind="function">
      <name>createWindow</name>
      <anchor>a60fa1b286640cbc80a2ed8cfe7e0e907</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deleteWindow</name>
      <anchor>a31689c33db811239ab215e446b67835b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setOurSizeToEmbeddedViewSize</name>
      <anchor>a6af5064b9a1e9424c716fa5ef9f47b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setEmbeddedWindowToOurSize</name>
      <anchor>a2a2b6d3ef428af6e8e729e25ee702306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>componentMovedOrResized</name>
      <anchor>a294b053fc4f9e4f3ce099281677e182d</anchor>
      <arglist>(bool, bool)</arglist>
    </member>
    <member kind="function">
      <name>componentPeerChanged</name>
      <anchor>a757883a106ad426ee34d5e4c3e0d707b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>componentVisibilityChanged</name>
      <anchor>a12d96bf5f3e389261e3804ac01d0660d</anchor>
      <arglist>(Component &amp;)</arglist>
    </member>
    <member kind="function">
      <name>recursiveHIViewRepaint</name>
      <anchor>afc6519356b92ac3a8c781e1f3d664714</anchor>
      <arglist>(HIViewRef view)</arglist>
    </member>
    <member kind="function">
      <name>timerCallback</name>
      <anchor>aac6be1c53c4914bdfdac411cd740928a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>carbonEventHandler</name>
      <anchor>a5e9abf7a8a1694b9de23ae8e2bf303cf</anchor>
      <arglist>(EventHandlerCallRef nextHandlerRef, EventRef event)</arglist>
    </member>
    <member kind="function">
      <name>carbonEventCallback</name>
      <anchor>a7e67732e2e045d3217a5bc1c15f252dd</anchor>
      <arglist>(EventHandlerCallRef nextHandlerRef, EventRef event, void *userData)</arglist>
    </member>
    <member kind="function">
      <name>wrapperWindow</name>
      <anchor>a3a222f993d88089c95b2f11fe622e9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>embeddedView</name>
      <anchor>af836da0be9f64f85171bdb88b2b164c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>recursiveResize</name>
      <anchor>ada5b965d3564e014b3a3180ed4090d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>creationTime</name>
      <anchor>adb6316ec5805c933a7188f768bf241d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eventHandlerRef</name>
      <anchor>a1d795a87f83d6084d3d3dcbd67eadf2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChangeBroadcaster</name>
    <filename>classChangeBroadcaster.html</filename>
    <member kind="function">
      <name>ChangeBroadcaster</name>
      <anchor>ad00662b71eab7e35415b337eccbd5366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ChangeBroadcaster</name>
      <anchor>a3b2f8465cc6c09c0583c8bdf56319742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addChangeListener</name>
      <anchor>ad68416fe79a94cd5c99519bdea6c2a06</anchor>
      <arglist>(ChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeChangeListener</name>
      <anchor>ae558a26c795278549a63e342bd5f1650</anchor>
      <arglist>(ChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeAllChangeListeners</name>
      <anchor>a6b9c150078318d419debc82e6f22ce58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sendChangeMessage</name>
      <anchor>afbca11e8237c6798488451d8f652e37b</anchor>
      <arglist>(void *objectThatHasChanged)</arglist>
    </member>
    <member kind="function">
      <name>sendSynchronousChangeMessage</name>
      <anchor>a73395730c7e2d78152b74f59250edf75</anchor>
      <arglist>(void *objectThatHasChanged)</arglist>
    </member>
    <member kind="function">
      <name>dispatchPendingMessages</name>
      <anchor>a78f62ecd57a016f8ba7a6ce55454947d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChangeListener</name>
    <filename>classChangeListener.html</filename>
    <member kind="function">
      <name>~ChangeListener</name>
      <anchor>a0498f9374464e4b59fada8b4445c0e98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>changeListenerCallback</name>
      <anchor>aff7068910b73ce9721d303ac750868dc</anchor>
      <arglist>(void *objectThatHasChanged)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChangeListenerList</name>
    <base>MessageListener</base>
    <filename>classChangeListenerList.html</filename>
    <member kind="function">
      <name>ChangeListenerList</name>
      <anchor>a19aa94a575722f2904278449527b54a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ChangeListenerList</name>
      <anchor>abcacac2c7b5f3c429aec4ccd6a5a0001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addChangeListener</name>
      <anchor>a000788b4c5eed8c31c3fec70779ad3b7</anchor>
      <arglist>(ChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeChangeListener</name>
      <anchor>a5fab5054bd5eedbff83c32b356b81224</anchor>
      <arglist>(ChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeAllChangeListeners</name>
      <anchor>a36e618a0e566b5e60ea91852473bc2d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sendChangeMessage</name>
      <anchor>a6715f6527344d4c434e9915ea35ae2aa</anchor>
      <arglist>(void *objectThatHasChanged)</arglist>
    </member>
    <member kind="function">
      <name>sendSynchronousChangeMessage</name>
      <anchor>a1839cb6d18fd9f7c72d4dcdbd5cdf566</anchor>
      <arglist>(void *objectThatHasChanged)</arglist>
    </member>
    <member kind="function">
      <name>dispatchPendingMessages</name>
      <anchor>a67e3f1f554563844a2c50b5fe7dff830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleMessage</name>
      <anchor>af3b064545645f8efbfb83bcbb36adc57</anchor>
      <arglist>(const Message &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelRemappingAudioSource</name>
    <base>AudioSource</base>
    <filename>classChannelRemappingAudioSource.html</filename>
    <member kind="function">
      <name>ChannelRemappingAudioSource</name>
      <anchor>ab6a246e450d4cc1370dbed1a9dd07ac1</anchor>
      <arglist>(AudioSource *const source, const bool deleteSourceWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <name>~ChannelRemappingAudioSource</name>
      <anchor>ac95f5a646e2c8ad1fb90a69c1f251a65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setNumberOfChannelsToProduce</name>
      <anchor>a3309c02c2860cea53c5ad40242897d27</anchor>
      <arglist>(const int requiredNumberOfChannels)</arglist>
    </member>
    <member kind="function">
      <name>clearAllMappings</name>
      <anchor>a373b386b0873abccac53601fa0760f2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setInputChannelMapping</name>
      <anchor>afc85a314364c50109cc79466cb52721f</anchor>
      <arglist>(const int destChannelIndex, const int sourceChannelIndex)</arglist>
    </member>
    <member kind="function">
      <name>setOutputChannelMapping</name>
      <anchor>a7d9ed949811cece46ed1fdd5506612a1</anchor>
      <arglist>(const int sourceChannelIndex, const int destChannelIndex)</arglist>
    </member>
    <member kind="function">
      <name>getRemappedInputChannel</name>
      <anchor>a76aec85823dd5b92c20f6aefbc9cfd81</anchor>
      <arglist>(const int inputChannelIndex) const </arglist>
    </member>
    <member kind="function">
      <name>getRemappedOutputChannel</name>
      <anchor>a90875e4074ed03891946f3eced8091b5</anchor>
      <arglist>(const int outputChannelIndex) const </arglist>
    </member>
    <member kind="function">
      <name>createXml</name>
      <anchor>a1230528d1eb1ca7a1b0f7a46fa97802a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>restoreFromXml</name>
      <anchor>a176d063fc2c378756e26d6aa9bf911a6</anchor>
      <arglist>(const XmlElement &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>prepareToPlay</name>
      <anchor>ae6a5a79fabbc59bdc1d22776b459b8d6</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <name>releaseResources</name>
      <anchor>a09b7bdd2bfd44ca9195d19d1cde93fad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNextAudioBlock</name>
      <anchor>abb35d36480f9ddae2438721061aa5da5</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CharacterFunctions</name>
    <filename>classCharacterFunctions.html</filename>
    <member kind="function">
      <name>length</name>
      <anchor>ab6a100b1ef1cf692a893fcbd29ed83ce</anchor>
      <arglist>(const char *const s)</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>a243ed5b80002b6a437029bc9388c82e6</anchor>
      <arglist>(const juce_wchar *const s)</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>aaf89d3cd08d5399ff7aaf140abd863c1</anchor>
      <arglist>(char *dest, const char *src, const int maxBytes)</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>aefcb66aae92fc38387a3e3705f0493c6</anchor>
      <arglist>(juce_wchar *dest, const juce_wchar *src, const int maxChars)</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>af8428058bc798c6728b1db40e74525c0</anchor>
      <arglist>(juce_wchar *dest, const char *src, const int maxChars)</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>ae03d7d4cbeef0e7bf6de36392b3a50f2</anchor>
      <arglist>(char *dest, const juce_wchar *src, const int maxBytes)</arglist>
    </member>
    <member kind="function">
      <name>bytesRequiredForCopy</name>
      <anchor>abcbabb06e91003c654b830e24d66499c</anchor>
      <arglist>(const juce_wchar *src)</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>a6ceb2b07c4fe4f31a70f1983739a713f</anchor>
      <arglist>(char *dest, const char *src)</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>a1354e679f733d563c4b5686a694b0f34</anchor>
      <arglist>(juce_wchar *dest, const juce_wchar *src)</arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>aa93fa624e75f405300d1ef594a200271</anchor>
      <arglist>(const char *const s1, const char *const s2)</arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>acfba703d195b687aae70bacbcb48b072</anchor>
      <arglist>(const juce_wchar *s1, const juce_wchar *s2)</arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>a1f1d563cef4a52f439e330375af68587</anchor>
      <arglist>(const juce_wchar *s1, const char *s2)</arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>a4ece36fdfa524d2ffa2b8d8087eddb1c</anchor>
      <arglist>(const char *s1, const juce_wchar *s2)</arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>ac3e6f141456ef241afc6b86d44d3e437</anchor>
      <arglist>(const char *const s1, const char *const s2, const int maxChars)</arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>a626e2ee6e2b45049549456a1a820f196</anchor>
      <arglist>(const juce_wchar *s1, const juce_wchar *s2, int maxChars)</arglist>
    </member>
    <member kind="function">
      <name>compareIgnoreCase</name>
      <anchor>ae114d5a111fd1ab95b11707f1729ce17</anchor>
      <arglist>(const char *const s1, const char *const s2)</arglist>
    </member>
    <member kind="function">
      <name>compareIgnoreCase</name>
      <anchor>a0b0d8d27169b789257e68618df6c8043</anchor>
      <arglist>(const juce_wchar *s1, const juce_wchar *s2)</arglist>
    </member>
    <member kind="function">
      <name>compareIgnoreCase</name>
      <anchor>ae339236711ca3017bcf0a79898cff21d</anchor>
      <arglist>(const juce_wchar *s1, const char *s2)</arglist>
    </member>
    <member kind="function">
      <name>compareIgnoreCase</name>
      <anchor>ae5e60692f326ddcfa845e5ba526bc35a</anchor>
      <arglist>(const char *const s1, const char *const s2, const int maxChars)</arglist>
    </member>
    <member kind="function">
      <name>compareIgnoreCase</name>
      <anchor>aa1fc3d384b66df5577daab5dcf951d2d</anchor>
      <arglist>(const juce_wchar *s1, const juce_wchar *s2, int maxChars)</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>a15fb0dd1c4ea42d1bb71266eeab9c397</anchor>
      <arglist>(const char *const haystack, const char *const needle)</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>a4fac4da65bb2abe9bacfa78fbcb3e325</anchor>
      <arglist>(const juce_wchar *haystack, const juce_wchar *const needle)</arglist>
    </member>
    <member kind="function">
      <name>indexOfChar</name>
      <anchor>ac6036956d8e6285ac3ee4a44a332b012</anchor>
      <arglist>(const char *const haystack, const char needle, const bool ignoreCase)</arglist>
    </member>
    <member kind="function">
      <name>indexOfChar</name>
      <anchor>a5ce106e6fa8414cd63c1eb3b4e97adcb</anchor>
      <arglist>(const juce_wchar *const haystack, const juce_wchar needle, const bool ignoreCase)</arglist>
    </member>
    <member kind="function">
      <name>indexOfCharFast</name>
      <anchor>a59c28118bfdbf4139e2d4de52153d7c7</anchor>
      <arglist>(const char *const haystack, const char needle)</arglist>
    </member>
    <member kind="function">
      <name>indexOfCharFast</name>
      <anchor>a2e85dfc188072b7569c1fafe1fde77a3</anchor>
      <arglist>(const juce_wchar *const haystack, const juce_wchar needle)</arglist>
    </member>
    <member kind="function">
      <name>getIntialSectionContainingOnly</name>
      <anchor>a153a0342543d9f6c69ef4edd76537574</anchor>
      <arglist>(const char *const text, const char *const allowedChars)</arglist>
    </member>
    <member kind="function">
      <name>getIntialSectionContainingOnly</name>
      <anchor>a6a938db5f46d6dc77a257601a352e82a</anchor>
      <arglist>(const juce_wchar *const text, const juce_wchar *const allowedChars)</arglist>
    </member>
    <member kind="function">
      <name>ftime</name>
      <anchor>ada01aedb4608a3c55bbaa21c0eb35663</anchor>
      <arglist>(char *const dest, const int maxChars, const char *const format, const struct tm *const tm)</arglist>
    </member>
    <member kind="function">
      <name>ftime</name>
      <anchor>a08099cb4c00539ad2a440ab90c781023</anchor>
      <arglist>(juce_wchar *const dest, const int maxChars, const juce_wchar *const format, const struct tm *const tm)</arglist>
    </member>
    <member kind="function">
      <name>getIntValue</name>
      <anchor>acaacc75e03788d475af583eee34ec05a</anchor>
      <arglist>(const char *const s)</arglist>
    </member>
    <member kind="function">
      <name>getIntValue</name>
      <anchor>ada44db5fc8b75baa61444e005275bab8</anchor>
      <arglist>(const juce_wchar *s)</arglist>
    </member>
    <member kind="function">
      <name>getInt64Value</name>
      <anchor>a5f9abd1f30e5d8a21217d5dd0ece1bd1</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <name>getInt64Value</name>
      <anchor>a4be9c5af6217bed7658b30ae88d9230c</anchor>
      <arglist>(const juce_wchar *s)</arglist>
    </member>
    <member kind="function">
      <name>getDoubleValue</name>
      <anchor>ad004309a660a3e0172764138c540c284</anchor>
      <arglist>(const char *const s)</arglist>
    </member>
    <member kind="function">
      <name>getDoubleValue</name>
      <anchor>a9dc43fcaaa262a82d30d44d1dedcfdbe</anchor>
      <arglist>(const juce_wchar *const s)</arglist>
    </member>
    <member kind="function">
      <name>toUpperCase</name>
      <anchor>a53f36816552f3ef244dc7213a78871e4</anchor>
      <arglist>(const char character)</arglist>
    </member>
    <member kind="function">
      <name>toUpperCase</name>
      <anchor>ae2aa557c47e4ae91f72c7f3c6b64ad1c</anchor>
      <arglist>(const juce_wchar character)</arglist>
    </member>
    <member kind="function">
      <name>toUpperCase</name>
      <anchor>aae6cbabdf08ba95d96451b6af23dde67</anchor>
      <arglist>(char *s)</arglist>
    </member>
    <member kind="function">
      <name>toUpperCase</name>
      <anchor>adef4e231d34ec76589780720bf3151b2</anchor>
      <arglist>(juce_wchar *s)</arglist>
    </member>
    <member kind="function">
      <name>isUpperCase</name>
      <anchor>a3ffe372e9433ddb3de6ab368555ed38a</anchor>
      <arglist>(const char character)</arglist>
    </member>
    <member kind="function">
      <name>isUpperCase</name>
      <anchor>aca0bbd2844c1c34afc7996bc14254f29</anchor>
      <arglist>(const juce_wchar character)</arglist>
    </member>
    <member kind="function">
      <name>toLowerCase</name>
      <anchor>ac4efb357efcc78adab08baa4e97dfa59</anchor>
      <arglist>(const char character)</arglist>
    </member>
    <member kind="function">
      <name>toLowerCase</name>
      <anchor>a4e99a81b0021e6791cbe34c2069f0a06</anchor>
      <arglist>(const juce_wchar character)</arglist>
    </member>
    <member kind="function">
      <name>toLowerCase</name>
      <anchor>ab95383e4cbb4c21472882aa465f84850</anchor>
      <arglist>(char *s)</arglist>
    </member>
    <member kind="function">
      <name>toLowerCase</name>
      <anchor>a5b426ed7c5c07c988611b98bfbe3af13</anchor>
      <arglist>(juce_wchar *s)</arglist>
    </member>
    <member kind="function">
      <name>isLowerCase</name>
      <anchor>a429dc84b5408b1f2e43aae110f3640f8</anchor>
      <arglist>(const char character)</arglist>
    </member>
    <member kind="function">
      <name>isLowerCase</name>
      <anchor>a992cb24b99d4e7e6fbc99c0b868c6f29</anchor>
      <arglist>(const juce_wchar character)</arglist>
    </member>
    <member kind="function">
      <name>isWhitespace</name>
      <anchor>afd310215786f1493d3196e917e38c7b8</anchor>
      <arglist>(const char character)</arglist>
    </member>
    <member kind="function">
      <name>isWhitespace</name>
      <anchor>accd1d37d46d52960e546279a2fae25d1</anchor>
      <arglist>(const juce_wchar character)</arglist>
    </member>
    <member kind="function">
      <name>isDigit</name>
      <anchor>aa9ef5a930db83e546af922dcd3723679</anchor>
      <arglist>(const char character)</arglist>
    </member>
    <member kind="function">
      <name>isDigit</name>
      <anchor>a9b9cb2bf39502805370c7c45f8431d77</anchor>
      <arglist>(const juce_wchar character)</arglist>
    </member>
    <member kind="function">
      <name>isLetter</name>
      <anchor>abc2a34d970d0e94aee35b2f458fe6fd2</anchor>
      <arglist>(const char character)</arglist>
    </member>
    <member kind="function">
      <name>isLetter</name>
      <anchor>a424beeb2fac8a8c7604909ef2d30eb98</anchor>
      <arglist>(const juce_wchar character)</arglist>
    </member>
    <member kind="function">
      <name>isLetterOrDigit</name>
      <anchor>aa295140d9606f500f76c740f9dc895a6</anchor>
      <arglist>(const char character)</arglist>
    </member>
    <member kind="function">
      <name>isLetterOrDigit</name>
      <anchor>ac55537432863f4b97dd97c494e24d2af</anchor>
      <arglist>(const juce_wchar character)</arglist>
    </member>
    <member kind="function">
      <name>getHexDigitValue</name>
      <anchor>ae858468a5bfc0ee984603ff7a2b31b50</anchor>
      <arglist>(const juce_wchar digit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChoicePropertyComponent</name>
    <base>PropertyComponent</base>
    <base>ComboBoxListener</base>
    <filename>classChoicePropertyComponent.html</filename>
    <member kind="function">
      <name>ChoicePropertyComponent</name>
      <anchor>a2c81bdfd97932a807b7f055dd9ef145b</anchor>
      <arglist>(const String &amp;propertyName)</arglist>
    </member>
    <member kind="function">
      <name>ChoicePropertyComponent</name>
      <anchor>ad3e3b38bbc5f684d5b7cc1458a315da8</anchor>
      <arglist>(const Value &amp;valueToControl, const String &amp;propertyName, const StringArray &amp;choices, const Array&lt; int &gt; *choiceIDs=0)</arglist>
    </member>
    <member kind="function">
      <name>~ChoicePropertyComponent</name>
      <anchor>a1f4ed698110aba123058d1d03e19f50c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setIndex</name>
      <anchor>a96cc058a27b803f9fe954040c57951ec</anchor>
      <arglist>(int newIndex)</arglist>
    </member>
    <member kind="function">
      <name>getIndex</name>
      <anchor>ad274393dd06733afced8d81225b515c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getChoices</name>
      <anchor>a6a02cfe8ec2dd563d623e527bba414be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>a596cfdff4aacee564c686e0910b011e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>comboBoxChanged</name>
      <anchor>a99290b7e8969cc3dea7ad5440464db6b</anchor>
      <arglist>(ComboBox *)</arglist>
    </member>
    <member kind="function">
      <name>choices</name>
      <anchor>a9e1e134a3393008eaed61c31667b78fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeDocument</name>
    <filename>classCodeDocument.html</filename>
    <member kind="function">
      <name>CodeDocument</name>
      <anchor>a9b4bff1cc4d65445d0563fb286d3799d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~CodeDocument</name>
      <anchor>aa42ffd824e93061e613f7a0f941d51ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getAllContent</name>
      <anchor>a77f2aa91590313870aa5461027f60a74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTextBetween</name>
      <anchor>ab59714c115c2bd46de43062220534d7b</anchor>
      <arglist>(const Position &amp;start, const Position &amp;end) const </arglist>
    </member>
    <member kind="function">
      <name>getLine</name>
      <anchor>ac3d1ac4205bd70b3ebbf43fa009f4931</anchor>
      <arglist>(int lineIndex) const </arglist>
    </member>
    <member kind="function">
      <name>getNumCharacters</name>
      <anchor>a9733a4140971ec05f670444d285c3251</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumLines</name>
      <anchor>a248512e38d372eea0e105ed29aff45b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMaximumLineLength</name>
      <anchor>a8cb933bd245fdc6de934f02b8597b188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deleteSection</name>
      <anchor>a8618046d22c26326da18c0f372c330d8</anchor>
      <arglist>(const Position &amp;startPosition, const Position &amp;endPosition)</arglist>
    </member>
    <member kind="function">
      <name>insertText</name>
      <anchor>a52039d2d208e30688478dbe2f31640e4</anchor>
      <arglist>(const Position &amp;position, const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>replaceAllContent</name>
      <anchor>a621939da95a3a245a9474c003b59f65e</anchor>
      <arglist>(const String &amp;newContent)</arglist>
    </member>
    <member kind="function">
      <name>loadFromStream</name>
      <anchor>a666ae3cea6e96721b22176624bfa3881</anchor>
      <arglist>(InputStream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <name>writeToStream</name>
      <anchor>ae31f276f6445c5a6dc32cc12c4589b98</anchor>
      <arglist>(OutputStream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <name>getNewLineCharacters</name>
      <anchor>ae5947459bb44f3250bd58a08d6cc4a1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setNewLineCharacters</name>
      <anchor>a38a42ed070b3fc83f7541d7a9bb18bd8</anchor>
      <arglist>(const String &amp;newLine)</arglist>
    </member>
    <member kind="function">
      <name>newTransaction</name>
      <anchor>a507bca2d6747323276b938670584f354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>undo</name>
      <anchor>a47208d3029a44c1e9970f41ab5d87c5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>redo</name>
      <anchor>a65238c6b6e038074051ace9393c779c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearUndoHistory</name>
      <anchor>a14e3cfa2635a240eb8f5f378caab00f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getUndoManager</name>
      <anchor>af7429de29b5aebc09bbae7201eec87ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSavePoint</name>
      <anchor>a8e0fb736c346c229515ed802af5a5a69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasChangedSinceSavePoint</name>
      <anchor>a6307ece9a73aed4a04e630c96cd6f764</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>findWordBreakAfter</name>
      <anchor>ac61767927419a4f1474d2705e36b04ac</anchor>
      <arglist>(const Position &amp;position) const </arglist>
    </member>
    <member kind="function">
      <name>findWordBreakBefore</name>
      <anchor>a049740941f80c624f34a7427700c751e</anchor>
      <arglist>(const Position &amp;position) const </arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>ad23b21fdf64caf455dc9ffcec44b6d26</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>a83a95db08470090582a2b4a63b61fcb3</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeDocument::Iterator</name>
    <filename>classCodeDocument_1_1Iterator.html</filename>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>a3ee6a4135b4581b9b3d72a08f6bcb491</anchor>
      <arglist>(CodeDocument *document)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>a0d520b10dde056899742b1fe24084f02</anchor>
      <arglist>(const Iterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::~Iterator</name>
      <anchor>ac8c230852ecfbb1466668c1f2c1b3e16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::operator=</name>
      <anchor>aebccb9df9b0261dc4905c19383665ea8</anchor>
      <arglist>(const Iterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::nextChar</name>
      <anchor>aac4e6ccbc3ce08f7c05315713edda5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::peekNextChar</name>
      <anchor>ac20737d780e9bc7d9c5666d618b54785</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::skip</name>
      <anchor>ae29beec45949ba2279e0097f5514c376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::getPosition</name>
      <anchor>a1e8da25173d31e682502fd9a1146c07c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::skipWhitespace</name>
      <anchor>a36292d34f318f2bd778759e85dbb1adb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::skipToEndOfLine</name>
      <anchor>af022bef3ac374a43f3b88776f2131036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::getLine</name>
      <anchor>a16f3621807724a94bcaf99bee426774b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::isEOF</name>
      <anchor>a994aa30f7f64d5bd5b7aee6f6a7bd586</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeDocument::Listener</name>
    <filename>classCodeDocument_1_1Listener.html</filename>
    <member kind="function">
      <name>Listener::Listener</name>
      <anchor>a13e5b679bd0f71d05debd7d450228460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Listener::~Listener</name>
      <anchor>aff508f04d66863de7bfabcfff8dd4ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Listener::codeDocumentChanged</name>
      <anchor>aa97b98fcfa06712471b0724d2c20c11c</anchor>
      <arglist>(const Position &amp;affectedTextStart, const Position &amp;affectedTextEnd)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeDocument::Position</name>
    <filename>classCodeDocument_1_1Position.html</filename>
    <member kind="function">
      <name>Position::Position</name>
      <anchor>ae135cc0587fb3da1135982295772eec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Position::Position</name>
      <anchor>a76da5899793ebb3b54f1beba9b7af5bf</anchor>
      <arglist>(const CodeDocument *ownerDocument, int line, int indexInLine)</arglist>
    </member>
    <member kind="function">
      <name>Position::Position</name>
      <anchor>a35583dd48507cf5a4e10bd7a891b59bb</anchor>
      <arglist>(const CodeDocument *ownerDocument, int charactersFromStartOfDocument)</arglist>
    </member>
    <member kind="function">
      <name>Position::Position</name>
      <anchor>a04c7ae84058bf64ba2d011ef2b7d17d3</anchor>
      <arglist>(const Position &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Position::~Position</name>
      <anchor>aaffd03d4e5545fb6f65ec9c02fadb99b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Position::operator=</name>
      <anchor>ab64c2cdecf2d6ea90dfad9cbc5c3ccbd</anchor>
      <arglist>(const Position &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Position::operator==</name>
      <anchor>a180c286ea56437e6b6a7df7e34da927e</anchor>
      <arglist>(const Position &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>Position::operator!=</name>
      <anchor>a64b425c81baeeebf38f968b372057e16</anchor>
      <arglist>(const Position &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>Position::setPosition</name>
      <anchor>aabaa322c141c2aa1c4f51689372dac70</anchor>
      <arglist>(int charactersFromStartOfDocument)</arglist>
    </member>
    <member kind="function">
      <name>Position::getPosition</name>
      <anchor>aff2a730bf8dcd24c1dbcc8828ff6d0fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Position::setLineAndIndex</name>
      <anchor>a48c6c1c1aaa694cf8a791c2c21a5b0ed</anchor>
      <arglist>(int newLine, int newIndexInLine)</arglist>
    </member>
    <member kind="function">
      <name>Position::getLineNumber</name>
      <anchor>a671fd31034da6b8a0faf948131d0d448</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Position::getIndexInLine</name>
      <anchor>ab1941b1494153fdfe0b8e490ecd438a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Position::setPositionMaintained</name>
      <anchor>a6137825e7845bb6d5ee203a7d42c8d6a</anchor>
      <arglist>(bool isMaintained)</arglist>
    </member>
    <member kind="function">
      <name>Position::moveBy</name>
      <anchor>a064a37e5128a3b31570dd09eef48c8f9</anchor>
      <arglist>(int characterDelta)</arglist>
    </member>
    <member kind="function">
      <name>Position::movedBy</name>
      <anchor>ad52afbee85589364a2543aab4c06c233</anchor>
      <arglist>(int characterDelta) const </arglist>
    </member>
    <member kind="function">
      <name>Position::movedByLines</name>
      <anchor>a9bca63b5c8b56a5b9c59222eea3d0313</anchor>
      <arglist>(int deltaLines) const </arglist>
    </member>
    <member kind="function">
      <name>Position::getCharacter</name>
      <anchor>a47a11d7d78ad657d5716a22491a01583</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Position::getLineText</name>
      <anchor>a75582f7eb24268be561d1521f3a7371e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeEditorComponent</name>
    <base>Component</base>
    <base>TextInputTarget</base>
    <base>Timer</base>
    <base>ScrollBarListener</base>
    <base>CodeDocument::Listener</base>
    <base>AsyncUpdater</base>
    <filename>classCodeEditorComponent.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a452d8416080619c9b4984bc97e85a596</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>a452d8416080619c9b4984bc97e85a596aab761a6dbaa4bf78a14e346dc2d416c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>aretColourId</name>
      <anchor>a452d8416080619c9b4984bc97e85a596a274bff93510677bddf6b45410ce691f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ighlightColourId</name>
      <anchor>a452d8416080619c9b4984bc97e85a596ae30c71457d23fcf0ff18ce56195107cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>efaultTextColourId</name>
      <anchor>a452d8416080619c9b4984bc97e85a596aebfaf17bcdaf7960adf28fc44355a51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CodeEditorComponent</name>
      <anchor>a88a12161694167080d375325019b984a</anchor>
      <arglist>(CodeDocument &amp;document, CodeTokeniser *codeTokeniser)</arglist>
    </member>
    <member kind="function">
      <name>~CodeEditorComponent</name>
      <anchor>af36172ba8ba2275cbec5c365e1ef964c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDocument</name>
      <anchor>ab2c56a903a4c93a1ceed5ba1e9a09220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>loadContent</name>
      <anchor>ad4c04d9757379b8205559c155f979ebd</anchor>
      <arglist>(const String &amp;newContent)</arglist>
    </member>
    <member kind="function">
      <name>getCharWidth</name>
      <anchor>a1a7c893f62ef58ba59e7bf3b0f6a2f2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLineHeight</name>
      <anchor>a26d79c551dff64ab1eee7db6c11fb327</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumLinesOnScreen</name>
      <anchor>a9f174bb1b91e77a382dd958fb9b65f01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumColumnsOnScreen</name>
      <anchor>a442adb47df1d070932a90bd0d301be30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCaretPos</name>
      <anchor>a7c899a30d03d0e979696e903126577b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>moveCaretTo</name>
      <anchor>a875d87419bd0dfc748b77257b14fc67a</anchor>
      <arglist>(const CodeDocument::Position &amp;newPos, bool selecting)</arglist>
    </member>
    <member kind="function">
      <name>getCharacterBounds</name>
      <anchor>aab4c141631a02bc0ed5b43e6685cd1f3</anchor>
      <arglist>(const CodeDocument::Position &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <name>getPositionAt</name>
      <anchor>a77632dd4bb009820878f2f054b1ac982</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>cursorLeft</name>
      <anchor>aedc8c5a84f18206c0d713a491823e514</anchor>
      <arglist>(bool moveInWholeWordSteps, bool selecting)</arglist>
    </member>
    <member kind="function">
      <name>cursorRight</name>
      <anchor>ac8f2be418a50ef83b720762bcd74774b</anchor>
      <arglist>(bool moveInWholeWordSteps, bool selecting)</arglist>
    </member>
    <member kind="function">
      <name>cursorDown</name>
      <anchor>affc79eb54323e057524683e7919ca928</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <name>cursorUp</name>
      <anchor>a423b2b601663807a037768ff7e8c9c6f</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <name>pageDown</name>
      <anchor>ae15d553358f105ae21b1c76e4c337963</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <name>pageUp</name>
      <anchor>a896a083f6af09190b6bce7bf104b49a0</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <name>scrollDown</name>
      <anchor>a67c2d693cd9dac1cd9d78c9160331517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scrollUp</name>
      <anchor>ab4c7e50059db4e8c5f43af0594fc0561</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scrollToLine</name>
      <anchor>aa334176d889fd98af33c7c8aa08f6ee2</anchor>
      <arglist>(int newFirstLineOnScreen)</arglist>
    </member>
    <member kind="function">
      <name>scrollBy</name>
      <anchor>a16136821d3e53e18175eceb1158b14c5</anchor>
      <arglist>(int deltaLines)</arglist>
    </member>
    <member kind="function">
      <name>scrollToColumn</name>
      <anchor>a0bfb4492d67572224018afebc02ee555</anchor>
      <arglist>(int newFirstColumnOnScreen)</arglist>
    </member>
    <member kind="function">
      <name>scrollToKeepCaretOnScreen</name>
      <anchor>a2039755404663d74a9ff7164306a75a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>goToStartOfDocument</name>
      <anchor>ac23eab95a637d75c76db46b1ca7099ef</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <name>goToStartOfLine</name>
      <anchor>ad6b424e19c7715bd8400fb8047800e2e</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <name>goToEndOfDocument</name>
      <anchor>a639fa1cd4b7b3629449153b121d89fee</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <name>goToEndOfLine</name>
      <anchor>a9391cc29a9b4bec7c1a3737052d2a2e3</anchor>
      <arglist>(bool selecting)</arglist>
    </member>
    <member kind="function">
      <name>deselectAll</name>
      <anchor>a17ed61aa9155a012f96dd6ff5c7c6b1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectAll</name>
      <anchor>a9a0c3aa33b3396708a9434de39b06fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertTextAtCaret</name>
      <anchor>a81419ae52c4ce4af175a4c9d330d584f</anchor>
      <arglist>(const String &amp;textToInsert)</arglist>
    </member>
    <member kind="function">
      <name>insertTabAtCaret</name>
      <anchor>a870a061b7ce31960f9c53b3214c25cf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cut</name>
      <anchor>a38f3fe2629553b396b2e9e8f56772388</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>a88415cb1dbaa642c29ddbf8356a73aa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>copyThenCut</name>
      <anchor>ac56b2e6baa5fd60c48ea514e31e4c58e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paste</name>
      <anchor>a881a0364ce077105fb9dcab5364266a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>backspace</name>
      <anchor>a8f1d7a069fa3a70bd8a952d43ae9af67</anchor>
      <arglist>(bool moveInWholeWordSteps)</arglist>
    </member>
    <member kind="function">
      <name>deleteForward</name>
      <anchor>aac5cd668f48c5a3c70d2bafc408e445b</anchor>
      <arglist>(bool moveInWholeWordSteps)</arglist>
    </member>
    <member kind="function">
      <name>undo</name>
      <anchor>a15a427dd615b194d580dc6990d0ac323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>redo</name>
      <anchor>a078f99bcb9fd3d7d1cce3879b4e93a3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getHighlightedRegion</name>
      <anchor>a93223d4134c7694f0bf04792ae395864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setHighlightedRegion</name>
      <anchor>ac1f57ebd5104fac38f599a4ebbabe04a</anchor>
      <arglist>(const Range&lt; int &gt; &amp;newRange)</arglist>
    </member>
    <member kind="function">
      <name>getTextInRange</name>
      <anchor>a148e61b02fc11e007919e6864071114b</anchor>
      <arglist>(const Range&lt; int &gt; &amp;range) const </arglist>
    </member>
    <member kind="function">
      <name>setTabSize</name>
      <anchor>a8ceedaaa27d8da25da6a8941d4a2db4e</anchor>
      <arglist>(int numSpacesPerTab, bool insertSpacesInsteadOfTabCharacters)</arglist>
    </member>
    <member kind="function">
      <name>getTabSize</name>
      <anchor>a7c38e8f7e980019197157434612394b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>areSpacesInsertedForTabs</name>
      <anchor>a79befaff281e3c097f5586889ec7014c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>a9804e73700fc3d18c178d7138510f32d</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <name>resetToDefaultColours</name>
      <anchor>a9bea10875d46eb9fdcb5a415dfda3c7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setColourForTokenType</name>
      <anchor>ae9163b69ff2f0750313870988ce75ece</anchor>
      <arglist>(int tokenType, const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <name>getColourForTokenType</name>
      <anchor>aa4a3f376e41b37a321c6dafb91671817</anchor>
      <arglist>(int tokenType) const </arglist>
    </member>
    <member kind="function">
      <name>setScrollbarThickness</name>
      <anchor>a75ac5d9c886a72d925d62417d1171c65</anchor>
      <arglist>(int thickness)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>aa74c48e652e498b6b889b90a6ecf9c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a7d6fc5fe3146e8b658e09437036d7c35</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>a339747aacfeed5eaa6759c06aea39a1e</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a272571a3330a383df691913c868b9f2f</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>ab44f4aa4ec0046a660a691c9d8570ea1</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>a17d6ef0d2cee0b7ec44d3b898de4a7ff</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDoubleClick</name>
      <anchor>a1129e8a6af96e5791f270de2b4331c08</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseWheelMove</name>
      <anchor>ab1ce9252159a3648ad33646876e386f5</anchor>
      <arglist>(const MouseEvent &amp;e, float wheelIncrementX, float wheelIncrementY)</arglist>
    </member>
    <member kind="function">
      <name>timerCallback</name>
      <anchor>a1b89a41143da5a250c19f96ff21b95d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scrollBarMoved</name>
      <anchor>a83bdf1f50ee4c00f19434439d6aade2a</anchor>
      <arglist>(ScrollBar *scrollBarThatHasMoved, double newRangeStart)</arglist>
    </member>
    <member kind="function">
      <name>handleAsyncUpdate</name>
      <anchor>adbf2b44811c100bff50881d2bb8e743c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>codeDocumentChanged</name>
      <anchor>a31cdb82ffdc6e780257485824c47b69b</anchor>
      <arglist>(const CodeDocument::Position &amp;affectedTextStart, const CodeDocument::Position &amp;affectedTextEnd)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CodeTokeniser</name>
    <filename>classCodeTokeniser.html</filename>
    <member kind="function">
      <name>CodeTokeniser</name>
      <anchor>a03586fac70e7e14fdd091e87497112bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~CodeTokeniser</name>
      <anchor>ac0509831c5e621abc5d1e8cc792f563d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readNextToken</name>
      <anchor>aeb723b767eed0ce44ae995c99ebc1c2f</anchor>
      <arglist>(CodeDocument::Iterator &amp;source)=0</arglist>
    </member>
    <member kind="function">
      <name>getTokenTypes</name>
      <anchor>a5f020838d22dc6456f51b72cc382fb7c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getDefaultColour</name>
      <anchor>a0bd42c98dc6d14ffa214b68f71eee8ed</anchor>
      <arglist>(int tokenType)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Colour</name>
    <filename>classColour.html</filename>
    <member kind="function">
      <name>Colour</name>
      <anchor>a46612b9524fcd4cee818af6a86b7a4d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Colour</name>
      <anchor>a7b310faaa182debdea3735fe73d56839</anchor>
      <arglist>(const Colour &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Colour</name>
      <anchor>acb02a7b8691401a0550f6a7ceda37ddb</anchor>
      <arglist>(uint32 argb)</arglist>
    </member>
    <member kind="function">
      <name>Colour</name>
      <anchor>aea82fa7476f9b36426b40dfdf7173d76</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue)</arglist>
    </member>
    <member kind="function">
      <name>Colour</name>
      <anchor>a3ba1506644d29280eb83b8e9dca2ec9c</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue, uint8 alpha)</arglist>
    </member>
    <member kind="function">
      <name>Colour</name>
      <anchor>a1d2d7f228e4f04942de42a643a4aef44</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue, float alpha)</arglist>
    </member>
    <member kind="function">
      <name>Colour</name>
      <anchor>abefab3c4f9e61d5b7fa262589e8834fe</anchor>
      <arglist>(float hue, float saturation, float brightness, uint8 alpha)</arglist>
    </member>
    <member kind="function">
      <name>Colour</name>
      <anchor>aeb9370e393c7f78a608b8571d038e903</anchor>
      <arglist>(float hue, float saturation, float brightness, float alpha)</arglist>
    </member>
    <member kind="function">
      <name>~Colour</name>
      <anchor>a92e4d464c2e972d272f4e14c59e4a7ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromRGB</name>
      <anchor>a39afbe90515e34548437fe3c1a51ef6d</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue)</arglist>
    </member>
    <member kind="function">
      <name>fromRGBA</name>
      <anchor>a0c28fc3d21d1fc42c5b6729638403ec9</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue, uint8 alpha)</arglist>
    </member>
    <member kind="function">
      <name>fromRGBAFloat</name>
      <anchor>aab39613788afb6369d6f62dd64d7cab9</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue, float alpha)</arglist>
    </member>
    <member kind="function">
      <name>fromHSV</name>
      <anchor>a1a486fcd39a2011695d44832956eb676</anchor>
      <arglist>(float hue, float saturation, float brightness, float alpha)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a40ca3f6d9953cb75ef70fa77153dad2b</anchor>
      <arglist>(const Colour &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>aab6eb5c944b775403edb7eff10757fa2</anchor>
      <arglist>(const Colour &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a42789f548c1a2a1345472b51473c1749</anchor>
      <arglist>(const Colour &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>getRed</name>
      <anchor>abda1cdb15f0d933ff241d9833a2de36d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getGreen</name>
      <anchor>a1cbe9ad08b733624ac5a580f53694903</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBlue</name>
      <anchor>ab76721b65407bc279fe153428e24d37c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFloatRed</name>
      <anchor>a4d9e275f7933ad7258ff7756cd0be804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFloatGreen</name>
      <anchor>a1fb8c87192c7e59638d9c2d54b25965f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFloatBlue</name>
      <anchor>a6f664f8144d7317319634ba7bfed1612</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getPixelARGB</name>
      <anchor>a735384609bf6065b222eb02e41275b27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getARGB</name>
      <anchor>af309c6d3dbd66266c903795c5a4edda2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAlpha</name>
      <anchor>ab9a29873aea21f6fc67b2008dd62b745</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFloatAlpha</name>
      <anchor>a9023ce2173daf50c1ca8449c0fb16476</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isOpaque</name>
      <anchor>a9e5e01f7c48142d1295b964f59001efa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isTransparent</name>
      <anchor>aa22a59a8c87a3fc289311863ba82aa3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>withAlpha</name>
      <anchor>abf0259e047bea9fd54197796f2a8c2d8</anchor>
      <arglist>(uint8 newAlpha) const </arglist>
    </member>
    <member kind="function">
      <name>withAlpha</name>
      <anchor>a28075b70009b68f8470f9ddbf38683f5</anchor>
      <arglist>(float newAlpha) const </arglist>
    </member>
    <member kind="function">
      <name>withMultipliedAlpha</name>
      <anchor>a1491a2eadd641dde7052dbc2dbd8c351</anchor>
      <arglist>(float alphaMultiplier) const </arglist>
    </member>
    <member kind="function">
      <name>overlaidWith</name>
      <anchor>a81bf8a10c7fd4f7c784fd6ed1c4d8294</anchor>
      <arglist>(const Colour &amp;foregroundColour) const </arglist>
    </member>
    <member kind="function">
      <name>interpolatedWith</name>
      <anchor>a0f55236b8ecf312b88bc58387ef31bdc</anchor>
      <arglist>(const Colour &amp;other, float proportionOfOther) const </arglist>
    </member>
    <member kind="function">
      <name>getHue</name>
      <anchor>ad3d3d80dd862661583c45705b5c95b25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSaturation</name>
      <anchor>a8a330bf472e7e71ec5f88feca16cc8db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBrightness</name>
      <anchor>ac2cbec9263490d7dcc0f094c1c41af3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHSB</name>
      <anchor>af45311a8ea7b9e0226f23b19a2def12e</anchor>
      <arglist>(float &amp;hue, float &amp;saturation, float &amp;brightness) const </arglist>
    </member>
    <member kind="function">
      <name>withHue</name>
      <anchor>ac23c9057ee2a853f7904459d3ec46422</anchor>
      <arglist>(float newHue) const </arglist>
    </member>
    <member kind="function">
      <name>withSaturation</name>
      <anchor>a66535a5dfd8e3e654a574e4b25df142b</anchor>
      <arglist>(float newSaturation) const </arglist>
    </member>
    <member kind="function">
      <name>withBrightness</name>
      <anchor>a4e0c0cc32c4d0d5638dc0f2ceb900010</anchor>
      <arglist>(float newBrightness) const </arglist>
    </member>
    <member kind="function">
      <name>withRotatedHue</name>
      <anchor>a9b355e24940efb7e0924df4f5881540c</anchor>
      <arglist>(float amountToRotate) const </arglist>
    </member>
    <member kind="function">
      <name>withMultipliedSaturation</name>
      <anchor>aab29d837fae081594b93608dd617e3b9</anchor>
      <arglist>(float multiplier) const </arglist>
    </member>
    <member kind="function">
      <name>withMultipliedBrightness</name>
      <anchor>a07a9a16bd34eead3a9a7672de5ddfe04</anchor>
      <arglist>(float amount) const </arglist>
    </member>
    <member kind="function">
      <name>brighter</name>
      <anchor>a52a4efdc91c634412eb69576cb73f456</anchor>
      <arglist>(float amountBrighter=0.4f) const </arglist>
    </member>
    <member kind="function">
      <name>darker</name>
      <anchor>a42306d6a6ef0754a87ad18699bd49b61</anchor>
      <arglist>(float amountDarker=0.4f) const </arglist>
    </member>
    <member kind="function">
      <name>contrasting</name>
      <anchor>aea461324af89f49c27db4e4b0101433f</anchor>
      <arglist>(float amount=1.0f) const </arglist>
    </member>
    <member kind="function">
      <name>contrasting</name>
      <anchor>a1fee4abc6310a4a7961e50b86044ca2d</anchor>
      <arglist>(const Colour &amp;colour1, const Colour &amp;colour2)</arglist>
    </member>
    <member kind="function">
      <name>greyLevel</name>
      <anchor>a64759a198908f8d4a9dabedf76be24aa</anchor>
      <arglist>(float brightness)</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>a290851a233b9bce7cc65006088c40d9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>fromString</name>
      <anchor>a54d9879715dcc14a76cbcba7bdc6ec9d</anchor>
      <arglist>(const String &amp;encodedColourString)</arglist>
    </member>
    <member kind="function">
      <name>toDisplayString</name>
      <anchor>a6862662a39f254fd674df17e63fe2d64</anchor>
      <arglist>(bool includeAlphaValue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColourGradient</name>
    <filename>classColourGradient.html</filename>
    <member kind="function">
      <name>ColourGradient</name>
      <anchor>a8d8bf4b464aba25b11d0a6231df95b37</anchor>
      <arglist>(const Colour &amp;colour1, float x1, float y1, const Colour &amp;colour2, float x2, float y2, bool isRadial)</arglist>
    </member>
    <member kind="function">
      <name>ColourGradient</name>
      <anchor>acd3c3c26c52254a32eeebbca5038f600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ColourGradient</name>
      <anchor>a0ab7aff1c3f8b6faf82bebf3ff9b4a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearColours</name>
      <anchor>a634055607de82695189730cf409e3ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addColour</name>
      <anchor>a1d32f6d097f81afbd73955072ea438ac</anchor>
      <arglist>(double proportionAlongGradient, const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <name>multiplyOpacity</name>
      <anchor>a9a453daa830f812a896f635487aa1f4f</anchor>
      <arglist>(float multiplier)</arglist>
    </member>
    <member kind="function">
      <name>getNumColours</name>
      <anchor>a9fdf460504ed8666fda8adf71bd1d080</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getColourPosition</name>
      <anchor>aa17981d5ba262bce6324b7b0666af5a0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getColour</name>
      <anchor>ae7b60a0e952794b7e49daefd57749a03</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getColourAtPosition</name>
      <anchor>af889b9348f0f34c1ae4b6ade6941e7f1</anchor>
      <arglist>(float position) const </arglist>
    </member>
    <member kind="function">
      <name>createLookupTable</name>
      <anchor>a6670038ecde1f98034ae4231c30d9298</anchor>
      <arglist>(const AffineTransform &amp;transform, HeapBlock&lt; PixelARGB &gt; &amp;resultLookupTable) const </arglist>
    </member>
    <member kind="function">
      <name>isOpaque</name>
      <anchor>acb352da527dcd42d882d337f1ce2e16c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isInvisible</name>
      <anchor>ada286fa14e70c0909c647d3d23f4b747</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>x1</name>
      <anchor>a82f506e8f5e6236cf1a05fbe9a1f6ad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y1</name>
      <anchor>a8aa7bf7fc12d9a9184857d3c57eedb0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>x2</name>
      <anchor>ad54011e1eb5f1b816121fd44d840507a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y2</name>
      <anchor>ae249cd18f07a9d5c6773db9b6910e4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>isRadial</name>
      <anchor>a42c5382b7e7bda2b7efdb7b1a9258a44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Colours</name>
    <filename>classColours.html</filename>
    <member kind="function">
      <name>findColourForName</name>
      <anchor>a98d63b711408d844bd7d906cea3a523b</anchor>
      <arglist>(const String &amp;colourName, const Colour &amp;defaultColour)</arglist>
    </member>
    <member kind="function">
      <name>transparentBlack</name>
      <anchor>a0ce54d7a6cbbce207c29165102d3a35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>transparentWhite</name>
      <anchor>a9188c880171c8f146d40801c304c25b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>black</name>
      <anchor>aad3910013bf00a80305c082284cd5ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>white</name>
      <anchor>a9e57055bbdf8261e776d2ea8bb44514a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>blue</name>
      <anchor>a6a834cffeaa15537e4781d8d24968a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>grey</name>
      <anchor>a631686f2c072d2bf0988f418dea3c27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>green</name>
      <anchor>a9a561532a8aa26019e40aa0460a40646</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>red</name>
      <anchor>a5056e7857f2bc211569dfc89512244dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>yellow</name>
      <anchor>a2a39e71272c998b9244bd633d0c80a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>aliceblue</name>
      <anchor>aa90d486409e9c3634ec3f9abbaeb14d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>antiquewhite</name>
      <anchor>a2b7b4df4c8de5448bbb9b0e675d5ba71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>aqua</name>
      <anchor>a8e8c52db61e74dde6972c2f9c727796f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>aquamarine</name>
      <anchor>aa16a1a5bd7d1e56f3d36ce7bf7706cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>azure</name>
      <anchor>a5171f883b75e70b30df3b3b1746a8521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>beige</name>
      <anchor>a3dfd5f795dbfe57bd3d2b856455b68ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bisque</name>
      <anchor>ae6dbea8a5a7948d1b7e9189dce936e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>blanchedalmond</name>
      <anchor>ade76144d43cca657dac89e21b9a4ff43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>blueviolet</name>
      <anchor>a1720311a325df81523fac5513a1253a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>brown</name>
      <anchor>a4c9ecea4fcd6707c997848245cdb1aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>burlywood</name>
      <anchor>a44803d0e7de49815d43c88d9b6042718</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>cadetblue</name>
      <anchor>af5bca16acd0235fa3c63859465d53f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>chartreuse</name>
      <anchor>aadcaa70cc7028fee7c6dba0a04926b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>chocolate</name>
      <anchor>a0c018189a4e1c0810a8838abb1763135</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>coral</name>
      <anchor>a194cea1670d8b5588dc0acb40c7e93d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>cornflowerblue</name>
      <anchor>a4186f54cc951c1482c317b8729eb47a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>cornsilk</name>
      <anchor>a21bbe016b258787d6754d6227efa3c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>crimson</name>
      <anchor>abd804b3fa30e3aea3908bfaef84ff7ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>cyan</name>
      <anchor>a0f35bbd00d593e18a4e980100e77373c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkblue</name>
      <anchor>a444aff0fcfa17bb58a4e5fbc55fdd2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkcyan</name>
      <anchor>ae05956920f811ce4b5747ed19b219bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkgoldenrod</name>
      <anchor>a3684379c9ead0aafa8e35640c21b1e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkgrey</name>
      <anchor>a69d1600ff4246b36704d9cf972575bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkgreen</name>
      <anchor>ad2cc4c51c26edb7697352b22ecc090cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkkhaki</name>
      <anchor>a054e8a1bb8b99049217e9e8c78b6a1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkmagenta</name>
      <anchor>afb2749e7f077c0424a3f9ee45093a9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkolivegreen</name>
      <anchor>acd779b0d1d755516274066e96ffa3f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkorange</name>
      <anchor>a4e47895b9516b78a951233d176553ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkorchid</name>
      <anchor>adb030640ac52d88eac194db4e3221107</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkred</name>
      <anchor>a708ef7df00517dda5693ac3576f300e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darksalmon</name>
      <anchor>abd3a046bb36d67f85a6dc9b36d9ddc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkseagreen</name>
      <anchor>a9bbe7f34e6ca7dc1f1bf28c47aed4101</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkslateblue</name>
      <anchor>acf7161f16736b24346901341aa4e2132</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkslategrey</name>
      <anchor>a5d110e28508d1b6b94d1c6a2ca2ce0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkturquoise</name>
      <anchor>a3cab3c29a15b8f727b4915512c7f0c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>darkviolet</name>
      <anchor>a157085bc9d4d0bc75966b238b51a7ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>deeppink</name>
      <anchor>a28f6cc1ccf53cef009f33f982100453f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>deepskyblue</name>
      <anchor>ae7932af011b21184ce06f33c30396d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>dimgrey</name>
      <anchor>a737012c7670ba25ccc7bee5ba96c3d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>dodgerblue</name>
      <anchor>a1a07cae34389d93d4b3817a14ef6efda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>firebrick</name>
      <anchor>a42927144796d42794fb69b30dce33e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>floralwhite</name>
      <anchor>a7b14b831624be80b4520225559ba5253</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>forestgreen</name>
      <anchor>a34c336f65b06cb988f89bddc14a5041e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>fuchsia</name>
      <anchor>a612e521b7168865f48fc7d1612658a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>gainsboro</name>
      <anchor>aafd6fddf3e1dc29dadc28574d814b341</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>gold</name>
      <anchor>afa34ba9e11dffb794fb740f4e57da7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>goldenrod</name>
      <anchor>a7b4ffbc83bda6d20b537415f49327ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>greenyellow</name>
      <anchor>a9d690d0eb0194caa2c91dfba4afbff4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>honeydew</name>
      <anchor>a5f2fec9693dfbde24317fa3fe3d29528</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>hotpink</name>
      <anchor>a7f61d3865bb38cd0eecdc7c46ae0e603</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indianred</name>
      <anchor>a5a356968d2d4f49b369afa56c0ec3f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indigo</name>
      <anchor>a087ca459fcd267cdda383c5bf5ab0f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ivory</name>
      <anchor>a97ea5f64838c6c2d1301c32108e830d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>khaki</name>
      <anchor>a3dbd6496fffe6448949acef248ddb3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lavender</name>
      <anchor>a42bdd3828e3e453f1aacd8e129d7ba4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lavenderblush</name>
      <anchor>a189b1d3e8c5a8f324de759efc8325496</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lemonchiffon</name>
      <anchor>aac8ef45b16855e5990afa7efca9a19cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightblue</name>
      <anchor>a7c6d7f45d8e84964320b3c510b15ac29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightcoral</name>
      <anchor>ac7ec898bf0d0e640c2272479e4e83262</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightcyan</name>
      <anchor>a126f9d070fa806c9159a7df2fa0b29c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightgoldenrodyellow</name>
      <anchor>aa211fa75f0d31dd157551a340df3035f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightgreen</name>
      <anchor>a0b5d566aeaf7d6ee3a6decb9766eb984</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightgrey</name>
      <anchor>a1fa2b00bb140b113d57b6de66c0c8e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightpink</name>
      <anchor>a8067259612bf052798aa6a9f4ac562db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightsalmon</name>
      <anchor>aa994fb73c8ea9b95188fbf9fee1ad6b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightseagreen</name>
      <anchor>a31d871ea1084f5e497c01e276dd251cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightskyblue</name>
      <anchor>a088bec932f10162da5fd40c3e407884c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightslategrey</name>
      <anchor>a86dd7443cbd2e6f1f68b489e284980e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightsteelblue</name>
      <anchor>a7cb8ffd18a182fa76df45b0888af429b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightyellow</name>
      <anchor>a8614458932a2ff1907db0c672a74c1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lime</name>
      <anchor>aaf9a5609e0358dec5bf3d424bf6961d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>limegreen</name>
      <anchor>a864d371bf2a2f6aa17f08c34e30fa750</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>linen</name>
      <anchor>ae78b2b6dd2b4f69df9653603310ebf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>magenta</name>
      <anchor>a9a33de3ccb10690341256154909b390e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>maroon</name>
      <anchor>a4790622961dd6a1eff7179d89cc78617</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mediumaquamarine</name>
      <anchor>a059c8c5ab845ec21bba2a86cd8240fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mediumblue</name>
      <anchor>a50c8a8350bbc20cc32167ab8719a68a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mediumorchid</name>
      <anchor>afb4edaddffe337e9b8a98a3945c1b0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mediumpurple</name>
      <anchor>ad7b9364df25c2a9cab57edf5754c1700</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mediumseagreen</name>
      <anchor>a22521dd30cf5cae36214214e1f5e6a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mediumslateblue</name>
      <anchor>a3714678ce4c2fc1d82258a3ac8dc1c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mediumspringgreen</name>
      <anchor>a1eed924e1912712c790ec6e9733f30e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mediumturquoise</name>
      <anchor>a108a3b570a3e24157b157445502e0c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mediumvioletred</name>
      <anchor>aca989bc73fc042848610a8d841a817cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>midnightblue</name>
      <anchor>ae2b84b4de769da6c75cc947dcf8a066a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mintcream</name>
      <anchor>ae73a01a9deca54c8f004320a2d24edfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mistyrose</name>
      <anchor>a6f6db5e9de7a3d438ebe01a6a6c28baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>navajowhite</name>
      <anchor>a3aae0d537d9c4103f0be6e84443bae6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>navy</name>
      <anchor>a2f4e6cbbf218f698b25a8e08c787068f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oldlace</name>
      <anchor>a8854bc208ff4c18d1359d48061801eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>olive</name>
      <anchor>afa863de7d2e3c645092e981ef4b47349</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>olivedrab</name>
      <anchor>a470482f79ccbabc1cfe7c44e4123acfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>orange</name>
      <anchor>a8c31c34f70dbdc0cad0f7cddf6cdb59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>orangered</name>
      <anchor>a9a18c3a1066dd40816a1847450b7df1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>orchid</name>
      <anchor>a713c49555dcbf132b3f147f4a66e2cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>palegoldenrod</name>
      <anchor>a3bbc454c6b84c80fb0d664cfb2b01657</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>palegreen</name>
      <anchor>a6518cb2353fd89ad7d463ef6675f30c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>paleturquoise</name>
      <anchor>a2b17126a05b24d3e936527e260cd9f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>palevioletred</name>
      <anchor>aff1ccf8323d8231e42e1342a7d7b293a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>papayawhip</name>
      <anchor>a8b6fb5bd196ba71f78c2d0a17c712783</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>peachpuff</name>
      <anchor>aa83a3ec486288727ffa82d9e8e4a82b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>peru</name>
      <anchor>a8417b7053caaf567a98eb61eccf57838</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pink</name>
      <anchor>aa959194b957e4113dcdc9ec488464229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>plum</name>
      <anchor>ac02c6bea8fac05b5c050a3ec6b4fd924</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>powderblue</name>
      <anchor>aa913febd5348f64f92af7c4dac0b667c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>purple</name>
      <anchor>ae3a4c80eb100c23650cec3d19320b40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rosybrown</name>
      <anchor>ac80422785f2552e8738a6b450f335dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>royalblue</name>
      <anchor>a2f85b97be33e07c1ca9a0187c4883df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>saddlebrown</name>
      <anchor>a753a5e165485d3bb8e27db7296627a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>salmon</name>
      <anchor>af378ac76e1537fce6687df4ba4cdf02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sandybrown</name>
      <anchor>aeaae32c502a189cef0bfbbc1251cdb1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>seagreen</name>
      <anchor>adc17fb0b93d2db209de3e4f54857f2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>seashell</name>
      <anchor>a59caf9dbbe04dd428b7253273ec14ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sienna</name>
      <anchor>aef8c3caf18a816ecc8180ca9d639ab3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>silver</name>
      <anchor>ac171c2c4d749ed079e56de4fe35ba2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>skyblue</name>
      <anchor>a1c4ad4071850e2f41643f5754052769b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>slateblue</name>
      <anchor>acfce5d955cbea8e623306c40608e4157</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>slategrey</name>
      <anchor>a6be50813f9d395a79a006cad9164f2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>snow</name>
      <anchor>a526bf1d183bff07c8984d7221cfd33ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>springgreen</name>
      <anchor>a3e179fc221c9922880646454e451562b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>steelblue</name>
      <anchor>a5b38585d24f85fd84b1aea940d0970db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tan</name>
      <anchor>ae8816a5fc45532eff9ba5884de8902f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>teal</name>
      <anchor>a8b36ca8736b9a5f54d04687b702d2407</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>thistle</name>
      <anchor>ab84edf5bce8e53629326721524ce3b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tomato</name>
      <anchor>a52d1f22f0d92d67cdb05c0d083dc109a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>turquoise</name>
      <anchor>a18ee88829e56e1e141d0291d0c540b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>violet</name>
      <anchor>a47d1f14979982a28936c5ec4f90e82aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wheat</name>
      <anchor>ad1fd92baa1ca57d2e51995df721bb326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>whitesmoke</name>
      <anchor>a0ef54946314ce5243c7cc6aa7d04fbb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>yellowgreen</name>
      <anchor>ad83bd255e0db333a7e66f23ab02eb492</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColourSelector</name>
    <base>Component</base>
    <base>ChangeBroadcaster</base>
    <base>SliderListener</base>
    <filename>classColourSelector.html</filename>
    <member kind="function">
      <name>ColourSelectorOptions</name>
      <anchor>a42bcef80614375bb812096797d7439f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>howAlphaChannel</name>
      <anchor>a42bcef80614375bb812096797d7439f4a532b65a28bec85b05e7a1af509d537b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>howColourAtTop</name>
      <anchor>a42bcef80614375bb812096797d7439f4ad6696687d1305adef49791cb79f44ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>howSliders</name>
      <anchor>a42bcef80614375bb812096797d7439f4acb7837c2bed5ec3fe11c19408b9d8f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>howColourspace</name>
      <anchor>a42bcef80614375bb812096797d7439f4ab4838306154c4cb269920a01c2a6495b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a65fa6c43362eb075049881086dc3ffca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>a65fa6c43362eb075049881086dc3ffcaa8b8cebff8127c562a7253f04c06fc521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>abelTextColourId</name>
      <anchor>a65fa6c43362eb075049881086dc3ffcaaaa24cca7ebcab0317445ff12196e0362</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ColourSelector</name>
      <anchor>a0860f187f7d79b1ef3e7698cfa185b87</anchor>
      <arglist>(int sectionsToShow=(showAlphaChannel|showColourAtTop|showSliders|showColourspace), int edgeGap=4, int gapAroundColourSpaceComponent=7)</arglist>
    </member>
    <member kind="function">
      <name>~ColourSelector</name>
      <anchor>ab1ea0383b709b67127afd17c8b912df3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCurrentColour</name>
      <anchor>a9f61e269c6b4c29dd5f5c139497d22f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setCurrentColour</name>
      <anchor>af0d0dddde1bd3f4cef02da005e8a62c6</anchor>
      <arglist>(const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <name>getNumSwatches</name>
      <anchor>a66475288c0a7b9325e73af07421490db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSwatchColour</name>
      <anchor>a33ee7b88d754ccb350b68ec98100c6bf</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>setSwatchColour</name>
      <anchor>a6004e7dd347d157a9f80b4d79207f526</anchor>
      <arglist>(int index, const Colour &amp;newColour) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComboBox</name>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>LabelListener</base>
    <base>AsyncUpdater</base>
    <base>Value::Listener</base>
    <filename>classComboBox.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>aa2eff88125f77f8e278374e716202e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>aa2eff88125f77f8e278374e716202e6ea6273f60ffa0214d402ebca64c7a5db6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>aa2eff88125f77f8e278374e716202e6ea9dadb9138921557c1f5cb21f6b9ce861</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utlineColourId</name>
      <anchor>aa2eff88125f77f8e278374e716202e6ea647eb96fb5883a2fa7807c53daeb9eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uttonColourId</name>
      <anchor>aa2eff88125f77f8e278374e716202e6ea7266326d0ef0fe7fe4df8519ce695022</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rrowColourId</name>
      <anchor>aa2eff88125f77f8e278374e716202e6ea784b5c333839f9cfc0b6e890f1c2ef66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ComboBox</name>
      <anchor>ae8a4587f845b9f2647c6b8b3d93b3af0</anchor>
      <arglist>(const String &amp;componentName)</arglist>
    </member>
    <member kind="function">
      <name>~ComboBox</name>
      <anchor>ad8cf2a05b0649c54dd9dd9b6577112a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setEditableText</name>
      <anchor>af11edea3da851e2e0cb231f2cffa57aa</anchor>
      <arglist>(bool isEditable)</arglist>
    </member>
    <member kind="function">
      <name>isTextEditable</name>
      <anchor>a872214a7c0713042140be017a188ac2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setJustificationType</name>
      <anchor>a7cdd4e03906d87482127980a682c49ad</anchor>
      <arglist>(const Justification &amp;justification)</arglist>
    </member>
    <member kind="function">
      <name>getJustificationType</name>
      <anchor>a4bec8d2beb850d21d2aa90b1b16e16a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>a37491da45f1cbb74e47f145e5664d8bf</anchor>
      <arglist>(const String &amp;newItemText, int newItemId)</arglist>
    </member>
    <member kind="function">
      <name>addSeparator</name>
      <anchor>af53bb419bb136f11f6f0342702d8d902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addSectionHeading</name>
      <anchor>ad376928ef517800c42628399e1a80990</anchor>
      <arglist>(const String &amp;headingName)</arglist>
    </member>
    <member kind="function">
      <name>setItemEnabled</name>
      <anchor>ad2a408f7f2a4318f66b7a6ae566dfab2</anchor>
      <arglist>(int itemId, bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <name>changeItemText</name>
      <anchor>a760da2c5b9d0113fb040666cc92ccace</anchor>
      <arglist>(int itemId, const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a912a207572dd7dd68314041999345d48</anchor>
      <arglist>(bool dontSendChangeMessage=false)</arglist>
    </member>
    <member kind="function">
      <name>getNumItems</name>
      <anchor>aeb7a778e47f42b087128edb9c6c819e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getItemText</name>
      <anchor>aca83ebbf53cbacd3aa9d3f45ba9cee6e</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getItemId</name>
      <anchor>ae85a24fbd5145722929695e93e1d0c8b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>indexOfItemId</name>
      <anchor>a3579d8490947ed3baefb46b992b8f417</anchor>
      <arglist>(int itemId) const </arglist>
    </member>
    <member kind="function">
      <name>getSelectedId</name>
      <anchor>a01b42978b3f9658dc5a2497f0fe2fecc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSelectedIdAsValue</name>
      <anchor>a6b2df5f3b5615e5b0f5af969f44c2e19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSelectedId</name>
      <anchor>a9bde594c2f233813ac0ffd881f9ad00d</anchor>
      <arglist>(int newItemId, bool dontSendChangeMessage=false)</arglist>
    </member>
    <member kind="function">
      <name>getSelectedItemIndex</name>
      <anchor>a832bec23316a888a0739a7fe2584b254</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setSelectedItemIndex</name>
      <anchor>a75623842f7dba08749074e3665f807f1</anchor>
      <arglist>(int newItemIndex, bool dontSendChangeMessage=false)</arglist>
    </member>
    <member kind="function">
      <name>getText</name>
      <anchor>aad0b5d5344f5f7cdd9f27a87eb540d2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>a6d0aa74f0160c082e753216e5e81974d</anchor>
      <arglist>(const String &amp;newText, bool dontSendChangeMessage=false)</arglist>
    </member>
    <member kind="function">
      <name>showEditor</name>
      <anchor>a4076d1c2a333f66e380e8614ea95000a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>aae1ff45cfa2bc042e9573c33f3ea0ffb</anchor>
      <arglist>(ComboBoxListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>a96989bc5f1511bfdcfa3058074a6e56d</anchor>
      <arglist>(ComboBoxListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>setTextWhenNothingSelected</name>
      <anchor>aa06d9e5b0437bc1717c761e0b9df8be5</anchor>
      <arglist>(const String &amp;newMessage)</arglist>
    </member>
    <member kind="function">
      <name>getTextWhenNothingSelected</name>
      <anchor>added6a43b9e73354ed67fc96797c833f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setTextWhenNoChoicesAvailable</name>
      <anchor>aac6093916748d66bb8e83373105c0e85</anchor>
      <arglist>(const String &amp;newMessage)</arglist>
    </member>
    <member kind="function">
      <name>getTextWhenNoChoicesAvailable</name>
      <anchor>ad71fcceaf7e8246172eb619cb0a246d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setTooltip</name>
      <anchor>a7263a32f5aecc5c8235fe8c1829bf3ed</anchor>
      <arglist>(const String &amp;newTooltip)</arglist>
    </member>
    <member kind="function">
      <name>labelTextChanged</name>
      <anchor>a35f467619dc12110c32fb90f3e7b76ab</anchor>
      <arglist>(Label *)</arglist>
    </member>
    <member kind="function">
      <name>enablementChanged</name>
      <anchor>a9a028e1b4b7b12a4a0f4bd23aa70f820</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>a28a433a8ca53b77f62dc78827de6454e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>focusGained</name>
      <anchor>af1960aba8722335e59f9cd8474c608ad</anchor>
      <arglist>(Component::FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <name>focusLost</name>
      <anchor>acb069ee685e14066553ccc664fb82476</anchor>
      <arglist>(Component::FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <name>handleAsyncUpdate</name>
      <anchor>aef03be73c77fbf8ab124069e5b1eea29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTooltip</name>
      <anchor>a490996f39aaa32338aedbdca6df0784c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a4c198646757835ff0aafd164677924ed</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>aae36cf377d6049026484cc054522592f</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>a4383c5323875b1cefca69add629a0ce7</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>lookAndFeelChanged</name>
      <anchor>a7f9f0b0d925524d54f1365fb0264a25e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a2fe015cfca2fb1248475512607e8e2a9</anchor>
      <arglist>(Graphics &amp;)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>aea60650357ca3c2ab29cda5b72441f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyStateChanged</name>
      <anchor>a370f087c80517c4d6dc00af2c0958db6</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>a5bb86e17318c9afbe687603b7727d158</anchor>
      <arglist>(const KeyPress &amp;)</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>a76c62167633c14047c0f60f1ac8dd310</anchor>
      <arglist>(Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComboBoxListener</name>
    <filename>classComboBoxListener.html</filename>
    <member kind="function">
      <name>~ComboBoxListener</name>
      <anchor>a6a72c4f0851dc09a493bbd47b217e1a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>comboBoxChanged</name>
      <anchor>a94744bc2cdc3a8f6110524d3031c08e2</anchor>
      <arglist>(ComboBox *comboBoxThatHasChanged)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Component</name>
    <base>MouseListener</base>
    <base>MessageListener</base>
    <filename>classComponent.html</filename>
    <member kind="function">
      <name>FocusChangeType</name>
      <anchor>a7fd775ea6b1190d5d694fdffa539dfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ocusChangedByMouseClick</name>
      <anchor>a7fd775ea6b1190d5d694fdffa539dfaca350527c976c183a1543958e0698572df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ocusChangedByTabKey</name>
      <anchor>a7fd775ea6b1190d5d694fdffa539dfaca1a14be78d7c4bdf7cdd9a08100bb6a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ocusChangedDirectly</name>
      <anchor>a7fd775ea6b1190d5d694fdffa539dfacad71927268411a4afe7f75bf6034add04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Component</name>
      <anchor>a8775db6d1a2c1afc2e77cd3c8f39da6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~Component</name>
      <anchor>a2e9aa4348314d981f05f67397ad2f872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Component</name>
      <anchor>aa1c066ca71a5798ad08e93048eae295e</anchor>
      <arglist>(const String &amp;componentName)</arglist>
    </member>
    <member kind="function">
      <name>getName</name>
      <anchor>a3fe8802158ec392c50be6b5009039b07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setName</name>
      <anchor>a64d1ad9a0f8f0d1757e62ac738b36b35</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <name>isValidComponent</name>
      <anchor>a4bae7770a117316a8d6feba4f2a28829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setVisible</name>
      <anchor>ac8483af6fe4dc3254e7176df0d8e9f7a</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <name>isVisible</name>
      <anchor>acc4d058219f091612c3062106520d6ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>visibilityChanged</name>
      <anchor>a3859d7aacb18fd51b2fc3e0c51680d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isShowing</name>
      <anchor>acbbdd1274a2d0e9447e42c7ee7753dfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>fadeOutComponent</name>
      <anchor>a758efcb61dd8b929839b00f1eb80504e</anchor>
      <arglist>(int lengthOfFadeOutInMilliseconds, int deltaXToMove=0, int deltaYToMove=0, float scaleFactorAtEnd=1.0f)</arglist>
    </member>
    <member kind="function">
      <name>addToDesktop</name>
      <anchor>aceef5a4315fcfc988dad95c0be552988</anchor>
      <arglist>(int windowStyleFlags, void *nativeWindowToAttachTo=0)</arglist>
    </member>
    <member kind="function">
      <name>removeFromDesktop</name>
      <anchor>a3eb22f7e39f71fdad3e84a8700807a82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isOnDesktop</name>
      <anchor>a568d3dc29ed303043e37ad13a6a527ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getPeer</name>
      <anchor>af425f521cbdf82b13afb9f13ca0ced05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>userTriedToCloseWindow</name>
      <anchor>a543e70d5a3ff75cc3facb476f4cdb131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minimisationStateChanged</name>
      <anchor>aafbf3cf52e606a66da16ffc85acdd383</anchor>
      <arglist>(bool isNowMinimised)</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>ace6d99879585ba31a4212431d01d00f5</anchor>
      <arglist>(bool shouldAlsoGainFocus)</arglist>
    </member>
    <member kind="function">
      <name>toBack</name>
      <anchor>ae9cd68d901dd4426b27c6c40f4759d4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toBehind</name>
      <anchor>a1b0cca8b9a9fea673aefc84a42602bcd</anchor>
      <arglist>(Component *other)</arglist>
    </member>
    <member kind="function">
      <name>setAlwaysOnTop</name>
      <anchor>a9ec074c0a1a25014c235a5ebafdbaaf7</anchor>
      <arglist>(bool shouldStayOnTop)</arglist>
    </member>
    <member kind="function">
      <name>isAlwaysOnTop</name>
      <anchor>afae5ae4e72709140d6b25c636e56fa5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getX</name>
      <anchor>ad32e5bee263a70375790d98765afd32d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getY</name>
      <anchor>a1aa2f325455067e23d91f8bb7ca3f822</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getWidth</name>
      <anchor>a3d7d25b675de52cec6e28837422da91f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHeight</name>
      <anchor>aae1815d74d494f347f8e3acfd830abba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRight</name>
      <anchor>a7f7fa5a47c7fe465d10fabdcc743f791</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>a325d93a9e5febea37b2f4ffb43e47998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBottom</name>
      <anchor>aa79fafbe36808040cd5b63015527d42c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBounds</name>
      <anchor>af57e0c8b673ecf5b0086683dda874825</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLocalBounds</name>
      <anchor>a49abe2883799065149ef88b559c64062</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getVisibleArea</name>
      <anchor>aa37c12fd9df7c9ba83f70008726acb72</anchor>
      <arglist>(RectangleList &amp;result, bool includeSiblings) const </arglist>
    </member>
    <member kind="function">
      <name>getScreenX</name>
      <anchor>a0a6907c2907bab645de49c096c00fd50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getScreenY</name>
      <anchor>a9d3bf0e97527b4fcdb6d0593b191c9d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getScreenPosition</name>
      <anchor>ab22d12a267d481abd8c1a0b0c243f111</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getScreenBounds</name>
      <anchor>aa681e5780082b8c609c25cd3e5d5ad29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>relativePositionToGlobal</name>
      <anchor>ad9156992e816cee8cbbf2ff4bf53757a</anchor>
      <arglist>(const Point&lt; int &gt; &amp;relativePosition) const </arglist>
    </member>
    <member kind="function">
      <name>globalPositionToRelative</name>
      <anchor>aed62a2a8d8aacd47fa2c511503c69388</anchor>
      <arglist>(const Point&lt; int &gt; &amp;screenPosition) const </arglist>
    </member>
    <member kind="function">
      <name>relativePositionToOtherComponent</name>
      <anchor>a033e63504cb96aa52cd25c04e8a0de66</anchor>
      <arglist>(const Component *targetComponent, const Point&lt; int &gt; &amp;positionRelativeToThis) const </arglist>
    </member>
    <member kind="function">
      <name>setTopLeftPosition</name>
      <anchor>a46f3b243e2ff2d000285c8642be7ea0a</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>setTopRightPosition</name>
      <anchor>a28d61a4aea9791ab0b4d3cc4bed17650</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>setSize</name>
      <anchor>af7e0443344448fcbbefc2b3dd985e43f</anchor>
      <arglist>(int newWidth, int newHeight)</arglist>
    </member>
    <member kind="function">
      <name>setBounds</name>
      <anchor>a64cbeee83a441e20ed5e7acb600ae107</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>setBounds</name>
      <anchor>aaddf6f72515109d53cb671d5292bea3f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <name>setBoundsRelative</name>
      <anchor>a8752a76d1d0b2b27af1da1169ed5c534</anchor>
      <arglist>(float proportionalX, float proportionalY, float proportionalWidth, float proportionalHeight)</arglist>
    </member>
    <member kind="function">
      <name>setBoundsInset</name>
      <anchor>a1e5f4be57a3fde9d97a7ce71cfabcf00</anchor>
      <arglist>(const BorderSize &amp;borders)</arglist>
    </member>
    <member kind="function">
      <name>setBoundsToFit</name>
      <anchor>a6567edeb944fb61372d6ddd039707997</anchor>
      <arglist>(int x, int y, int width, int height, const Justification &amp;justification, bool onlyReduceInSize)</arglist>
    </member>
    <member kind="function">
      <name>setCentrePosition</name>
      <anchor>ada48e2fac4a8bd49ee8fe567309e41b0</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>setCentreRelative</name>
      <anchor>ad2d539dc4d5a43cf828e03ab46f0db58</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>centreWithSize</name>
      <anchor>abb58dc5a1f89822e4a5dcae2a538a8a7</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>proportionOfWidth</name>
      <anchor>a873e5117b6510e2c0f425de38879e2b6</anchor>
      <arglist>(float proportion) const </arglist>
    </member>
    <member kind="function">
      <name>proportionOfHeight</name>
      <anchor>a3eb6fa5f7c80b1b6d1b9708391c902aa</anchor>
      <arglist>(float proportion) const </arglist>
    </member>
    <member kind="function">
      <name>getParentWidth</name>
      <anchor>a7417f57adb70ada3af2ceb121fb635a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getParentHeight</name>
      <anchor>a90895f64889da14f5a2eb6200004efb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getParentMonitorArea</name>
      <anchor>a7d4b76eef2441c9d3970380851f6a4ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumChildComponents</name>
      <anchor>ac68d41c407f488bb013217e2a2d1a543</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getChildComponent</name>
      <anchor>ade21d3ba9a9a328d01149cf5be9da3d6</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getIndexOfChildComponent</name>
      <anchor>affc9c62f1592c89ceae6f3c3f9121079</anchor>
      <arglist>(const Component *child) const </arglist>
    </member>
    <member kind="function">
      <name>addChildComponent</name>
      <anchor>a3340a63ebd9f3a9df41bc0e8fbe3bf0c</anchor>
      <arglist>(Component *child, int zOrder=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>addAndMakeVisible</name>
      <anchor>a909c90277e8e95db68001a94e06b83bc</anchor>
      <arglist>(Component *child, int zOrder=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>removeChildComponent</name>
      <anchor>a221324c67c9fb048895b8730dbf1b642</anchor>
      <arglist>(Component *childToRemove)</arglist>
    </member>
    <member kind="function">
      <name>removeChildComponent</name>
      <anchor>a9f27c66bb660ca98e1713878db39bdfd</anchor>
      <arglist>(int childIndexToRemove)</arglist>
    </member>
    <member kind="function">
      <name>removeAllChildren</name>
      <anchor>a72ee4d44ce3b3954e8a00e5225201b6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deleteAllChildren</name>
      <anchor>abc8f8338a400c20d5e941ea3a1f67f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getParentComponent</name>
      <anchor>aeecebf6cd59a29925f4c8539e6e90fb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>findParentComponentOfClass</name>
      <anchor>a85d37f71912144cebdce7c8375a3a7fe</anchor>
      <arglist>(TargetClass *const dummyParameter=0) const </arglist>
    </member>
    <member kind="function">
      <name>getTopLevelComponent</name>
      <anchor>ab0435d6508858711baecd7fbaa818ae7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isParentOf</name>
      <anchor>a13776b65aeb6a6067efc4ac90ce78a45</anchor>
      <arglist>(const Component *possibleChild) const </arglist>
    </member>
    <member kind="function">
      <name>parentHierarchyChanged</name>
      <anchor>a83f298a05d7f26a6e50e45dd37eb6313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>childrenChanged</name>
      <anchor>a2bbc6da3479a1c3f6e711f4caf9edafb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hitTest</name>
      <anchor>a2da9631236e1cbf1b340454209a6c9e0</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>setInterceptsMouseClicks</name>
      <anchor>af43dcbd601d0a6759dac2f47414f4ff0</anchor>
      <arglist>(bool allowClicksOnThisComponent, bool allowClicksOnChildComponents)</arglist>
    </member>
    <member kind="function">
      <name>getInterceptsMouseClicks</name>
      <anchor>a895b0fa69c5e3556ac155eacc68d5f49</anchor>
      <arglist>(bool &amp;allowsClicksOnThisComponent, bool &amp;allowsClicksOnChildComponents) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>ab64fb4163a0079d87c6c1eba1c727065</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>reallyContains</name>
      <anchor>a9e5a0df29db568f5e6f99ecee22bcf77</anchor>
      <arglist>(int x, int y, bool returnTrueIfWithinAChild)</arglist>
    </member>
    <member kind="function">
      <name>getComponentAt</name>
      <anchor>a29245735a161cee86ee0df0ccde9512a</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>getComponentAt</name>
      <anchor>af79544a2eac9483587fe98202af450ea</anchor>
      <arglist>(const Point&lt; int &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>af3ab3eabec93dd60faf983370f3a1206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>af2a079621367cdf3755d708b4dbbc820</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>setBufferedToImage</name>
      <anchor>af19bbc2186e3297ddd55c328e46c014b</anchor>
      <arglist>(bool shouldBeBuffered)</arglist>
    </member>
    <member kind="function">
      <name>createComponentSnapshot</name>
      <anchor>a93defa131aa295339c9096e37258f5bd</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;areaToGrab, bool clipImageToComponentBounds=true)</arglist>
    </member>
    <member kind="function">
      <name>paintEntireComponent</name>
      <anchor>a295d906eeb3c8e5ff9cfaad130d6af00</anchor>
      <arglist>(Graphics &amp;context)</arglist>
    </member>
    <member kind="function">
      <name>setComponentEffect</name>
      <anchor>a06800d0a55016e738c55078d82ef49fd</anchor>
      <arglist>(ImageEffectFilter *newEffect)</arglist>
    </member>
    <member kind="function">
      <name>getComponentEffect</name>
      <anchor>a65fe5f6eb833f52bf00dc4226a3a02ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLookAndFeel</name>
      <anchor>ab264088240396560023413bb44d3898f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setLookAndFeel</name>
      <anchor>a6f2c10cd9840844a5be16e5deeef6f50</anchor>
      <arglist>(LookAndFeel *newLookAndFeel)</arglist>
    </member>
    <member kind="function">
      <name>lookAndFeelChanged</name>
      <anchor>a74af5830b815f6f985768a5673d01cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sendLookAndFeelChange</name>
      <anchor>ac314d2449213d7942eca083addfcd097</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setOpaque</name>
      <anchor>a7320d543cba40183c894474ab78798ea</anchor>
      <arglist>(bool shouldBeOpaque)</arglist>
    </member>
    <member kind="function">
      <name>isOpaque</name>
      <anchor>acd57e902bd94d687f6536ea7dcb0dceb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setBroughtToFrontOnMouseClick</name>
      <anchor>a88532912b0e6a4aaa5fcd026ab0b053e</anchor>
      <arglist>(bool shouldBeBroughtToFront)</arglist>
    </member>
    <member kind="function">
      <name>isBroughtToFrontOnMouseClick</name>
      <anchor>a2e05ad20e961311dce725d7d46847c51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setWantsKeyboardFocus</name>
      <anchor>aaada167b0a8f7025bf2dcb5081f2b310</anchor>
      <arglist>(bool wantsFocus)</arglist>
    </member>
    <member kind="function">
      <name>getWantsKeyboardFocus</name>
      <anchor>a381353118ef3a7930a19f3b024e0b36e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setMouseClickGrabsKeyboardFocus</name>
      <anchor>aef56d616cefe6e21a6373d8a30d2108a</anchor>
      <arglist>(const bool shouldGrabFocus)</arglist>
    </member>
    <member kind="function">
      <name>getMouseClickGrabsKeyboardFocus</name>
      <anchor>ac113de298d39097983af06e8e76aa3b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>grabKeyboardFocus</name>
      <anchor>a91886a0e276d27719fa8866a95306571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasKeyboardFocus</name>
      <anchor>af4f079e1c0e0140ac364561cbe458a20</anchor>
      <arglist>(bool trueIfChildIsFocused) const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentlyFocusedComponent</name>
      <anchor>a11dc616ab940612d0056e77cd463c181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>moveKeyboardFocusToSibling</name>
      <anchor>a2be625dadff73d1ec003cb06749ba6d6</anchor>
      <arglist>(bool moveToNext)</arglist>
    </member>
    <member kind="function">
      <name>createFocusTraverser</name>
      <anchor>a7826c4e247eb6a6901211741a3e1dca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getExplicitFocusOrder</name>
      <anchor>af86bf43fd37ca2592cf8b482cd65f901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setExplicitFocusOrder</name>
      <anchor>acea5b1758143ff5815fd13ae57f2172e</anchor>
      <arglist>(int newFocusOrderIndex)</arglist>
    </member>
    <member kind="function">
      <name>setFocusContainer</name>
      <anchor>ab4a09fddbf6e312eea667d58b82f1f0c</anchor>
      <arglist>(bool shouldBeFocusContainer)</arglist>
    </member>
    <member kind="function">
      <name>isFocusContainer</name>
      <anchor>a8854e658d35810f13113f14e6c343262</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isEnabled</name>
      <anchor>aaefe49f2fdab4cf9011b87e802aa3f30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setEnabled</name>
      <anchor>a6f956f690d72256838146c7dfe99bc0e</anchor>
      <arglist>(bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <name>enablementChanged</name>
      <anchor>a8e5e39d3d7e2b8be4e78454ec4a5f584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMouseCursor</name>
      <anchor>ab8c631fc3fb881ca94a9b7edcf58636f</anchor>
      <arglist>(const MouseCursor &amp;cursorType)</arglist>
    </member>
    <member kind="function">
      <name>getMouseCursor</name>
      <anchor>ab2b54bc00e2cdf33ddafba8f45937513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updateMouseCursor</name>
      <anchor>a03057aba4ac79272f105e8839582309c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a7cf1862f4af5909ea72827898114a182</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>paintOverChildren</name>
      <anchor>aa15dc77c06b5a0a4192090b4a323f79c</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>mouseMove</name>
      <anchor>acddd6aab4cdf5ab3719cee37cc719705</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseEnter</name>
      <anchor>a335d0fe3153768962c91c91f38e6e520</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseExit</name>
      <anchor>a8ff908bac1010d29335d391279824cc9</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>aba7f25d9b0dc026fe5e99be03ebe7818</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>a278d48430f7a5b97086276d76144f6c2</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>acd76ad602a226a8bcab9a1edd33742cf</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDoubleClick</name>
      <anchor>a0f0fb18dd076ada3b720bf6e6ea652a9</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseWheelMove</name>
      <anchor>abcffdc4b8deb3b985f76f42039f54a56</anchor>
      <arglist>(const MouseEvent &amp;e, float wheelIncrementX, float wheelIncrementY)</arglist>
    </member>
    <member kind="function">
      <name>beginDragAutoRepeat</name>
      <anchor>a3dd44b1040ff64ffd4b3d10032069247</anchor>
      <arglist>(int millisecondIntervalBetweenCallbacks)</arglist>
    </member>
    <member kind="function">
      <name>setRepaintsOnMouseActivity</name>
      <anchor>a1f95bdd6569cdd566d5bb13ae6b045d5</anchor>
      <arglist>(bool shouldRepaint)</arglist>
    </member>
    <member kind="function">
      <name>addMouseListener</name>
      <anchor>ae45db6bb7d7826eb7e936c21fec105ce</anchor>
      <arglist>(MouseListener *newListener, bool wantsEventsForAllNestedChildComponents)</arglist>
    </member>
    <member kind="function">
      <name>removeMouseListener</name>
      <anchor>a423c89ca5c8622712202c30cb7a5a69c</anchor>
      <arglist>(MouseListener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <name>addKeyListener</name>
      <anchor>a4ec1b609c39c54434f746cefffa6ce3f</anchor>
      <arglist>(KeyListener *newListener)</arglist>
    </member>
    <member kind="function">
      <name>removeKeyListener</name>
      <anchor>a5287496e233768c197ad8d74484a85fc</anchor>
      <arglist>(KeyListener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>ab063a5c631854864da09106abec78a86</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>keyStateChanged</name>
      <anchor>aeff4d2fdbae4d5974e43b62ab3c304f9</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function">
      <name>modifierKeysChanged</name>
      <anchor>a4145c1c28dd2ae42b19c9c3e0a6aba7b</anchor>
      <arglist>(const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>focusGained</name>
      <anchor>a408d41f1499a2ebdd4bbc8d4004c7727</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <name>focusLost</name>
      <anchor>a36456ea9d5a14172d6e96527ec1f59c8</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <name>focusOfChildComponentChanged</name>
      <anchor>a67ef76b8080b9abb7efa0df358598a01</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <name>isMouseOver</name>
      <anchor>a2dbc38be33c9cb8ee38259aad901f7f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isMouseButtonDown</name>
      <anchor>a0944e1751f32260afd5bd2a9fcd1a5b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isMouseOverOrDragging</name>
      <anchor>a5cedb030a2bfae99dece95d8a10d0dcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isMouseButtonDownAnywhere</name>
      <anchor>a2a00cbd5b98634dd7736af8c6c20164f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getMouseXYRelative</name>
      <anchor>a39e28c19ba6dd4bb71e174739717b0af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>ad896183a68d71daf5816982d1fefd960</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>moved</name>
      <anchor>a1b94f2816dc8bc20473620e0db0e8246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>childBoundsChanged</name>
      <anchor>a081b2618e5169d656167614bee91defe</anchor>
      <arglist>(Component *child)</arglist>
    </member>
    <member kind="function">
      <name>parentSizeChanged</name>
      <anchor>aefdce73a764c48363e82b22c32b0812e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>broughtToFront</name>
      <anchor>a4bf084bcf5b0e4398ee3a0007f803865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addComponentListener</name>
      <anchor>a51cb09159299964cef7b975185cf400d</anchor>
      <arglist>(ComponentListener *newListener)</arglist>
    </member>
    <member kind="function">
      <name>removeComponentListener</name>
      <anchor>a7a74ad0359e05321223f1d09bcfddddd</anchor>
      <arglist>(ComponentListener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <name>postCommandMessage</name>
      <anchor>a005628ba100dc23d179bff98bd419eb5</anchor>
      <arglist>(int commandId)</arglist>
    </member>
    <member kind="function">
      <name>handleCommandMessage</name>
      <anchor>a9ba6fa31d1397c7e90050b2cd4f2089b</anchor>
      <arglist>(int commandId)</arglist>
    </member>
    <member kind="function">
      <name>runModalLoop</name>
      <anchor>a363364f6ae4f1a20abd60493c6854829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enterModalState</name>
      <anchor>ab4261499c3fa460d81041f3a683eb253</anchor>
      <arglist>(bool takeKeyboardFocus=true)</arglist>
    </member>
    <member kind="function">
      <name>exitModalState</name>
      <anchor>a686e2440370ff4a97c7a7851907be650</anchor>
      <arglist>(int returnValue)</arglist>
    </member>
    <member kind="function">
      <name>isCurrentlyModal</name>
      <anchor>a482a4e37da2c9d6d82841cced38180cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumCurrentlyModalComponents</name>
      <anchor>a6da606f433917fc6aa0f2bbd34d59f1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCurrentlyModalComponent</name>
      <anchor>ad9e5975f4ec2ce3a6fec4a6d3bc43daa</anchor>
      <arglist>(int index=0)</arglist>
    </member>
    <member kind="function">
      <name>isCurrentlyBlockedByAnotherModalComponent</name>
      <anchor>ad18ec802aa575cf016a7c62f12e0edf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>canModalEventBeSentToComponent</name>
      <anchor>abec1d60cfacf16eab602dff06932fbca</anchor>
      <arglist>(const Component *targetComponent)</arglist>
    </member>
    <member kind="function">
      <name>inputAttemptWhenModal</name>
      <anchor>a260e46fb72d4b3210bc46a658a21fbb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getProperties</name>
      <anchor>a51d8a66c97c946cb0f988d889fe6963f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getProperties</name>
      <anchor>a6e959863ba480927b119d91ec25950cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>findColour</name>
      <anchor>a8ee1c94b5d6e60440eafb4ef861e7bae</anchor>
      <arglist>(int colourId, bool inheritFromParent=false) const </arglist>
    </member>
    <member kind="function">
      <name>setColour</name>
      <anchor>afab36809574d5a4d17f1b9da3d804a3b</anchor>
      <arglist>(int colourId, const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <name>removeColour</name>
      <anchor>a7c3179a6a241477c590ea23ff99e867d</anchor>
      <arglist>(int colourId)</arglist>
    </member>
    <member kind="function">
      <name>isColourSpecified</name>
      <anchor>a499f4e75a4c8b7fcc2aded220ca68769</anchor>
      <arglist>(int colourId) const </arglist>
    </member>
    <member kind="function">
      <name>copyAllExplicitColoursTo</name>
      <anchor>ad359c5a74a8f05c37418d169beae95ce</anchor>
      <arglist>(Component &amp;target) const </arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>adfab11b32c622b327a823c6565f637f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getWindowHandle</name>
      <anchor>a0d340d822e9a91fc665d73bbe1e91d72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getComponentUID</name>
      <anchor>a9666c647a24722ac8ebdb3d1a6cf4210</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>internalRepaint</name>
      <anchor>a4c1cffb7551cb415f64b4d192db156ab</anchor>
      <arglist>(int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>createNewPeer</name>
      <anchor>aa2418217c3e35113785ad11e4372c2d4</anchor>
      <arglist>(int styleFlags, void *nativeWindowToAttachTo)</arglist>
    </member>
    <member kind="function">
      <name>handleMessage</name>
      <anchor>a9ec86f8fbcf630e9846b93b2ce67468b</anchor>
      <arglist>(const Message &amp;)</arglist>
    </member>
    <member kind="function">
      <name>componentFlags_</name>
      <anchor>a2b5662f0de1a0a8dc11e2262d5d85870</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>flags</name>
      <anchor>aa12eb56fb4a7fecb3aff0628bda40c6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Component::BailOutChecker</name>
    <filename>classComponent_1_1BailOutChecker.html</filename>
    <member kind="function">
      <name>BailOutChecker::BailOutChecker</name>
      <anchor>a4e63f3b75f0c8ac8b8ade4190a355ca7</anchor>
      <arglist>(Component *component1, Component *component2=0)</arglist>
    </member>
    <member kind="function">
      <name>BailOutChecker::shouldBailOut</name>
      <anchor>a9d1684d857003445c56550713fb8287e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Component::SafePointer</name>
    <base>ComponentListener</base>
    <filename>classComponent_1_1SafePointer.html</filename>
    <member kind="function">
      <name>SafePointer::SafePointer</name>
      <anchor>af352a55785df1ed6c84bda79dacf1755</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SafePointer::SafePointer</name>
      <anchor>a59adeff87298df1cff664b308d5143de</anchor>
      <arglist>(ComponentType *const component)</arglist>
    </member>
    <member kind="function">
      <name>SafePointer::SafePointer</name>
      <anchor>a1bb9d434e6a3179cec0985aa52807263</anchor>
      <arglist>(const SafePointer &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>SafePointer::~SafePointer</name>
      <anchor>a51efecbf5dfb9c3739c5a02d62bffc1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SafePointer::operator=</name>
      <anchor>a24d69c4ba84c89d69ed272f85b748989</anchor>
      <arglist>(const SafePointer &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>SafePointer::operator=</name>
      <anchor>ab2c0a96de8f795edc4c390f98e597723</anchor>
      <arglist>(ComponentType *const newComponent)</arglist>
    </member>
    <member kind="function">
      <name>SafePointer::operator ComponentType *</name>
      <anchor>a092440f67f71d8a88cee30c5817d5921</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>SafePointer::getComponent</name>
      <anchor>acbeccca34d8b82b4cf42e298c32fc7aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>SafePointer::operator&amp;#45;&gt;</name>
      <anchor>ad5a85508459a37f503d6303f47350a3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SafePointer::operator&amp;#45;&gt;</name>
      <anchor>a6b6961e402b3cd70d722a413f0181fbe</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentAnimator</name>
    <base>ChangeBroadcaster</base>
    <base>Timer</base>
    <filename>classComponentAnimator.html</filename>
    <member kind="function">
      <name>ComponentAnimator</name>
      <anchor>a2252fed7a4a6de4df683912ef2786d4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ComponentAnimator</name>
      <anchor>a03ba19fcba41474d165889cb8f04bd85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>animateComponent</name>
      <anchor>a5d8aeedd6b665715805e2305ca28ebf0</anchor>
      <arglist>(Component *component, const Rectangle&lt; int &gt; &amp;finalPosition, int millisecondsToSpendMoving, double startSpeed=1.0, double endSpeed=1.0)</arglist>
    </member>
    <member kind="function">
      <name>cancelAnimation</name>
      <anchor>a7ded366b9b6dc3c6351b716c60e7f390</anchor>
      <arglist>(Component *component, bool moveComponentToItsFinalPosition)</arglist>
    </member>
    <member kind="function">
      <name>cancelAllAnimations</name>
      <anchor>a1a6fab0501e0e4db7ad22a57780951e5</anchor>
      <arglist>(bool moveComponentsToTheirFinalPositions)</arglist>
    </member>
    <member kind="function">
      <name>getComponentDestination</name>
      <anchor>a13cb230b3a44335bb87801e6a99777ff</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <name>isAnimating</name>
      <anchor>a65c0a554f9f7614625913137772b2e20</anchor>
      <arglist>(Component *component) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentBoundsConstrainer</name>
    <filename>classComponentBoundsConstrainer.html</filename>
    <member kind="function">
      <name>ComponentBoundsConstrainer</name>
      <anchor>ac1d87f43958cf2055762377d446d7c19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ComponentBoundsConstrainer</name>
      <anchor>ae4a71b7679b7a8a97365b4756f1be737</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMinimumWidth</name>
      <anchor>a91f9be3dec21c203dc5cc6707e2dc8fc</anchor>
      <arglist>(int minimumWidth)</arglist>
    </member>
    <member kind="function">
      <name>getMinimumWidth</name>
      <anchor>a024bb029b7fd569ec9217588c29d587a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setMaximumWidth</name>
      <anchor>a1ab964a74a071f210d692a43abdc76cf</anchor>
      <arglist>(int maximumWidth)</arglist>
    </member>
    <member kind="function">
      <name>getMaximumWidth</name>
      <anchor>a5d20240200944c90171c692f6d384d30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setMinimumHeight</name>
      <anchor>a87638de3a4bf12a76af8b9a1979c97e5</anchor>
      <arglist>(int minimumHeight)</arglist>
    </member>
    <member kind="function">
      <name>getMinimumHeight</name>
      <anchor>a02f9165dd17f12c1412bdc0a8c88af3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setMaximumHeight</name>
      <anchor>aaaeaac36be46c4ad9e3aaa147da35777</anchor>
      <arglist>(int maximumHeight)</arglist>
    </member>
    <member kind="function">
      <name>getMaximumHeight</name>
      <anchor>afaf7de6b6b232a9291a486862eb46dd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setMinimumSize</name>
      <anchor>a6d1c462bf08b8f32a4041351e6f8fd0a</anchor>
      <arglist>(int minimumWidth, int minimumHeight)</arglist>
    </member>
    <member kind="function">
      <name>setMaximumSize</name>
      <anchor>a6c0f2398e52e7ee9f18848974944352e</anchor>
      <arglist>(int maximumWidth, int maximumHeight)</arglist>
    </member>
    <member kind="function">
      <name>setSizeLimits</name>
      <anchor>ab56b1162908cf127c285f8ca302deb5f</anchor>
      <arglist>(int minimumWidth, int minimumHeight, int maximumWidth, int maximumHeight)</arglist>
    </member>
    <member kind="function">
      <name>setMinimumOnscreenAmounts</name>
      <anchor>a259a5349c942926bfdfd5d010535638a</anchor>
      <arglist>(int minimumWhenOffTheTop, int minimumWhenOffTheLeft, int minimumWhenOffTheBottom, int minimumWhenOffTheRight)</arglist>
    </member>
    <member kind="function">
      <name>setFixedAspectRatio</name>
      <anchor>a50a0c005d8114795cc102f3cdd530f24</anchor>
      <arglist>(double widthOverHeight)</arglist>
    </member>
    <member kind="function">
      <name>getFixedAspectRatio</name>
      <anchor>ab226f0371b394802f08b50ec62871187</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>checkBounds</name>
      <anchor>ae5de4ca69f5f0a595ca51d9354a217ab</anchor>
      <arglist>(Rectangle&lt; int &gt; &amp;bounds, const Rectangle&lt; int &gt; &amp;previousBounds, const Rectangle&lt; int &gt; &amp;limits, bool isStretchingTop, bool isStretchingLeft, bool isStretchingBottom, bool isStretchingRight)</arglist>
    </member>
    <member kind="function">
      <name>resizeStart</name>
      <anchor>a93469c13206cd1f1a8662a4d031f6efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resizeEnd</name>
      <anchor>a8e97270a714a8e9df0bbe1359388c599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBoundsForComponent</name>
      <anchor>a347006a9f0aa3cfc942c0bbb59a267a0</anchor>
      <arglist>(Component *const component, const Rectangle&lt; int &gt; &amp;bounds, bool isStretchingTop, bool isStretchingLeft, bool isStretchingBottom, bool isStretchingRight)</arglist>
    </member>
    <member kind="function">
      <name>checkComponentBounds</name>
      <anchor>a1f799af496b1658715dd34381043841b</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <name>applyBoundsToComponent</name>
      <anchor>a064cdd9798ea6a06c774fc9c554a8214</anchor>
      <arglist>(Component *component, const Rectangle&lt; int &gt; &amp;bounds)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentDragger</name>
    <filename>classComponentDragger.html</filename>
    <member kind="function">
      <name>ComponentDragger</name>
      <anchor>ac702fc282b4d5c9c059b1d5fe73a266d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ComponentDragger</name>
      <anchor>a6e2b9b526ddff35060fecdbdca4ade30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startDraggingComponent</name>
      <anchor>a80a51c673322eef9e11700c56e4a9bdf</anchor>
      <arglist>(Component *const componentToDrag, ComponentBoundsConstrainer *constrainer)</arglist>
    </member>
    <member kind="function">
      <name>dragComponent</name>
      <anchor>a6520967debb873e955079404ee8bc522</anchor>
      <arglist>(Component *const componentToDrag, const MouseEvent &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentListener</name>
    <filename>classComponentListener.html</filename>
    <member kind="function">
      <name>~ComponentListener</name>
      <anchor>ab4df3c2c42d7fdb762cef175b2e0ebe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>componentMovedOrResized</name>
      <anchor>ac5d2c3c7290cbde571403fd5d3112978</anchor>
      <arglist>(Component &amp;component, bool wasMoved, bool wasResized)</arglist>
    </member>
    <member kind="function">
      <name>componentBroughtToFront</name>
      <anchor>a68fd2e94bbac54a480ada6b0fdd3c3d4</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>componentVisibilityChanged</name>
      <anchor>aaacf63f35f26733d615be2258e57fd69</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>componentChildrenChanged</name>
      <anchor>ae03a3583fa9999dc868a2e2c5825bbc2</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>componentParentHierarchyChanged</name>
      <anchor>a84b23253fe18f447472652452b1858e6</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>componentNameChanged</name>
      <anchor>ae58c494e8e9319d18d552c82f1936336</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>componentBeingDeleted</name>
      <anchor>a948f7c07d7dabde3b6cc7a7ceac29cec</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentMovementWatcher</name>
    <base>ComponentListener</base>
    <filename>classComponentMovementWatcher.html</filename>
    <member kind="function">
      <name>ComponentMovementWatcher</name>
      <anchor>a1855ca8c74573719a4049d7b8f8033a0</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <name>~ComponentMovementWatcher</name>
      <anchor>ac330cfdf207f4d5d69abb6c1bed3b1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>componentMovedOrResized</name>
      <anchor>a8aa7d93c182f7d8d0fd07019868da887</anchor>
      <arglist>(bool wasMoved, bool wasResized)=0</arglist>
    </member>
    <member kind="function">
      <name>componentPeerChanged</name>
      <anchor>a572c2e568b9df20f1ee51f4f5d8d819f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>componentParentHierarchyChanged</name>
      <anchor>a6f30116fd82a80f6bd2af1970f85ab2a</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>componentMovedOrResized</name>
      <anchor>aea8ad8423caa9fe293c5cca2792bae1f</anchor>
      <arglist>(Component &amp;component, bool wasMoved, bool wasResized)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComponentPeer</name>
    <filename>classComponentPeer.html</filename>
    <member kind="function">
      <name>StyleFlags</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowAppearsOnTaskbar</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca99981bc182b3f9f1534008c6be93de80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowIsTemporary</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca8bb0cadf1232d3e8c8ff531c58946087</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowIgnoresMouseClicks</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcab8553607b9b28ba46dad559294b7db60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowHasTitleBar</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca071514cf5386f9ed5c544460e94737e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowIsResizable</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca3b12da2010eca8a92f6c97fad9a21a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowHasMinimiseButton</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca01571bf1cfc4e3bc17198b593e64750a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowHasMaximiseButton</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcab56ba75cd98f8e630a907c3a8a4836c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowHasCloseButton</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca71f089a2bb2af56ccc7bb3eaf0ce46a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowHasDropShadow</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcaada172d23a2b21e8c364feb52e39464b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowRepaintedExplictly</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcad4f6500107e752f57986bad17e681c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowIgnoresKeyPresses</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddca348f19f81e1e8e929e0bb9932f7007c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowIsSemiTransparent</name>
      <anchor>a94a21f91c61f8211774d6f43243a6ddcaedab89c85c7fe9b5d4c1310b34a9f792</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ComponentPeer</name>
      <anchor>a81ea849fd12c79f7cc12409fb6de1820</anchor>
      <arglist>(Component *component, int styleFlags)</arglist>
    </member>
    <member kind="function">
      <name>~ComponentPeer</name>
      <anchor>a582ed1de9b220645c16c67e0124e18e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getComponent</name>
      <anchor>aab4f98a032fb8b0124bfad5681d1558e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getStyleFlags</name>
      <anchor>a6fc641c5ab39a3ed12a7a8843bbf90ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNativeHandle</name>
      <anchor>ab873eaa1294b49c6739a04e1edc5e85e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>setVisible</name>
      <anchor>a45cdae32b498158f5a353f0382b3afa5</anchor>
      <arglist>(bool shouldBeVisible)=0</arglist>
    </member>
    <member kind="function">
      <name>setTitle</name>
      <anchor>a040f5c7bf60ea0081232888d0296fc77</anchor>
      <arglist>(const String &amp;title)=0</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>a3231325f3a9952c78db5cc1d7e585363</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>setSize</name>
      <anchor>a4fffaf4a8352a9c1f675e18df3ac8010</anchor>
      <arglist>(int w, int h)=0</arglist>
    </member>
    <member kind="function">
      <name>setBounds</name>
      <anchor>af34cd9dd16f149ef6b2270a017882998</anchor>
      <arglist>(int x, int y, int w, int h, bool isNowFullScreen)=0</arglist>
    </member>
    <member kind="function">
      <name>getBounds</name>
      <anchor>a8d2444905359e411825573eb1f251b8f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>getScreenPosition</name>
      <anchor>a91480be2d9d6c8ee1246e2e822541c9c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>relativePositionToGlobal</name>
      <anchor>a0eabb6df17395c8752a0d06ba0a55fa5</anchor>
      <arglist>(const Point&lt; int &gt; &amp;relativePosition)=0</arglist>
    </member>
    <member kind="function">
      <name>globalPositionToRelative</name>
      <anchor>a3dda4f32d86b3e4f89d78c506ceab45d</anchor>
      <arglist>(const Point&lt; int &gt; &amp;screenPosition)=0</arglist>
    </member>
    <member kind="function">
      <name>setMinimised</name>
      <anchor>aa9732a41b884d1e8021c69908ed72fdb</anchor>
      <arglist>(bool shouldBeMinimised)=0</arglist>
    </member>
    <member kind="function">
      <name>isMinimised</name>
      <anchor>a89063a1ab796e670d56ff660c3de60ed</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>setFullScreen</name>
      <anchor>ae14a735045acf686a945392d29cb1b2b</anchor>
      <arglist>(bool shouldBeFullScreen)=0</arglist>
    </member>
    <member kind="function">
      <name>isFullScreen</name>
      <anchor>a0f649966fb18d9eb06e63ce0bcddf10d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>setNonFullScreenBounds</name>
      <anchor>a34e6143041d03452c7a6ce57d4ac9127</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds)</arglist>
    </member>
    <member kind="function">
      <name>getNonFullScreenBounds</name>
      <anchor>a7c69be49ca64a685d06c97d080fc8c4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setIcon</name>
      <anchor>aea319e975bcb86e3727d3b5026ad376c</anchor>
      <arglist>(const Image &amp;newIcon)=0</arglist>
    </member>
    <member kind="function">
      <name>setConstrainer</name>
      <anchor>acd07e4b8f19e6997ce34758ae489a856</anchor>
      <arglist>(ComponentBoundsConstrainer *newConstrainer)</arglist>
    </member>
    <member kind="function">
      <name>getConstrainer</name>
      <anchor>a8eef99da8e745a767d68b255a8d7bea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>aa3245452d070f7dd7158e75058c2f638</anchor>
      <arglist>(const Point&lt; int &gt; &amp;position, bool trueIfInAChildWindow) const =0</arglist>
    </member>
    <member kind="function">
      <name>getFrameSize</name>
      <anchor>aba936b9c29a0bb60c2872121406ce110</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>handleMovedOrResized</name>
      <anchor>a8fb507144ba1144b75b63da1075807b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleScreenSizeChange</name>
      <anchor>af48a633cf307507b71df1f880098ce85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handlePaint</name>
      <anchor>a360713977c8a8d38657247b16ff4e836</anchor>
      <arglist>(LowLevelGraphicsContext &amp;contextToPaintTo)</arglist>
    </member>
    <member kind="function">
      <name>setAlwaysOnTop</name>
      <anchor>a0ddc8883fd6b5ece98fb422730bc3fe7</anchor>
      <arglist>(bool alwaysOnTop)=0</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>a4e96a24cccbd4f86da8d988d9901615f</anchor>
      <arglist>(bool makeActive)=0</arglist>
    </member>
    <member kind="function">
      <name>toBehind</name>
      <anchor>afd04fab397a9c85cb7251582d9c6b461</anchor>
      <arglist>(ComponentPeer *other)=0</arglist>
    </member>
    <member kind="function">
      <name>handleBroughtToFront</name>
      <anchor>a8f451c2a22a1696443ab724fa62b9708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isFocused</name>
      <anchor>a86c19e5dcdc7fbeb932351af522512dd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>grabFocus</name>
      <anchor>a2a90a97e43c8ac0b98ea1151f8fde316</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>textInputRequired</name>
      <anchor>a82515329f9fa90587531439e4d481abd</anchor>
      <arglist>(const Point&lt; int &gt; &amp;position)=0</arglist>
    </member>
    <member kind="function">
      <name>handleFocusGain</name>
      <anchor>a7f0f1bf14f3ad8df8372352804d1c54d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleFocusLoss</name>
      <anchor>a9d14cc3ce5afb95b4d8b62b90dbca46e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getLastFocusedSubcomponent</name>
      <anchor>ab727b84867cfb235f9c236ba804fec89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>handleKeyPress</name>
      <anchor>ac03f1b3bf45aebeca5f45799b1647d59</anchor>
      <arglist>(int keyCode, juce_wchar textCharacter)</arglist>
    </member>
    <member kind="function">
      <name>handleKeyUpOrDown</name>
      <anchor>a100869544b69c072622bee3015202368</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function">
      <name>handleModifierKeysChange</name>
      <anchor>af53ee9f555184174fcbdacafa07588fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>findCurrentTextInputTarget</name>
      <anchor>a85355b1df4c5e7fa8692c7a3ede22d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>a30e93d1c738db132f671321a3ffd8831</anchor>
      <arglist>(int x, int y, int w, int h)=0</arglist>
    </member>
    <member kind="function">
      <name>performAnyPendingRepaintsNow</name>
      <anchor>af6d87781bea23f08e8f413a2fd772506</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>handleMouseEvent</name>
      <anchor>a523ce64402f640acad96c4db22fee84c</anchor>
      <arglist>(int touchIndex, const Point&lt; int &gt; &amp;positionWithinPeer, const ModifierKeys &amp;newMods, int64 time)</arglist>
    </member>
    <member kind="function">
      <name>handleMouseWheel</name>
      <anchor>a74d390c3ec99a4f67ad99262b18274be</anchor>
      <arglist>(int touchIndex, const Point&lt; int &gt; &amp;positionWithinPeer, int64 time, float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>handleUserClosingWindow</name>
      <anchor>a13b9987266c93f3e73148c7c3e83da64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleFileDragMove</name>
      <anchor>ad6542458f387ab535a23a77b13b8e2dd</anchor>
      <arglist>(const StringArray &amp;files, const Point&lt; int &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <name>handleFileDragExit</name>
      <anchor>aeee441dca02ffcb277f85e3bc4eb0788</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function">
      <name>handleFileDragDrop</name>
      <anchor>a35b520b79d8e3358ba5604d391431934</anchor>
      <arglist>(const StringArray &amp;files, const Point&lt; int &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <name>clearMaskedRegion</name>
      <anchor>acf449581016f67b01b9cb5c152e7a2ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addMaskedRegion</name>
      <anchor>ac3134a494fe5221fd714ad3be768fd24</anchor>
      <arglist>(int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>getNumPeers</name>
      <anchor>a01ce54a46cd71755070f1005856b42fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPeer</name>
      <anchor>a0f3ce2faf9f2814fb5c8e958796a984c</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>isValidPeer</name>
      <anchor>ada1b03b7bd7d359ad297fa52b375bff2</anchor>
      <arglist>(const ComponentPeer *peer)</arglist>
    </member>
    <member kind="function">
      <name>bringModalComponentToFront</name>
      <anchor>a4fadd9b7361821f7ba0d4291bec47712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getAvailableRenderingEngines</name>
      <anchor>a7c5af21c05d9cfd6e433cb708e828f18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCurrentRenderingEngine</name>
      <anchor>adad17e508c3bb7703e733fb75be90b19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCurrentRenderingEngine</name>
      <anchor>a44614a1572c6c8860821f3ab5db12ea5</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>updateCurrentModifiers</name>
      <anchor>ae42c7ac26e75c65d9b61ee406a7e9cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>component</name>
      <anchor>a964794337b7b639b52be0827f74394c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>styleFlags</name>
      <anchor>a8322b7cdb134bc52f443cd587ffc3f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>maskedRegion</name>
      <anchor>a3395d1d6b50bff458d288d6bab251859</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lastNonFullscreenBounds</name>
      <anchor>a2aee1a16331876b88555838cd75caeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lastPaintTime</name>
      <anchor>ad6426137107729ca4ef5bb9532929922</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>constrainer</name>
      <anchor>a75216f7f562c5bbf8b7758a1198d2744</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComSmartPtr</name>
    <filename>classComSmartPtr.html</filename>
    <member kind="function">
      <name>ComSmartPtr</name>
      <anchor>a540e2ff1edb21e2b46da54cb0ebc99eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ComSmartPtr</name>
      <anchor>a6375e399f707101d1a661acc783f63ea</anchor>
      <arglist>(T *const p_)</arglist>
    </member>
    <member kind="function">
      <name>ComSmartPtr</name>
      <anchor>aa0d41a4d66fe7418143863e68273b878</anchor>
      <arglist>(const ComSmartPtr&lt; T &gt; &amp;p_)</arglist>
    </member>
    <member kind="function">
      <name>~ComSmartPtr</name>
      <anchor>a826661933c07091c2de8a5b91f01d520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator T *</name>
      <anchor>af5d5d32e18b872beac14fb9f4c52ee70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>a64c25c91af81d7579273f67aff1606a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>a2d6e471174acf642736a8650323495b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;&gt;</name>
      <anchor>a7a2fa125ac3e1122564fe733677a06c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a28296517dd2313058d6c72233e868bae</anchor>
      <arglist>(T *const newP)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>af252c9b37ebfdac91922fb0ec4ea243b</anchor>
      <arglist>(const ComSmartPtr&lt; T &gt; &amp;newP)</arglist>
    </member>
    <member kind="function">
      <name>CoCreateInstance</name>
      <anchor>a6108dda923cf170be6913b63810ff42d</anchor>
      <arglist>(REFCLSID rclsid, DWORD dwClsContext)</arglist>
    </member>
    <member kind="function">
      <name>p</name>
      <anchor>ad3609e5e65e67ea92bb297921544a7a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CPlusPlusCodeTokeniser</name>
    <base>CodeTokeniser</base>
    <filename>classCPlusPlusCodeTokeniser.html</filename>
    <member kind="function">
      <name>TokenType</name>
      <anchor>a757e9a2599a0e15b536754f99aeb0257</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>okenType_error</name>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a96ec7cd93a85eb494ff478b2531ca6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>okenType_comment</name>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a7052a5bb03e836c04d591110776f201e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>okenType_builtInKeyword</name>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a5baffc954faef7ee66df46b7062559b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>okenType_identifier</name>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a34e6424d83c728aabcae3b322c236b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>okenType_integerLiteral</name>
      <anchor>a757e9a2599a0e15b536754f99aeb0257ae4a4bf2d7b5b1de8144bd8cedfda13a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>okenType_floatLiteral</name>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a0e6ebd923bb9da336e1a776fc716b862</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>okenType_stringLiteral</name>
      <anchor>a757e9a2599a0e15b536754f99aeb0257aa182870ae94f2955468dc4d03dd57a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>okenType_operator</name>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a539da9fffe49f181c22173b47d57fdb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>okenType_bracket</name>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a290668e5b4167e765b849c977c697384</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>okenType_punctuation</name>
      <anchor>a757e9a2599a0e15b536754f99aeb0257aa2ac45a2c81f2d202df78cb9ab01c311</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>okenType_preprocessor</name>
      <anchor>a757e9a2599a0e15b536754f99aeb0257a0f86221be32d125f9827b9439c545702</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CPlusPlusCodeTokeniser</name>
      <anchor>a469ad5768ee42ef25442571d4b6ab5e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~CPlusPlusCodeTokeniser</name>
      <anchor>ab8ea32248dbb8039233da1006a9cd6f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readNextToken</name>
      <anchor>a3206c4de8f2e12109fbdc474c4d858b7</anchor>
      <arglist>(CodeDocument::Iterator &amp;source)</arglist>
    </member>
    <member kind="function">
      <name>getTokenTypes</name>
      <anchor>a3dafe671e2021d24209536c1aa9f420d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDefaultColour</name>
      <anchor>a665345d1c1dcf83d142efac0e7b4799b</anchor>
      <arglist>(int tokenType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CriticalSection</name>
    <filename>classCriticalSection.html</filename>
    <member kind="function">
      <name>ScopedLockType</name>
      <anchor>a920337db9491fe3dd721e6e3c19fa4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ScopedUnlockType</name>
      <anchor>a096b71e573ec1f33f41c61d80bec7195</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CriticalSection</name>
      <anchor>a7749425577cdeee2d32815e63d96e9ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~CriticalSection</name>
      <anchor>a8f10b99e9550811be81a0ca409171bcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enter</name>
      <anchor>a81f17af506eea5b2718fa1936d12dabb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>tryEnter</name>
      <anchor>ab631ef2bf4c46fadf292da6328f017a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>exit</name>
      <anchor>a3b1c5011b7fe80bbdfd7a151a4d555d5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CustomTypeface</name>
    <base>Typeface</base>
    <filename>classCustomTypeface.html</filename>
    <member kind="function">
      <name>CustomTypeface</name>
      <anchor>ab55fd08f0ab46d6121f7a3947c69440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CustomTypeface</name>
      <anchor>aa08aa5740c635671d23b4005387dd073</anchor>
      <arglist>(InputStream &amp;serialisedTypefaceStream)</arglist>
    </member>
    <member kind="function">
      <name>~CustomTypeface</name>
      <anchor>a7de69e6a3862d73f61061d10c5996255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>aae23b3b2c7f54b633376361462363ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCharacteristics</name>
      <anchor>acd28c847ab9e746921144e74b04c0c9d</anchor>
      <arglist>(const String &amp;name, float ascent, bool isBold, bool isItalic, juce_wchar defaultCharacter)</arglist>
    </member>
    <member kind="function">
      <name>addGlyph</name>
      <anchor>aa2c2799e6ada735cb93a0b59ead0a9ef</anchor>
      <arglist>(juce_wchar character, const Path &amp;path, float width)</arglist>
    </member>
    <member kind="function">
      <name>addKerningPair</name>
      <anchor>a45869779ba83cc4a0c2156cc23a424bf</anchor>
      <arglist>(juce_wchar char1, juce_wchar char2, float extraAmount)</arglist>
    </member>
    <member kind="function">
      <name>addGlyphsFromOtherTypeface</name>
      <anchor>adf23425bb9e26c0d27b04e578e3980cf</anchor>
      <arglist>(Typeface &amp;typefaceToCopy, juce_wchar characterStartIndex, int numCharacters)</arglist>
    </member>
    <member kind="function">
      <name>writeToStream</name>
      <anchor>ab5f4f1bed4814397104d57cab666ca1a</anchor>
      <arglist>(OutputStream &amp;outputStream)</arglist>
    </member>
    <member kind="function">
      <name>getAscent</name>
      <anchor>aa631246877e796217d7e485fef1bd6c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDescent</name>
      <anchor>af21d687e897566097870d048d45db86a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getStringWidth</name>
      <anchor>a8bce0d61aab0ab6ffb8cfed27c20de40</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>getGlyphPositions</name>
      <anchor>a60167813f5a8cb3e0fe94c490099cb9c</anchor>
      <arglist>(const String &amp;text, Array&lt; int &gt; &amp;glyphs, Array&lt; float &gt; &amp;xOffsets)</arglist>
    </member>
    <member kind="function">
      <name>getOutlineForGlyph</name>
      <anchor>a849b0cacf1b6aab9b30347c975301ac0</anchor>
      <arglist>(int glyphNumber, Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <name>getGlyphForCharacter</name>
      <anchor>a4aa9a3dd4751db11fa4cab5d800443ee</anchor>
      <arglist>(juce_wchar character)</arglist>
    </member>
    <member kind="function">
      <name>loadGlyphIfPossible</name>
      <anchor>a3d46ee607d4e0e1a7eb2a67f670fd9e5</anchor>
      <arglist>(juce_wchar characterNeeded)</arglist>
    </member>
    <member kind="function">
      <name>defaultCharacter</name>
      <anchor>a253a2ab299747b043f623ddbdd354e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ascent</name>
      <anchor>ab5c74224ec102b6990481b658d189ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>isBold</name>
      <anchor>ac7f0bc9dd3cc70a5e93ff5a6668c392b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>isItalic</name>
      <anchor>a461ed100073dec515c55602adc258c66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DatagramSocket</name>
    <filename>classDatagramSocket.html</filename>
    <member kind="function">
      <name>DatagramSocket</name>
      <anchor>ac150b23e3a6be740ae9c3281cff23b73</anchor>
      <arglist>(int localPortNumber, bool enableBroadcasting=false)</arglist>
    </member>
    <member kind="function">
      <name>~DatagramSocket</name>
      <anchor>a67749ad62429e5a9aac2b2d9faaff89e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bindToPort</name>
      <anchor>a94c29fad4912e3dfc17cb8824de3d548</anchor>
      <arglist>(int localPortNumber)</arglist>
    </member>
    <member kind="function">
      <name>connect</name>
      <anchor>aa4072d239f36f6540b5edca56520eb8e</anchor>
      <arglist>(const String &amp;remoteHostname, int remotePortNumber, int timeOutMillisecs=3000)</arglist>
    </member>
    <member kind="function">
      <name>isConnected</name>
      <anchor>af0d9f1a8a95e4af778b33fca45ce6d8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>a9d0a9582b3a2a72bf62f182dbc33c352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getHostName</name>
      <anchor>a676f26604409ccb6dce9b62ecc985823</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getPort</name>
      <anchor>aed38e59242c3778e5bb8a218aa77d35a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isLocal</name>
      <anchor>a7b9b22413bff9ebcdf2c42b43d3eaf57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>waitUntilReady</name>
      <anchor>a773fbe9241d1c57e4ced45317f876b58</anchor>
      <arglist>(bool readyForReading, int timeoutMsecs) const </arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>aa6d0fb81186112263c99e88b498f58ed</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead, bool blockUntilSpecifiedAmountHasArrived)</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>ae3b8aced314e792eb0b9205c9edb83cf</anchor>
      <arglist>(const void *sourceBuffer, int numBytesToWrite)</arglist>
    </member>
    <member kind="function">
      <name>waitForNextConnection</name>
      <anchor>a3ce5d9539e940b5d249a7876325dc69b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultElementComparator</name>
    <filename>classDefaultElementComparator.html</filename>
    <member kind="function">
      <name>compareElements</name>
      <anchor>a271d017e79a70c56794e516871ab5c87</anchor>
      <arglist>(ParameterType first, ParameterType second)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeletedAtShutdown</name>
    <filename>classDeletedAtShutdown.html</filename>
    <member kind="function">
      <name>DeletedAtShutdown</name>
      <anchor>ad03334a429dfa1c465dd8ad52fb94190</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~DeletedAtShutdown</name>
      <anchor>af9065f0567544fbbb8966a8bef264873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deleteAll</name>
      <anchor>a72ea5ccbe21f14172dbcfdcb0f3fe4e5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Desktop</name>
    <base>DeletedAtShutdown</base>
    <base>Timer</base>
    <base>AsyncUpdater</base>
    <filename>classDesktop.html</filename>
    <member kind="function">
      <name>getInstance</name>
      <anchor>a15ebe474aab368cff35578b8f7bec6c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getAllMonitorDisplayAreas</name>
      <anchor>af331e32a27b300d2837a2535ff0c2ae5</anchor>
      <arglist>(bool clippedToWorkArea=true) const </arglist>
    </member>
    <member kind="function">
      <name>getMainMonitorArea</name>
      <anchor>a238746adc91c486f7b71af280d642f65</anchor>
      <arglist>(bool clippedToWorkArea=true) const </arglist>
    </member>
    <member kind="function">
      <name>getMonitorAreaContaining</name>
      <anchor>a9aab91446b395143399f3870e7e94815</anchor>
      <arglist>(const Point&lt; int &gt; &amp;position, bool clippedToWorkArea=true) const </arglist>
    </member>
    <member kind="function">
      <name>getMousePosition</name>
      <anchor>afa4eda5f4fa3cd9fe23526ef7bab729d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMousePosition</name>
      <anchor>a98b408caefc7291f540f9c56dee7ff97</anchor>
      <arglist>(const Point&lt; int &gt; &amp;newPosition)</arglist>
    </member>
    <member kind="function">
      <name>getLastMouseDownPosition</name>
      <anchor>a8df923d6f35b35dff9e16f5292c43b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getMouseButtonClickCounter</name>
      <anchor>a4d94b8b70d2342a4eb966d6ef0ed069d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setScreenSaverEnabled</name>
      <anchor>a12b63736985b72fc78bebe7bf9903597</anchor>
      <arglist>(bool isEnabled)</arglist>
    </member>
    <member kind="function">
      <name>isScreenSaverEnabled</name>
      <anchor>ac49ada613f5989b8fe36c22cf19bf517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addGlobalMouseListener</name>
      <anchor>add528b1597a432f2e4cb9b10314fc210</anchor>
      <arglist>(MouseListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeGlobalMouseListener</name>
      <anchor>a6051a5203c21377974a1f65c0acd4acc</anchor>
      <arglist>(MouseListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>addFocusChangeListener</name>
      <anchor>a0db6055049b8268af05e51e55f377586</anchor>
      <arglist>(FocusChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeFocusChangeListener</name>
      <anchor>af428140675315bed1cec0494ec70007a</anchor>
      <arglist>(FocusChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>setKioskModeComponent</name>
      <anchor>a8fa4033714b5a9cd0714c9b9633b3366</anchor>
      <arglist>(Component *componentToUse, bool allowMenusAndBars=true)</arglist>
    </member>
    <member kind="function">
      <name>getKioskModeComponent</name>
      <anchor>ab68c7553fbd85c5a0578600bd2d4f518</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumComponents</name>
      <anchor>a9e25af68b1ca9a08b3057e13ef909416</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getComponent</name>
      <anchor>a59adea13ab2189bb5b923649741f76ba</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>findComponentAt</name>
      <anchor>a19eea06e8b8348ea224b50401369b96a</anchor>
      <arglist>(const Point&lt; int &gt; &amp;screenPosition) const </arglist>
    </member>
    <member kind="function">
      <name>getNumMouseSources</name>
      <anchor>a3000fa3856884831c4163e441f06dd7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMouseSource</name>
      <anchor>a772ef380b8010528becc01903d10ad69</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getMainMouseSource</name>
      <anchor>a7e63e2818315ad0ff955c640e66a1c13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumDraggingMouseSources</name>
      <anchor>a7d4beed0c50e42e4b7d9467295b1ac24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDraggingMouseSource</name>
      <anchor>a322acfbf24a163833ff4352df67a27f1</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>refreshMonitorSizes</name>
      <anchor>a42de33c45bef2e168333675885ae82a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canUseSemiTransparentWindows</name>
      <anchor>a0d56cced378dabd894ac98ede958b561</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DialogWindow</name>
    <base>DocumentWindow</base>
    <filename>classDialogWindow.html</filename>
    <member kind="function">
      <name>DialogWindow</name>
      <anchor>ad73dba9ea7a57b5b9f8bb0d3ffd8c0a0</anchor>
      <arglist>(const String &amp;name, const Colour &amp;backgroundColour, bool escapeKeyTriggersCloseButton, bool addToDesktop=true)</arglist>
    </member>
    <member kind="function">
      <name>~DialogWindow</name>
      <anchor>a59d3601f7622f31ef928377fc1789eda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>showModalDialog</name>
      <anchor>a1391bb79781bfeac27944931dd91673b</anchor>
      <arglist>(const String &amp;dialogTitle, Component *contentComponent, Component *componentToCentreAround, const Colour &amp;backgroundColour, bool escapeKeyTriggersCloseButton, bool shouldBeResizable=false, bool useBottomRightCornerResizer=false)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>ad898e97178b1df5687f01d51655f5aa3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectoryContentsDisplayComponent</name>
    <filename>classDirectoryContentsDisplayComponent.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>ab57cde73f0efaaa4b3d8a1d6c2af358b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ighlightColourId</name>
      <anchor>ab57cde73f0efaaa4b3d8a1d6c2af358bac53e42ed088fe6d66eb46b51f458f8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>ab57cde73f0efaaa4b3d8a1d6c2af358bac9c2c1e7103616f5665dfc53e27cc0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DirectoryContentsDisplayComponent</name>
      <anchor>a77753970a52f8b388bb7142f662d82c0</anchor>
      <arglist>(DirectoryContentsList &amp;listToShow)</arglist>
    </member>
    <member kind="function">
      <name>~DirectoryContentsDisplayComponent</name>
      <anchor>a1aa97c3b2cb8cea18a072867070e749d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DirectoryContentsDisplayComponent</name>
      <anchor>ae920b3c92a9f5e6114577a957f7017aa</anchor>
      <arglist>(const DirectoryContentsDisplayComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>getNumSelectedFiles</name>
      <anchor>a17067d141e43635f80942d7a2d527563</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>getSelectedFile</name>
      <anchor>a45b00521b6d8fff075384425fb7692eb</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function">
      <name>scrollToTop</name>
      <anchor>aa87b6c665ef3c4cd54f6bcfafe601aa4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>af2f2fe91f39fdc58d08be4d7537045f7</anchor>
      <arglist>(FileBrowserListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>a1bde76a3657c81bedb923ed5b1e1a290</anchor>
      <arglist>(FileBrowserListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>sendSelectionChangeMessage</name>
      <anchor>a258a4d5cc97370c927a04dcfd1f16e7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sendDoubleClickMessage</name>
      <anchor>ad07df8fccc59a5e38bb6a8604eacb8a7</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <name>sendMouseClickMessage</name>
      <anchor>ade19bf62883c81f828eaac675fe6d6e3</anchor>
      <arglist>(const File &amp;file, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a3cce185447019b37fcbb0adcc12a2edc</anchor>
      <arglist>(const DirectoryContentsDisplayComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>fileList</name>
      <anchor>a5107067c830054515cd287dc3db2bc45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>listeners</name>
      <anchor>a5f7300e0d637b48e8a2f3abd067a7144</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectoryContentsList</name>
    <base>ChangeBroadcaster</base>
    <base>TimeSliceClient</base>
    <filename>classDirectoryContentsList.html</filename>
    <member kind="function">
      <name>DirectoryContentsList</name>
      <anchor>ae36fae5fbad4ae302ffed71120a554fc</anchor>
      <arglist>(const FileFilter *fileFilter, TimeSliceThread &amp;threadToUse)</arglist>
    </member>
    <member kind="function">
      <name>~DirectoryContentsList</name>
      <anchor>aac2f7424bab5834eda64fcd9f63af9c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDirectory</name>
      <anchor>a8bbc33107fede1f3925b40c73b43fe72</anchor>
      <arglist>(const File &amp;directory, bool includeDirectories, bool includeFiles)</arglist>
    </member>
    <member kind="function">
      <name>getDirectory</name>
      <anchor>a2e90e52826669effbcc3fde5dac0f7d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a1155dd82a0abcaeae948869aea6834d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>ac7c096640fd74adbd9b20b38892fee48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isStillLoading</name>
      <anchor>affdbc37bd9593dbabbd29814edcfde19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setIgnoresHiddenFiles</name>
      <anchor>ab143c4681db9f409c204d9a21ae3bced</anchor>
      <arglist>(bool shouldIgnoreHiddenFiles)</arglist>
    </member>
    <member kind="function">
      <name>ignoresHiddenFiles</name>
      <anchor>a13805762d1b90055cdb363bd010225b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumFiles</name>
      <anchor>a3fa64c14744c5256c92af717e5afc253</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFileInfo</name>
      <anchor>a74b2f00f25fa733aba8ff1294a913d56</anchor>
      <arglist>(int index, FileInfo &amp;resultInfo) const </arglist>
    </member>
    <member kind="function">
      <name>getFile</name>
      <anchor>a6d4ef2cc7eedce27ccfa8b03150fa125</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getFilter</name>
      <anchor>a0adca687d551dc03939427cb59b4e3ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>useTimeSlice</name>
      <anchor>a21d296d8d47e041d5b2933fd00e1f17d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTimeSliceThread</name>
      <anchor>ae33e3f023f20fa4ef7970858517bea1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>compareElements</name>
      <anchor>a8b4639964a75c4f7cf00b89f503e9092</anchor>
      <arglist>(const DirectoryContentsList::FileInfo *first, const DirectoryContentsList::FileInfo *second)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectoryIterator</name>
    <filename>classDirectoryIterator.html</filename>
    <member kind="function">
      <name>DirectoryIterator</name>
      <anchor>a524ffc16900daf13217680423458b328</anchor>
      <arglist>(const File &amp;directory, bool isRecursive, const String &amp;wildCard=&quot;*&quot;, int whatToLookFor=File::findFiles)</arglist>
    </member>
    <member kind="function">
      <name>~DirectoryIterator</name>
      <anchor>aa72fbf8139eb6b2446565cf89249071e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>a4d38dc126a3b4855dbbef96d8b31ae76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFile</name>
      <anchor>a4b5ddd7c1699560b66360d006c2874cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getEstimatedProgress</name>
      <anchor>a32667fc239e42f3db031ae2cc2646b3c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DocumentWindow</name>
    <base>ResizableWindow</base>
    <filename>classDocumentWindow.html</filename>
    <member kind="function">
      <name>TitleBarButtons</name>
      <anchor>a104d68bc145157c6ce79169a36fc3c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>inimiseButton</name>
      <anchor>a104d68bc145157c6ce79169a36fc3c31a4200920dc08e7ecfe1c8b90444d99098</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>aximiseButton</name>
      <anchor>a104d68bc145157c6ce79169a36fc3c31a84fe4bbe25739fe241f2e6128e7a51c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>loseButton</name>
      <anchor>a104d68bc145157c6ce79169a36fc3c31a80e87a70beeecc78adc89517fa1df978</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>llButtons</name>
      <anchor>a104d68bc145157c6ce79169a36fc3c31af4a9b49869cebf7e8cecaf7f6dd93420</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a227c6ab86245d481d4dbe21893cb028c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>a227c6ab86245d481d4dbe21893cb028ca7d2f8fdfae3820cd074ebd598cf220ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DocumentWindow</name>
      <anchor>a79d8474b5d0d8e1bfe2713dc1841063d</anchor>
      <arglist>(const String &amp;name, const Colour &amp;backgroundColour, int requiredButtons, bool addToDesktop=true)</arglist>
    </member>
    <member kind="function">
      <name>~DocumentWindow</name>
      <anchor>a2a142203d2559ee92d5cac99dfa1c265</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setName</name>
      <anchor>a0419b64dbdccbbf2538c1ff7b5aa3c23</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <name>setIcon</name>
      <anchor>ab7a55549f8c150a36b196ee8d43179a4</anchor>
      <arglist>(const Image *imageToUse)</arglist>
    </member>
    <member kind="function">
      <name>setTitleBarHeight</name>
      <anchor>a02567fc3120d918ac5d7929813c1a56b</anchor>
      <arglist>(int newHeight)</arglist>
    </member>
    <member kind="function">
      <name>getTitleBarHeight</name>
      <anchor>abac134f2107fabc94ed2751a158c1a9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setTitleBarButtonsRequired</name>
      <anchor>af9549ecc64c2b7e91161a49c44b6ae17</anchor>
      <arglist>(int requiredButtons, bool positionTitleBarButtonsOnLeft)</arglist>
    </member>
    <member kind="function">
      <name>setTitleBarTextCentred</name>
      <anchor>af85b7ce283221be0bc17015b8c1bc1aa</anchor>
      <arglist>(bool textShouldBeCentred)</arglist>
    </member>
    <member kind="function">
      <name>setMenuBar</name>
      <anchor>a4a808defbae48839786354a350eaf7ea</anchor>
      <arglist>(MenuBarModel *menuBarModel, int menuBarHeight=0)</arglist>
    </member>
    <member kind="function">
      <name>closeButtonPressed</name>
      <anchor>a71c46283a6fe63f2cad49d01997e16d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minimiseButtonPressed</name>
      <anchor>a939d52f9986f46aa8929c69e02258acc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maximiseButtonPressed</name>
      <anchor>a1d2ce7145c2e6da062e22589543ea037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCloseButton</name>
      <anchor>a6afb771582f6d44055438ff2fd11d82c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMinimiseButton</name>
      <anchor>abc03c6eb43509988e04651bd26279a2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMaximiseButton</name>
      <anchor>a3ec2e77b6e475281eed6ea0e137fe65c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a42ba923d992ecc76cbf2f041d13bd738</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>af92a613bbcb4f25753819a6159cc59f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lookAndFeelChanged</name>
      <anchor>a980ff40af7f9955a4b17411190bf5a90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getBorderThickness</name>
      <anchor>afa2ed31dd16f779011f1f7881dee9cbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getContentComponentBorder</name>
      <anchor>a9bdf359f007aa8e2b5735cbbf733b714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseDoubleClick</name>
      <anchor>a0fca357faa8f6e288c753bb7877fb294</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>userTriedToCloseWindow</name>
      <anchor>ac5e3254abe0733b676182ae2d856c92f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activeWindowStatusChanged</name>
      <anchor>ab25b03461bc79fb3395920bfbf318f6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDesktopWindowStyleFlags</name>
      <anchor>ad117ee2102e657f818dcfb4829bbf895</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>parentHierarchyChanged</name>
      <anchor>a2ff5de72d718b4d4b0b566a2f7e771c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTitleBarArea</name>
      <anchor>a391208a91acb2b4d654cdba97d4fd520</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DragAndDropContainer</name>
    <filename>classDragAndDropContainer.html</filename>
    <member kind="function">
      <name>DragAndDropContainer</name>
      <anchor>af5236c188d64a8ac0103754ee676f339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~DragAndDropContainer</name>
      <anchor>ade6447a100fab338176980f99fa04e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startDragging</name>
      <anchor>a774f0ee1fb80e98aed35c65069183adc</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent, Image *dragImage=0, bool allowDraggingToOtherJuceWindows=false, const Point&lt; int &gt; *imageOffsetFromMouse=0)</arglist>
    </member>
    <member kind="function">
      <name>isDragAndDropActive</name>
      <anchor>aa1929c259d62aac44d866abd3e52ef1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentDragDescription</name>
      <anchor>a6f2c7395c326c5bbaff90c619b4e0b21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>findParentDragContainerFor</name>
      <anchor>ab2862f4fe5815a2089c886ab96193949</anchor>
      <arglist>(Component *childComponent)</arglist>
    </member>
    <member kind="function">
      <name>performExternalDragDropOfFiles</name>
      <anchor>ae9e29e4a49717401e4631fc5864f0a04</anchor>
      <arglist>(const StringArray &amp;files, bool canMoveFiles)</arglist>
    </member>
    <member kind="function">
      <name>performExternalDragDropOfText</name>
      <anchor>a42446d76aa9b798d56936f6de6c270a5</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>shouldDropFilesWhenDraggedExternally</name>
      <anchor>a89922f3dd28ef80d3e127ab32fb3c58b</anchor>
      <arglist>(const String &amp;dragSourceDescription, Component *dragSourceComponent, StringArray &amp;files, bool &amp;canMoveFiles)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DragAndDropTarget</name>
    <filename>classDragAndDropTarget.html</filename>
    <member kind="function">
      <name>~DragAndDropTarget</name>
      <anchor>ae38b4052c9fb331f52a5cf41d9e4efca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isInterestedInDragSource</name>
      <anchor>a899fe3b931197ce240fd4f3a61fe5267</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent)=0</arglist>
    </member>
    <member kind="function">
      <name>itemDragEnter</name>
      <anchor>aa963c31058cad57aea66400153588656</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>itemDragMove</name>
      <anchor>adfe6d38a337b5531b9348b0453478993</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>itemDragExit</name>
      <anchor>acba65f0e32e3d7cf898a939b17dc18d8</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent)</arglist>
    </member>
    <member kind="function">
      <name>itemDropped</name>
      <anchor>a037faca400f1371e3d7f2f5e04ef4c0a</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent, int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>shouldDrawDragImageWhenOver</name>
      <anchor>a160dc7a89ab43cd8d55c5e902bd0032c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Drawable</name>
    <filename>classDrawable.html</filename>
    <member kind="function">
      <name>Drawable</name>
      <anchor>aac88608db6081da479c772c96636acb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~Drawable</name>
      <anchor>abdc2e2d82c51c1703656a2dfba0feabd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createCopy</name>
      <anchor>a4632f7ae2228fe64f4595291dcc813d6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>aba3144ad6192220685503f516411eeb0</anchor>
      <arglist>(Graphics &amp;g, float opacity, const AffineTransform &amp;transform=AffineTransform::identity) const </arglist>
    </member>
    <member kind="function">
      <name>drawAt</name>
      <anchor>a25ec80262ebef1fd06d01b51893cee10</anchor>
      <arglist>(Graphics &amp;g, float x, float y, float opacity) const </arglist>
    </member>
    <member kind="function">
      <name>drawWithin</name>
      <anchor>a33b34333d38f92cf5fe6b55ce5baf2ea</anchor>
      <arglist>(Graphics &amp;g, int destX, int destY, int destWidth, int destHeight, const RectanglePlacement &amp;placement, float opacity) const </arglist>
    </member>
    <member kind="function">
      <name>render</name>
      <anchor>a95149be52b1ba60d48d84ceb6853fe79</anchor>
      <arglist>(const RenderingContext &amp;context) const =0</arglist>
    </member>
    <member kind="function">
      <name>getBounds</name>
      <anchor>afc4844e3bcb66e5948740bc3a34218dc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>hitTest</name>
      <anchor>a9c589931896e189d7c53ef2c948b8c1f</anchor>
      <arglist>(float x, float y) const =0</arglist>
    </member>
    <member kind="function">
      <name>getName</name>
      <anchor>a0c8d0e7c1f7c7aa0b0d814936381a748</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setName</name>
      <anchor>a0098b9a066763ae0fa8ac3adc2169427</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <name>createFromImageData</name>
      <anchor>a490039369111891979147bdfecf8d389</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <name>createFromImageDataStream</name>
      <anchor>a763ef7e95af00fb88b4c45a1c38bd942</anchor>
      <arglist>(InputStream &amp;dataSource)</arglist>
    </member>
    <member kind="function">
      <name>createFromImageFile</name>
      <anchor>a71c90179ca2a582ef0814c983be41dc9</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <name>createFromSVG</name>
      <anchor>af1fa4fa00c6e37bcaa7a9322a81bd2ec</anchor>
      <arglist>(const XmlElement &amp;svgDocument)</arglist>
    </member>
    <member kind="function">
      <name>createFromValueTree</name>
      <anchor>abcd5eafd881527a7b2cfcdc7e8137881</anchor>
      <arglist>(const ValueTree &amp;tree)</arglist>
    </member>
    <member kind="function">
      <name>createValueTree</name>
      <anchor>add638d094e3edfd8677e2f3cd1c9be96</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Drawable::RenderingContext</name>
    <filename>classDrawable_1_1RenderingContext.html</filename>
    <member kind="function">
      <name>RenderingContext::RenderingContext</name>
      <anchor>a89b36528f51442380b9235b9f6d81636</anchor>
      <arglist>(Graphics &amp;g, const AffineTransform &amp;transform, float opacity)</arglist>
    </member>
    <member kind="function">
      <name>RenderingContext::g</name>
      <anchor>a90e3a94b4a005a3cb01e73dad138b212</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RenderingContext::transform</name>
      <anchor>aedb56fae67bc454765cc238f6b430c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RenderingContext::opacity</name>
      <anchor>ade33329d6327b5ccf0a46f7aec60448e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableButton</name>
    <base>Button</base>
    <filename>classDrawableButton.html</filename>
    <member kind="function">
      <name>ButtonStyle</name>
      <anchor>a7da653337d7329405ef9865cc35f612e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mageFitted</name>
      <anchor>a7da653337d7329405ef9865cc35f612ea79a05e8e03a639da1e34dd2bc76a4a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mageRaw</name>
      <anchor>a7da653337d7329405ef9865cc35f612eadeca41061a457668e1b73bcea58f437f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mageAboveTextLabel</name>
      <anchor>a7da653337d7329405ef9865cc35f612ea062ae670bdd4925a0a708dbaca8ebc2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mageOnButtonBackground</name>
      <anchor>a7da653337d7329405ef9865cc35f612eaff968e270892fae0fee459da811d6a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DrawableButton</name>
      <anchor>a27adb65452ea50435a4a4e90c70e2cd0</anchor>
      <arglist>(const String &amp;buttonName, ButtonStyle buttonStyle)</arglist>
    </member>
    <member kind="function">
      <name>~DrawableButton</name>
      <anchor>a9703cbdd10a62d88f297b9e2ac321dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setImages</name>
      <anchor>a3241cea321470f242857f549e29a4ca6</anchor>
      <arglist>(const Drawable *normalImage, const Drawable *overImage=0, const Drawable *downImage=0, const Drawable *disabledImage=0, const Drawable *normalImageOn=0, const Drawable *overImageOn=0, const Drawable *downImageOn=0, const Drawable *disabledImageOn=0)</arglist>
    </member>
    <member kind="function">
      <name>setButtonStyle</name>
      <anchor>a5858b272f7062972f23eecfa4bb39362</anchor>
      <arglist>(ButtonStyle newStyle)</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundColours</name>
      <anchor>ab4f4cfb653551478adf5a57aa327a1aa</anchor>
      <arglist>(const Colour &amp;toggledOffColour, const Colour &amp;toggledOnColour)</arglist>
    </member>
    <member kind="function">
      <name>getBackgroundColour</name>
      <anchor>aee9b3636b899b3e15c59c13441d86e28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setEdgeIndent</name>
      <anchor>a92a1179fe613504e1c0286bea62f9d7b</anchor>
      <arglist>(int numPixelsIndent)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentImage</name>
      <anchor>a88513db837b859e051d346c079bc1c4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNormalImage</name>
      <anchor>a963b01fa4f93dfc6c3a16812c46baf5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getOverImage</name>
      <anchor>a22c0fd7ef69c3df69a8d0348d4aeca75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDownImage</name>
      <anchor>a7332252b32ada5322c979c0d0a834e2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paintButton</name>
      <anchor>a41b96d4fc2cd66b2325fa89310491a5a</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableComposite</name>
    <base>Drawable</base>
    <filename>classDrawableComposite.html</filename>
    <member kind="function">
      <name>DrawableComposite</name>
      <anchor>a03de775754fc0adf53262a651c8ca536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~DrawableComposite</name>
      <anchor>a3c7bf97b74971573773b7ed768d60464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertDrawable</name>
      <anchor>a6fd4061c30294f04e99e28ee407e83c6</anchor>
      <arglist>(Drawable *drawable, const AffineTransform &amp;transform=AffineTransform::identity, int index=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>insertDrawable</name>
      <anchor>a60002a04fb41cbf5581d4809192a5c82</anchor>
      <arglist>(const Drawable &amp;drawable, const AffineTransform &amp;transform=AffineTransform::identity, int index=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>removeDrawable</name>
      <anchor>a8456572ba507b295bb22559e868d1957</anchor>
      <arglist>(int index, bool deleteDrawable=true)</arglist>
    </member>
    <member kind="function">
      <name>getNumDrawables</name>
      <anchor>a0789216e288b05ff16a76c935175a3b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDrawable</name>
      <anchor>a5eb43ed6f96d4393929636c41dafb178</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getDrawableTransform</name>
      <anchor>aaa8cf11fd94cda1b42d0998f4801ecee</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>bringToFront</name>
      <anchor>aef8280d179fe874bc690c1bbe50933b1</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>render</name>
      <anchor>a55f77e76ae64b42d216b45feef212a6c</anchor>
      <arglist>(const Drawable::RenderingContext &amp;context) const </arglist>
    </member>
    <member kind="function">
      <name>getBounds</name>
      <anchor>a793649bc7069b382ec35f7051edadb63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hitTest</name>
      <anchor>ad15702ad4ee867909d3bd80ac700ebc4</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <name>createCopy</name>
      <anchor>a9561857f7f0bd55184e1c9143251c0f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createValueTree</name>
      <anchor>a3ea1b0c36900427f9e2381877ef27831</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createFromValueTree</name>
      <anchor>ac919b82f75dbfb4bcb181cffdb49c0a5</anchor>
      <arglist>(const ValueTree &amp;tree)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableImage</name>
    <base>Drawable</base>
    <filename>classDrawableImage.html</filename>
    <member kind="function">
      <name>DrawableImage</name>
      <anchor>a3d192dde1f7e9de122120f1824d5cd25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~DrawableImage</name>
      <anchor>a85628b8ca5c81e73d6bf1c59f8e6e354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setImage</name>
      <anchor>a80c29e58656757a6dac2d7ed0625f04b</anchor>
      <arglist>(const Image &amp;imageToCopy)</arglist>
    </member>
    <member kind="function">
      <name>setImage</name>
      <anchor>a25502a2095a0c428f6375515854cd328</anchor>
      <arglist>(Image *imageToUse, bool releaseWhenNotNeeded)</arglist>
    </member>
    <member kind="function">
      <name>getImage</name>
      <anchor>a23315e0e480740cbdc5b6696160bf23d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>clearImage</name>
      <anchor>a6722889ab0aa7ecba94ffb49bc2b7625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setOpacity</name>
      <anchor>a861406d16189ce7cb99128c0908daa03</anchor>
      <arglist>(float newOpacity)</arglist>
    </member>
    <member kind="function">
      <name>getOpacity</name>
      <anchor>a2f1861fac3d128e46893dc1eb0118710</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setOverlayColour</name>
      <anchor>a440585a169c6acf1bb650def36946d43</anchor>
      <arglist>(const Colour &amp;newOverlayColour)</arglist>
    </member>
    <member kind="function">
      <name>getOverlayColour</name>
      <anchor>a5777f0772733236b9cf0bbf74075730f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>render</name>
      <anchor>ad7d240b820e3a5923872f4cb13c0c207</anchor>
      <arglist>(const Drawable::RenderingContext &amp;context) const </arglist>
    </member>
    <member kind="function">
      <name>getBounds</name>
      <anchor>a0f748dc5a479c378f8045631a696b67b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hitTest</name>
      <anchor>a68b8a85a6b471c76cb7080b8c9b13217</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <name>createCopy</name>
      <anchor>a088c8487043c0a6d7c3ced03278aa67e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createValueTree</name>
      <anchor>a7777cd5f8b49c400ae6c73f1f6950bff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createFromValueTree</name>
      <anchor>a48fc2e8a8768d997c015fbd023cb7a0a</anchor>
      <arglist>(const ValueTree &amp;tree)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawablePath</name>
    <base>Drawable</base>
    <filename>classDrawablePath.html</filename>
    <member kind="function">
      <name>DrawablePath</name>
      <anchor>af685ace4640b8a33605587b25061095c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~DrawablePath</name>
      <anchor>aff535ef736dddf9a1b1a1a0b8fa7ad3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPath</name>
      <anchor>afc77b134d5d7920d8dc3028715c9b3ba</anchor>
      <arglist>(const Path &amp;newPath)</arglist>
    </member>
    <member kind="function">
      <name>getPath</name>
      <anchor>ac93a6f37d524176cd1c94397a827656e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setFill</name>
      <anchor>afa796f6805aa6ca7845f477a10c41771</anchor>
      <arglist>(const FillType &amp;newFill)</arglist>
    </member>
    <member kind="function">
      <name>getFill</name>
      <anchor>a93c08a0e370e9316fc921905499320fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setStrokeFill</name>
      <anchor>ab0f4b61a025223ee544de026d153ae18</anchor>
      <arglist>(const FillType &amp;newStrokeFill)</arglist>
    </member>
    <member kind="function">
      <name>getStrokeFill</name>
      <anchor>afedd723fff609c8baf83175e6f11e35d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setStrokeType</name>
      <anchor>a31844f28fa1d75c9edcdc485a5e8c0fc</anchor>
      <arglist>(const PathStrokeType &amp;newStrokeType)</arglist>
    </member>
    <member kind="function">
      <name>setStrokeThickness</name>
      <anchor>a3a397ff152ee5e0a1f87ea70ca8bfce3</anchor>
      <arglist>(float newThickness)</arglist>
    </member>
    <member kind="function">
      <name>getStrokeType</name>
      <anchor>a65a650f9df8b4c649885b5768861a6bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>render</name>
      <anchor>aa45d8c3399e17d0385bdcf513a64570c</anchor>
      <arglist>(const Drawable::RenderingContext &amp;context) const </arglist>
    </member>
    <member kind="function">
      <name>getBounds</name>
      <anchor>a81af9a798f1910bd54f4e4cca25fe2a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hitTest</name>
      <anchor>af5d46e6122fb437d534fc6ac1c09e0b8</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <name>createCopy</name>
      <anchor>a3cbfe640cd411ee076429a5416c6db1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createValueTree</name>
      <anchor>a79378d3fa69d08d98bb0ca04b0aa490c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createFromValueTree</name>
      <anchor>a3dbb8402ad068b78f8d8aba9466e5e23</anchor>
      <arglist>(const ValueTree &amp;tree)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawableText</name>
    <base>Drawable</base>
    <filename>classDrawableText.html</filename>
    <member kind="function">
      <name>DrawableText</name>
      <anchor>a73580c842dc9e49ed090a14477e7c727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~DrawableText</name>
      <anchor>a7cef8069c5d9843745eff8089588ce48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>a6c1b14fd2a712790ca2ed6f211fbb25c</anchor>
      <arglist>(const GlyphArrangement &amp;newText)</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>a4934981c17d3b6ba9d57bddcd5ac994f</anchor>
      <arglist>(const String &amp;newText, const Font &amp;fontToUse)</arglist>
    </member>
    <member kind="function">
      <name>getText</name>
      <anchor>a87ebdb08cfbf7682b9af220576b2f8a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setColour</name>
      <anchor>a03521ac2b6f0d7e3c7101a5665e7ac89</anchor>
      <arglist>(const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <name>getColour</name>
      <anchor>ac9120fab33862fa46eadc2e8c6f1dcae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>render</name>
      <anchor>a3a8544cb5b1e4fc6f9ca5cd13f971da3</anchor>
      <arglist>(const Drawable::RenderingContext &amp;context) const </arglist>
    </member>
    <member kind="function">
      <name>getBounds</name>
      <anchor>a1b24dc21a3c28408e89866e87e01d46e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hitTest</name>
      <anchor>a7c4b4a33a88780b2bcdc64c4e97b0bdd</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <name>createCopy</name>
      <anchor>a37dbcc2467162b2ab05cbf6d7577546b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createValueTree</name>
      <anchor>a24eb5c5efc9426d8a576463d6846293b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createFromValueTree</name>
      <anchor>acde8da290a3edf7e9e9dd92a7af92d90</anchor>
      <arglist>(const ValueTree &amp;tree)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DropShadowEffect</name>
    <base>ImageEffectFilter</base>
    <filename>classDropShadowEffect.html</filename>
    <member kind="function">
      <name>DropShadowEffect</name>
      <anchor>a385d398423cf81f8e073195ea84473b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~DropShadowEffect</name>
      <anchor>ab74475a46901a77353310c39c82af5bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setShadowProperties</name>
      <anchor>afd4dd9f6654bf60e5374efa7e0f64a0a</anchor>
      <arglist>(const float newRadius, const float newOpacity, const int newShadowOffsetX, const int newShadowOffsetY)</arglist>
    </member>
    <member kind="function">
      <name>applyEffect</name>
      <anchor>a016a5a37ccce3e3f394bc34e5ed00c98</anchor>
      <arglist>(Image &amp;sourceImage, Graphics &amp;destContext)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DropShadower</name>
    <base>ComponentListener</base>
    <filename>classDropShadower.html</filename>
    <member kind="function">
      <name>DropShadower</name>
      <anchor>ade4cff3b353cd000e0ce6b7faff94edd</anchor>
      <arglist>(float alpha=0.5f, int xOffset=1, int yOffset=5, float blurRadius=10.0f)</arglist>
    </member>
    <member kind="function">
      <name>~DropShadower</name>
      <anchor>a2b5a83d99a56e76c6294c075ce0f5c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setOwner</name>
      <anchor>aa66afaff8ac325df14206e274589769f</anchor>
      <arglist>(Component *componentToFollow)</arglist>
    </member>
    <member kind="function">
      <name>componentMovedOrResized</name>
      <anchor>a71feda9735f257a78408132cee6c7797</anchor>
      <arglist>(Component &amp;component, bool wasMoved, bool wasResized)</arglist>
    </member>
    <member kind="function">
      <name>componentBroughtToFront</name>
      <anchor>a5ba61ab0dfb8faf0257342dcd89c81f7</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>componentChildrenChanged</name>
      <anchor>a8fc13c3ef27eeb0d7d9421aeaa2fa683</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>componentParentHierarchyChanged</name>
      <anchor>a93f46d56e551e10250efaf86d755fc5c</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>componentVisibilityChanged</name>
      <anchor>abc142844a970d0c1f4867796103c14e9</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyCriticalSection</name>
    <filename>classDummyCriticalSection.html</filename>
    <member kind="function">
      <name>ScopedUnlockType</name>
      <anchor>a455be3752f5f32c56fabe0b7b477b6f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DummyCriticalSection</name>
      <anchor>aa058b573d677bfc5c3a1b6c60255bf4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~DummyCriticalSection</name>
      <anchor>a60d9edac4dae6f898dfa70cfc0e8c2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enter</name>
      <anchor>aea4efab0892aab99b6dbfc04cc0cc6df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>exit</name>
      <anchor>a2a02b8d1435d2e6bcbc64b52e7a01f56</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynamicObject</name>
    <base>ReferenceCountedObject</base>
    <filename>classDynamicObject.html</filename>
    <member kind="function">
      <name>DynamicObject</name>
      <anchor>a50a7adf3d7d1f411ed2aa9a663bfe275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~DynamicObject</name>
      <anchor>af9141dddf35d338d5bae491cb0455583</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasProperty</name>
      <anchor>a2c6cedaa8517c7a1868ada9eaa7d93b7</anchor>
      <arglist>(const var::identifier &amp;propertyName) const </arglist>
    </member>
    <member kind="function">
      <name>getProperty</name>
      <anchor>a4037ce05942d6bad8649c8a5622f40ce</anchor>
      <arglist>(const var::identifier &amp;propertyName) const </arglist>
    </member>
    <member kind="function">
      <name>setProperty</name>
      <anchor>a4575dc02d98aafa22f5a3ad805f86a54</anchor>
      <arglist>(const var::identifier &amp;propertyName, const var &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <name>removeProperty</name>
      <anchor>a4964680c41e419748a1aa1a4cad753f6</anchor>
      <arglist>(const var::identifier &amp;propertyName)</arglist>
    </member>
    <member kind="function">
      <name>hasMethod</name>
      <anchor>a483daad42e215fc2d400ac1d974c7432</anchor>
      <arglist>(const var::identifier &amp;methodName) const </arglist>
    </member>
    <member kind="function">
      <name>invokeMethod</name>
      <anchor>adf47cad2e729a132ba9f282fa0ece34d</anchor>
      <arglist>(const var::identifier &amp;methodName, const var *parameters, int numParameters)</arglist>
    </member>
    <member kind="function">
      <name>setMethod</name>
      <anchor>af2572cc7cf10ff2516bb7e7fa917edb2</anchor>
      <arglist>(const var::identifier &amp;methodName, var::MethodFunction methodFunction)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a2512456cd96acf25a48af969b9269944</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EdgeTable</name>
    <filename>classEdgeTable.html</filename>
    <member kind="function">
      <name>EdgeTable</name>
      <anchor>aa220ed166fa71ac953d39c6512588464</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;clipLimits, const Path &amp;pathToAdd, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>EdgeTable</name>
      <anchor>af1255353604f678892577a84414c7fe0</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangleToAdd)</arglist>
    </member>
    <member kind="function">
      <name>EdgeTable</name>
      <anchor>a4cdc0bb4b999b7b3f60ba2ad9f792ec2</anchor>
      <arglist>(const RectangleList &amp;rectanglesToAdd)</arglist>
    </member>
    <member kind="function">
      <name>EdgeTable</name>
      <anchor>a354c1ffde2d63854de36d4c4dd2b66d9</anchor>
      <arglist>(float x, float y, float w, float h)</arglist>
    </member>
    <member kind="function">
      <name>EdgeTable</name>
      <anchor>a43bfa6fe36cab8b5b1ad646fff8668fa</anchor>
      <arglist>(const EdgeTable &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~EdgeTable</name>
      <anchor>abd3d8878df1c4510d5e682fd0aabe465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a6a13aa29116244227af62953e3690b35</anchor>
      <arglist>(const EdgeTable &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>clipToRectangle</name>
      <anchor>a8b4f654ca67629b18fd7bcfb181089db</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>excludeRectangle</name>
      <anchor>ace4a4713af3e35ed6276ebc176e078e1</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>clipToEdgeTable</name>
      <anchor>af28f0aaffd1df75bcca54f5c46372992</anchor>
      <arglist>(const EdgeTable &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>clipLineToMask</name>
      <anchor>a65f05a5b115733ef69094e865987d295</anchor>
      <arglist>(int x, int y, const uint8 *mask, int maskStride, int numPixels)</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>a2c0c1ab782bcfc5d67c8407ee6b7186e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getMaximumBounds</name>
      <anchor>a516dc8a63dbf5994b27afedbad137db5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>a06bfe275a06018609d1abe5dc14d0f0c</anchor>
      <arglist>(float dx, int dy)</arglist>
    </member>
    <member kind="function">
      <name>optimiseTable</name>
      <anchor>a776538a2ee908e46769e6c4b56dbf5df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iterate</name>
      <anchor>a30e6a8b3b66adf2c5fdd7755d09a15ef</anchor>
      <arglist>(EdgeTableIterationCallback &amp;iterationCallback) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>File</name>
    <filename>classFile.html</filename>
    <member kind="function">
      <name>TypesOfFileToFind</name>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indDirectories</name>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198ca35b223e26e0f30ee49e320b60af41965</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indFiles</name>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198ca0804ff838a8bfd66eaa300e5e0a3884a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indFilesAndDirectories</name>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198ca5bdd66baa4579bd9b698162bed951793</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>gnoreHiddenFiles</name>
      <anchor>a2e3d1ed8a9022434f3ddb7d34b24198ca7913a92e21bc03cb18cecf6aa21221bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SpecialLocationType</name>
      <anchor>a3e19cafabb03c5838160263a6e76313d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>serHomeDirectory</name>
      <anchor>a3e19cafabb03c5838160263a6e76313da8620eabc38cfbd921a52d10157463c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>serDocumentsDirectory</name>
      <anchor>a3e19cafabb03c5838160263a6e76313da72c8fbf94445ccce6b01470265c8f397</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>serDesktopDirectory</name>
      <anchor>a3e19cafabb03c5838160263a6e76313da4776bc5e304bf2857ed5ede0fbbc4060</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>serApplicationDataDirectory</name>
      <anchor>a3e19cafabb03c5838160263a6e76313da0c9f89d8dc9f9f32c9eb42428385351d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ommonApplicationDataDirectory</name>
      <anchor>a3e19cafabb03c5838160263a6e76313da18566f0ca926c8f6db1e178ba5f403c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>empDirectory</name>
      <anchor>a3e19cafabb03c5838160263a6e76313da08818a8233a97db2e3c54a917adf4954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>urrentExecutableFile</name>
      <anchor>a3e19cafabb03c5838160263a6e76313dab960741272c75e94482f295a516aae62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>urrentApplicationFile</name>
      <anchor>a3e19cafabb03c5838160263a6e76313da8292b316ce9eb8ebc0d0980b788a877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nvokedExecutableFile</name>
      <anchor>a3e19cafabb03c5838160263a6e76313dafdae061dc559a8e9ac3a9623d2cd8081</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lobalApplicationsDirectory</name>
      <anchor>a3e19cafabb03c5838160263a6e76313dad4f66736251eab2cdaa21dd5a709ed21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>serMusicDirectory</name>
      <anchor>a3e19cafabb03c5838160263a6e76313dad0662607d7763c1940693b9f80673567</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>serMoviesDirectory</name>
      <anchor>a3e19cafabb03c5838160263a6e76313dadcb6e6c19c350d8020615417b0505da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>File</name>
      <anchor>ae039af5807fc385f41b60644725d15d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>File</name>
      <anchor>ae48b8a5611a11bf2d6e7c23551452421</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <name>File</name>
      <anchor>ad1fbab59d996b3b3840986307eceb3ee</anchor>
      <arglist>(const File &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~File</name>
      <anchor>ac704ebdf5f57d7a1c5ddf409d797fb69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a117457fe9f7ded6dd0e1453603b2b272</anchor>
      <arglist>(const String &amp;newFilePath)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a64fde399af107b07eed297920172e836</anchor>
      <arglist>(const File &amp;otherFile)</arglist>
    </member>
    <member kind="function">
      <name>exists</name>
      <anchor>a44ecfb6abf4c56065e773785787f2fb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>existsAsFile</name>
      <anchor>a2810f7ad22c4cb4e8927dae25bd53345</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isDirectory</name>
      <anchor>a0d02d044cfec9c218a57bd7f00ff71f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSize</name>
      <anchor>a4e368252255a9310aceac2aca02ed238</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>descriptionOfSizeInBytes</name>
      <anchor>ac92b16f45b788b41c012d549c96524ca</anchor>
      <arglist>(int64 bytes)</arglist>
    </member>
    <member kind="function">
      <name>getFullPathName</name>
      <anchor>a024105fc4f4fa3368d77e1364931501a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFileName</name>
      <anchor>a653152502ede25017f5c80c1a667590e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRelativePathFrom</name>
      <anchor>ae22f4ec096f349bff5755598cd174d0a</anchor>
      <arglist>(const File &amp;directoryToBeRelativeTo) const </arglist>
    </member>
    <member kind="function">
      <name>getFileExtension</name>
      <anchor>af1e60b3ee94a177df54da0810cd009e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hasFileExtension</name>
      <anchor>a30e32f94abb6a9a4e4e802129ac0ea02</anchor>
      <arglist>(const String &amp;extensionToTest) const </arglist>
    </member>
    <member kind="function">
      <name>withFileExtension</name>
      <anchor>a5f16e7e85efcb3e8b1f1d925b388587d</anchor>
      <arglist>(const String &amp;newExtension) const </arglist>
    </member>
    <member kind="function">
      <name>getFileNameWithoutExtension</name>
      <anchor>adedb6acecf6276f401c408cba13bf309</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hashCode</name>
      <anchor>a990e6e4a166c52186b69f572c4dfc328</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hashCode64</name>
      <anchor>a0584182ef19bf00394df96731bceaa8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getChildFile</name>
      <anchor>a59522e7d073a31959e643c43487c416d</anchor>
      <arglist>(String relativePath) const </arglist>
    </member>
    <member kind="function">
      <name>getSiblingFile</name>
      <anchor>a465e8bd4bce3b2e0c83259e0d1291f32</anchor>
      <arglist>(const String &amp;siblingFileName) const </arglist>
    </member>
    <member kind="function">
      <name>getParentDirectory</name>
      <anchor>ad9057304e26d1d05775c6634aff991f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isAChildOf</name>
      <anchor>abf31d130e6661ca5ee63d33c808b4f93</anchor>
      <arglist>(const File &amp;potentialParentDirectory) const </arglist>
    </member>
    <member kind="function">
      <name>getNonexistentChildFile</name>
      <anchor>ad838cb0ec9ee76960a6e48d04f5f7f4f</anchor>
      <arglist>(const String &amp;prefix, const String &amp;suffix, bool putNumbersInBrackets=true) const </arglist>
    </member>
    <member kind="function">
      <name>getNonexistentSibling</name>
      <anchor>a6f22f2d97101f36611f30cdad47b02a3</anchor>
      <arglist>(bool putNumbersInBrackets=true) const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a61c9b6177040ca5a4d2ea58875fba54f</anchor>
      <arglist>(const File &amp;otherFile) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>af168841501996b399a273a32b7fad92d</anchor>
      <arglist>(const File &amp;otherFile) const </arglist>
    </member>
    <member kind="function">
      <name>hasWriteAccess</name>
      <anchor>a11825b7fffe497f31c15c4a35e1e0353</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setReadOnly</name>
      <anchor>aaa0a3838942816c19fbffbffeb687272</anchor>
      <arglist>(bool shouldBeReadOnly, bool applyRecursively=false) const </arglist>
    </member>
    <member kind="function">
      <name>isHidden</name>
      <anchor>adf74fb4603dfd5684a6fd68cbb5fa8ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLinkedTarget</name>
      <anchor>a43b28a9d8e38d504eb27f81c3ec441d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLastModificationTime</name>
      <anchor>a4e8c68417f1d85b916d1367e52437e41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLastAccessTime</name>
      <anchor>a657f4e0513337a5321c28dee38a2fe82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCreationTime</name>
      <anchor>a56cf72ebb00d151b45aa46255d45391c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setLastModificationTime</name>
      <anchor>a65a296ca3298f2e093b1690320641858</anchor>
      <arglist>(const Time &amp;newTime) const </arglist>
    </member>
    <member kind="function">
      <name>setLastAccessTime</name>
      <anchor>a86c41779480fd3d01b38a90320067367</anchor>
      <arglist>(const Time &amp;newTime) const </arglist>
    </member>
    <member kind="function">
      <name>setCreationTime</name>
      <anchor>a6923d5a8108b14af1e62133158a92169</anchor>
      <arglist>(const Time &amp;newTime) const </arglist>
    </member>
    <member kind="function">
      <name>getVersion</name>
      <anchor>ae648d398cde81312ff652f5b34ba3b06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>a854d3ccbb85de7b14a470c1802eec0f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createDirectory</name>
      <anchor>a0600a44214fee8b0cd40c9aeedbc284a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>deleteFile</name>
      <anchor>acca30337faecf8c3d97a1e70c725db23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>deleteRecursively</name>
      <anchor>a45a371d70965e5efc1566c0a51d9042c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>moveToTrash</name>
      <anchor>ad5657b8a600ed241a204656811c9522f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>moveFileTo</name>
      <anchor>a43a7e37203ed65b036a2c54f0f260857</anchor>
      <arglist>(const File &amp;targetLocation) const </arglist>
    </member>
    <member kind="function">
      <name>copyFileTo</name>
      <anchor>a101f3d5cbcc6a6ef91cf9331802010a6</anchor>
      <arglist>(const File &amp;targetLocation) const </arglist>
    </member>
    <member kind="function">
      <name>copyDirectoryTo</name>
      <anchor>a1bef0d97a327689afa9d95151cca542f</anchor>
      <arglist>(const File &amp;newDirectory) const </arglist>
    </member>
    <member kind="function">
      <name>findChildFiles</name>
      <anchor>a6b382c3eb3cbbbfd7ef5550e42b5260a</anchor>
      <arglist>(Array&lt; File &gt; &amp;results, int whatToLookFor, bool searchRecursively, const String &amp;wildCardPattern=&quot;*&quot;) const </arglist>
    </member>
    <member kind="function">
      <name>getNumberOfChildFiles</name>
      <anchor>a07e0af731f18680d32dd74043784a073</anchor>
      <arglist>(int whatToLookFor, const String &amp;wildCardPattern=&quot;*&quot;) const </arglist>
    </member>
    <member kind="function">
      <name>containsSubDirectories</name>
      <anchor>a14db3982beea141ca7492a093bf4588c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createInputStream</name>
      <anchor>aebd0de51f5df7da86749c90b68e5bc53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createOutputStream</name>
      <anchor>a55d5c85da1368d04c9a649d0753e5962</anchor>
      <arglist>(int bufferSize=0x8000) const </arglist>
    </member>
    <member kind="function">
      <name>loadFileAsData</name>
      <anchor>a0fa017212282bc314ec2eab9dce135d0</anchor>
      <arglist>(MemoryBlock &amp;result) const </arglist>
    </member>
    <member kind="function">
      <name>loadFileAsString</name>
      <anchor>aef403c0aeade9b0855581bb1930132fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>appendData</name>
      <anchor>a17e0a2c302c88ab8ea2d5acc7bbc0051</anchor>
      <arglist>(const void *dataToAppend, int numberOfBytes) const </arglist>
    </member>
    <member kind="function">
      <name>replaceWithData</name>
      <anchor>af60949e7051260cdfb8a5a146b1a6115</anchor>
      <arglist>(const void *dataToWrite, int numberOfBytes) const </arglist>
    </member>
    <member kind="function">
      <name>appendText</name>
      <anchor>a7908b0272d7564eb1f5a7505a5bc7351</anchor>
      <arglist>(const String &amp;textToAppend, bool asUnicode=false, bool writeUnicodeHeaderBytes=false) const </arglist>
    </member>
    <member kind="function">
      <name>replaceWithText</name>
      <anchor>ab3476536a97b787f00b5988cdb326816</anchor>
      <arglist>(const String &amp;textToWrite, bool asUnicode=false, bool writeUnicodeHeaderBytes=false) const </arglist>
    </member>
    <member kind="function">
      <name>findFileSystemRoots</name>
      <anchor>a694de291d70096e9d31d0c95b432bcb6</anchor>
      <arglist>(Array&lt; File &gt; &amp;results)</arglist>
    </member>
    <member kind="function">
      <name>getVolumeLabel</name>
      <anchor>af989bebfbcd7cb64817f53e1f0df88ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getVolumeSerialNumber</name>
      <anchor>ae07267c9417d77ef094253ecb206d842</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBytesFreeOnVolume</name>
      <anchor>a881a4b5846c746c58c7dc1c7893e3ee5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getVolumeTotalSize</name>
      <anchor>a9737848d54ead1fe75cf289e37d1f95f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isOnCDRomDrive</name>
      <anchor>a4c71649a114a7f475599cbfa91af0f60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isOnHardDisk</name>
      <anchor>a8342584e08db6ffa9a0def1308d8030f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isOnRemovableDrive</name>
      <anchor>ad04995c68c992916f0ba3c35dd1731ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>startAsProcess</name>
      <anchor>ab53026180cda413853c62a8a9aedcd00</anchor>
      <arglist>(const String &amp;parameters=String::empty) const </arglist>
    </member>
    <member kind="function">
      <name>revealToUser</name>
      <anchor>a1e5beaaa04e6944be45c90fe331e0531</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSpecialLocation</name>
      <anchor>ae3bed04d97f2cb0c1bcf423cc7fdeb05</anchor>
      <arglist>(const SpecialLocationType type)</arglist>
    </member>
    <member kind="function">
      <name>createTempFile</name>
      <anchor>a2544edfce8b9faa400b27f77eaa3ff17</anchor>
      <arglist>(const String &amp;fileNameEnding)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentWorkingDirectory</name>
      <anchor>a1bc680d45e19c35e57f5d6627b88ca91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAsCurrentWorkingDirectory</name>
      <anchor>a65e0278d019871c800bc334d5dd7c7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createLegalFileName</name>
      <anchor>a0b53c2b3ad3b1e82aa24b8142460fd7f</anchor>
      <arglist>(const String &amp;fileNameToFix)</arglist>
    </member>
    <member kind="function">
      <name>createLegalPathName</name>
      <anchor>a3f5e815a8f0412460fb32e05eac13cda</anchor>
      <arglist>(const String &amp;pathNameToFix)</arglist>
    </member>
    <member kind="function">
      <name>areFileNamesCaseSensitive</name>
      <anchor>a35111cb43b1e49c523b67c65a337764c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isAbsolutePath</name>
      <anchor>a9674737530eec6eeeba74576231aa815</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <name>createFileWithoutCheckingPath</name>
      <anchor>a265906f02a6a19c4ec6815e2706bf973</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <name>nonexistent</name>
      <anchor>abdcef33a1c846d17b4405e0939358364</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>separator</name>
      <anchor>a03d104ec7dd9600dbfb8cfdd25585135</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>separatorString</name>
      <anchor>a8f2041d14cb2878dac3775e28951e109</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileBasedDocument</name>
    <base>ChangeBroadcaster</base>
    <filename>classFileBasedDocument.html</filename>
    <member kind="function">
      <name>SaveResult</name>
      <anchor>a89d417326aed46fb561c599265e426d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>avedOk</name>
      <anchor>a89d417326aed46fb561c599265e426d2aa0f8eec65cc59595a5e7d665c2a2efeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>serCancelledSave</name>
      <anchor>a89d417326aed46fb561c599265e426d2a29ad285f4aa606eb17b9f7f0de211f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ailedToWriteToFile</name>
      <anchor>a89d417326aed46fb561c599265e426d2a7b2f3f4edd3dc5b02d1578ef4594f394</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FileBasedDocument</name>
      <anchor>a67651e24e6e4bd15b08edb2d101910aa</anchor>
      <arglist>(const String &amp;fileExtension, const String &amp;fileWildCard, const String &amp;openFileDialogTitle, const String &amp;saveFileDialogTitle)</arglist>
    </member>
    <member kind="function">
      <name>~FileBasedDocument</name>
      <anchor>a030915656fbe64df18d25b67fb7c0268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasChangedSinceSaved</name>
      <anchor>a8a12cf36feeaec35c7d9cf4d7823bf72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>changed</name>
      <anchor>a3a058b73776404d76b828205ca058e42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setChangedFlag</name>
      <anchor>a60543bfd5b8889f23714e1b5cc72c44a</anchor>
      <arglist>(bool hasChanged)</arglist>
    </member>
    <member kind="function">
      <name>loadFrom</name>
      <anchor>a306a20730d9affcc1cf744d8cfaacb27</anchor>
      <arglist>(const File &amp;fileToLoadFrom, bool showMessageOnFailure)</arglist>
    </member>
    <member kind="function">
      <name>loadFromUserSpecifiedFile</name>
      <anchor>ae9dfad2bdd9692ac31ff8cb87e97e38d</anchor>
      <arglist>(bool showMessageOnFailure)</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>a8059227774bee831db9ca4d402c68321</anchor>
      <arglist>(bool askUserForFileIfNotSpecified, bool showMessageOnFailure)</arglist>
    </member>
    <member kind="function">
      <name>saveIfNeededAndUserAgrees</name>
      <anchor>a619ff6ed84d0c0471c5bf7cf98b82d85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>saveAs</name>
      <anchor>a6e2943c148904e4d5357353034e69614</anchor>
      <arglist>(const File &amp;newFile, bool warnAboutOverwritingExistingFiles, bool askUserForFileIfNotSpecified, bool showMessageOnFailure)</arglist>
    </member>
    <member kind="function">
      <name>saveAsInteractive</name>
      <anchor>aa57557b32e2d2c61ef31f202e74521ad</anchor>
      <arglist>(bool warnAboutOverwritingExistingFiles)</arglist>
    </member>
    <member kind="function">
      <name>getFile</name>
      <anchor>aaa56228644acd50fcbee00463674d187</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setFile</name>
      <anchor>ae9831c5ca4576665d1876c129976a3f8</anchor>
      <arglist>(const File &amp;newFile)</arglist>
    </member>
    <member kind="function">
      <name>getDocumentTitle</name>
      <anchor>a0da8b320335dfcff6925be5275f6610a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>loadDocument</name>
      <anchor>a97740faec6ac2b08332c8c536d94ad9a</anchor>
      <arglist>(const File &amp;file)=0</arglist>
    </member>
    <member kind="function">
      <name>saveDocument</name>
      <anchor>a40c12c01d35346d7796c260eec1b54fc</anchor>
      <arglist>(const File &amp;file)=0</arglist>
    </member>
    <member kind="function">
      <name>getLastDocumentOpened</name>
      <anchor>a1077e5784625e0faecdd0d064b50db64</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>setLastDocumentOpened</name>
      <anchor>ad8fa1517b5af884e0213ee365dcf65f4</anchor>
      <arglist>(const File &amp;file)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileBrowserComponent</name>
    <base>Component</base>
    <base>ChangeBroadcaster</base>
    <base>FileBrowserListener</base>
    <base>TextEditorListener</base>
    <base>ButtonListener</base>
    <base>ComboBoxListener</base>
    <base>FileFilter</base>
    <filename>classFileBrowserComponent.html</filename>
    <member kind="function">
      <name>FileChooserFlags</name>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>penMode</name>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6a15f4871e1610d912885cc6de504e13e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>aveMode</name>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6aca3d0a66bd4fc606ab874b3da93a4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>anSelectFiles</name>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6a07878819a9559235bff2789c1fdbd8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>anSelectDirectories</name>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6ab7e808e7b8a33afb0150e9ea6047c2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>anSelectMultipleItems</name>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6a0eacc483cb1561acdce859beed28364f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>seTreeView</name>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6ab8a34263300c3e493f2a00deee6fc933</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ilenameBoxIsReadOnly</name>
      <anchor>a32888a950cc0e51c8e1350f53bea43d6ab3724f30e884acc493ed9cb6bd064971</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FileBrowserComponent</name>
      <anchor>a280d477349b38219b4870775aa4f67a2</anchor>
      <arglist>(int flags, const File &amp;initialFileOrDirectory, const FileFilter *fileFilter, FilePreviewComponent *previewComp)</arglist>
    </member>
    <member kind="function">
      <name>~FileBrowserComponent</name>
      <anchor>a7b829347edb8c65bcffaee2035ace1a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumSelectedFiles</name>
      <anchor>afde6db279fc212f5101fac3d33448ddd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSelectedFile</name>
      <anchor>ab8f949ba32690d5554f436bde6b76c1a</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>currentFileIsValid</name>
      <anchor>a9eddd1d64c2fe4d710a7c9fc607dca3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHighlightedFile</name>
      <anchor>aeb5738ba0bdb6658d93c78d4def9988e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRoot</name>
      <anchor>a02b36cc9300bc7f0c5ecbded5382c78e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setRoot</name>
      <anchor>a8537220a265903e339112794b2740f4c</anchor>
      <arglist>(const File &amp;newRootDirectory)</arglist>
    </member>
    <member kind="function">
      <name>goUp</name>
      <anchor>a7c7382598466ef33dfc1cceb33bb60cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>ad8f5511627f790847298053874cb2e39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getActionVerb</name>
      <anchor>aa7aa96d01f1c7cb2f6aa36e39aa8257f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isSaveMode</name>
      <anchor>a9a16d5633261bd359fa7520f9b7e2f19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>ace96c9461921628b0668a0c38184d5e7</anchor>
      <arglist>(FileBrowserListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>a92160e65690ad6288ef9eff9da052ae9</anchor>
      <arglist>(FileBrowserListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>ae85280c84ca33bd953211046b78dc7ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>a160684962dc54df714eaef069448eb77</anchor>
      <arglist>(Button *b)</arglist>
    </member>
    <member kind="function">
      <name>comboBoxChanged</name>
      <anchor>ae91b55afeea5cedcfe7948a59b09edc2</anchor>
      <arglist>(ComboBox *)</arglist>
    </member>
    <member kind="function">
      <name>textEditorTextChanged</name>
      <anchor>aa760e38f9f5a5b59266741ae6f39c42b</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function">
      <name>textEditorReturnKeyPressed</name>
      <anchor>ab725277f1d4301f4d1c08d1576436dcf</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function">
      <name>textEditorEscapeKeyPressed</name>
      <anchor>ac7489dbe0c83e83efe3ce928f6945750</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function">
      <name>textEditorFocusLost</name>
      <anchor>a83dd9df7f78dbddeb9aeefeefd28856f</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>ac78bd364b573d4e56badb462a6de1df9</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>a097ccbcfecf9f03e5ef3aa8838d0bd0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileClicked</name>
      <anchor>a0eed37d455232ffba328dfa442226999</anchor>
      <arglist>(const File &amp;f, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>fileDoubleClicked</name>
      <anchor>a4272da8f344731aec349af638a65163c</anchor>
      <arglist>(const File &amp;f)</arglist>
    </member>
    <member kind="function">
      <name>isFileSuitable</name>
      <anchor>a96450fda94dc648ec33732f98df4ff2b</anchor>
      <arglist>(const File &amp;file) const </arglist>
    </member>
    <member kind="function">
      <name>isDirectorySuitable</name>
      <anchor>a94f5e36b715499fe8febf1bb4203f74f</anchor>
      <arglist>(const File &amp;) const </arglist>
    </member>
    <member kind="function">
      <name>getPreviewComponent</name>
      <anchor>a5952d22ec1289aea9d03e8d5cee69da0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRoots</name>
      <anchor>aecf90c0dfb2e4b12af87fc15cebe0d54</anchor>
      <arglist>(StringArray &amp;rootNames, StringArray &amp;rootPaths)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileBrowserListener</name>
    <filename>classFileBrowserListener.html</filename>
    <member kind="function">
      <name>~FileBrowserListener</name>
      <anchor>a5b66c7c2bd94c9a2ae5a48d6fb287346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>a70f633952496b13ef6f2c054615affd9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>fileClicked</name>
      <anchor>a16d17e5c9097cc3ed9794edfdfe838c4</anchor>
      <arglist>(const File &amp;file, const MouseEvent &amp;e)=0</arglist>
    </member>
    <member kind="function">
      <name>fileDoubleClicked</name>
      <anchor>ac2a06208299afcdf60dc7ea2f4dcd450</anchor>
      <arglist>(const File &amp;file)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileChooser</name>
    <filename>classFileChooser.html</filename>
    <member kind="function">
      <name>FileChooser</name>
      <anchor>a7f950ec1898a9cd3f74d7df5df9b85ea</anchor>
      <arglist>(const String &amp;dialogBoxTitle, const File &amp;initialFileOrDirectory=File::nonexistent, const String &amp;filePatternsAllowed=String::empty, bool useOSNativeDialogBox=true)</arglist>
    </member>
    <member kind="function">
      <name>~FileChooser</name>
      <anchor>a67c94ae24fad94cf464d1283f33175d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>browseForFileToOpen</name>
      <anchor>aefb11cbc801d03c20b0ce271e3b20e40</anchor>
      <arglist>(FilePreviewComponent *previewComponent=0)</arglist>
    </member>
    <member kind="function">
      <name>browseForMultipleFilesToOpen</name>
      <anchor>a8d89778ce04c2373fc7db535bc3365e6</anchor>
      <arglist>(FilePreviewComponent *previewComponent=0)</arglist>
    </member>
    <member kind="function">
      <name>browseForFileToSave</name>
      <anchor>a1ccbbb48aefc471ea70c34f9ab18fcd1</anchor>
      <arglist>(bool warnAboutOverwritingExistingFiles)</arglist>
    </member>
    <member kind="function">
      <name>browseForDirectory</name>
      <anchor>afdbce2d962f0c6c117d897e9e8687116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>browseForMultipleFilesOrDirectories</name>
      <anchor>ae71e12cc990ae12d261a3d05388cd713</anchor>
      <arglist>(FilePreviewComponent *previewComponent=0)</arglist>
    </member>
    <member kind="function">
      <name>getResult</name>
      <anchor>a0741ed411a92fe6d45dca949c07426a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getResults</name>
      <anchor>a530df3be774b8933e93f8a2be6a9f573</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileChooserDialogBox</name>
    <base>ResizableWindow</base>
    <base>ButtonListener</base>
    <base>FileBrowserListener</base>
    <filename>classFileChooserDialogBox.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>aec403ffe26c5b7e34b6811cfb063df75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>itleTextColourId</name>
      <anchor>aec403ffe26c5b7e34b6811cfb063df75acafefa55a6db4bba4a908e5ea63b3a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FileChooserDialogBox</name>
      <anchor>aacbcd5d0559e90827e3ffd0490c36346</anchor>
      <arglist>(const String &amp;title, const String &amp;instructions, FileBrowserComponent &amp;browserComponent, bool warnAboutOverwritingExistingFiles, const Colour &amp;backgroundColour)</arglist>
    </member>
    <member kind="function">
      <name>~FileChooserDialogBox</name>
      <anchor>a96980634d76e05ebc454ecfb5f020176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>show</name>
      <anchor>abeddc88741bc4e9661ce96e26ba3590c</anchor>
      <arglist>(int width=0, int height=0)</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>a22e6e2a8017b01833f5610ef48ded1a3</anchor>
      <arglist>(Button *button)</arglist>
    </member>
    <member kind="function">
      <name>closeButtonPressed</name>
      <anchor>a9e15f6562f7b236c017f59772a398694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>a8e15c4cefdb60b4a4a2938e978ae9fed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileClicked</name>
      <anchor>a36f7cfd79d1fde808f296c7705a35d91</anchor>
      <arglist>(const File &amp;file, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>fileDoubleClicked</name>
      <anchor>aa38844c311294853bfcbf7f19408cc88</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileDragAndDropTarget</name>
    <filename>classFileDragAndDropTarget.html</filename>
    <member kind="function">
      <name>~FileDragAndDropTarget</name>
      <anchor>ac2dd4bc23ee0e715943c90bfb12cfb92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isInterestedInFileDrag</name>
      <anchor>a44fa7f7e69dec8119c6b3a6ff9d2ddce</anchor>
      <arglist>(const StringArray &amp;files)=0</arglist>
    </member>
    <member kind="function">
      <name>fileDragEnter</name>
      <anchor>a474150f8eb50c1272ea3eef9e30522e6</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>fileDragMove</name>
      <anchor>ae07df070efc3dfcd54c7b97b36dc1b8e</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>fileDragExit</name>
      <anchor>a218984a4bb2fa6d33418c0f519e4685b</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function">
      <name>filesDropped</name>
      <anchor>adc7848885ab2d9380f242c6445b019d4</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileFilter</name>
    <filename>classFileFilter.html</filename>
    <member kind="function">
      <name>FileFilter</name>
      <anchor>a3f90501257450a3f88b3d143dec7946b</anchor>
      <arglist>(const String &amp;filterDescription)</arglist>
    </member>
    <member kind="function">
      <name>~FileFilter</name>
      <anchor>a969a3ec83a59362beeee0e4325dbdb6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDescription</name>
      <anchor>ad3a284bbde237de2c8c85d9052f534fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isFileSuitable</name>
      <anchor>aeda6e37c3d5696fec7cb77970706deff</anchor>
      <arglist>(const File &amp;file) const =0</arglist>
    </member>
    <member kind="function">
      <name>isDirectorySuitable</name>
      <anchor>ac133687fcf57ee26643d17af7df85e0a</anchor>
      <arglist>(const File &amp;file) const =0</arglist>
    </member>
    <member kind="function">
      <name>description</name>
      <anchor>a405f80abc17801d969bbaab30b4cec10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileInputSource</name>
    <base>InputSource</base>
    <filename>classFileInputSource.html</filename>
    <member kind="function">
      <name>FileInputSource</name>
      <anchor>a8b82f5ddec152b85a6481a6d6c82e1ca</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <name>~FileInputSource</name>
      <anchor>a02931f6b2178aaf377f014e279677793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createInputStream</name>
      <anchor>a0da92ee54e577fbd14352bc121d13c11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createInputStreamFor</name>
      <anchor>ac01db04a5397f2bd4da7f2bd9582ebae</anchor>
      <arglist>(const String &amp;relatedItemPath)</arglist>
    </member>
    <member kind="function">
      <name>hashCode</name>
      <anchor>ad502d2d89937525cce7179cee2104be8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileInputStream</name>
    <base>InputStream</base>
    <filename>classFileInputStream.html</filename>
    <member kind="function">
      <name>FileInputStream</name>
      <anchor>a277a7370f2a2f038e9258de395122510</anchor>
      <arglist>(const File &amp;fileToRead)</arglist>
    </member>
    <member kind="function">
      <name>~FileInputStream</name>
      <anchor>a48dfa318f2d5ebefc1489ac44edefde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFile</name>
      <anchor>a25480d2265249be98e6539bff7d7862e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTotalLength</name>
      <anchor>ae5f0c76cce2f78e36145532283655957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>ade84696bb793d206a64c8b4da92512c8</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)</arglist>
    </member>
    <member kind="function">
      <name>isExhausted</name>
      <anchor>ab57c67d696646e6acf1301cea635f053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>aa1ef13b569fe4690f35ae799a4ed0193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>ad66bd953e8e16e6ed07d39f0b3e5ad14</anchor>
      <arglist>(int64 pos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileListComponent</name>
    <base>ListBox</base>
    <base>DirectoryContentsDisplayComponent</base>
    <base>ListBoxModel</base>
    <base>ChangeListener</base>
    <filename>classFileListComponent.html</filename>
    <member kind="function">
      <name>FileListComponent</name>
      <anchor>adbd638f9975ed562d987ffc9425ea397</anchor>
      <arglist>(DirectoryContentsList &amp;listToShow)</arglist>
    </member>
    <member kind="function">
      <name>~FileListComponent</name>
      <anchor>addb0d8acf1582da5e55386321ff71895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumSelectedFiles</name>
      <anchor>ad63ce4326e3cfe2e4deeeb735da550ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSelectedFile</name>
      <anchor>ac9fd9dfb02e325715e9e33be582418cd</anchor>
      <arglist>(int index=0) const </arglist>
    </member>
    <member kind="function">
      <name>scrollToTop</name>
      <anchor>ac199579bb7313547a21c540a7b5b0d48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>changeListenerCallback</name>
      <anchor>a5bf207f13c19ae2dc49a9389c6971027</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <name>getNumRows</name>
      <anchor>a727944ea3e06b211c0115eb792e9cfe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintListBoxItem</name>
      <anchor>ac009e675d2b4446550b18345b0e64b1e</anchor>
      <arglist>(int, Graphics &amp;, int, int, bool)</arglist>
    </member>
    <member kind="function">
      <name>refreshComponentForRow</name>
      <anchor>ac3e5d364c6f601baba103c41aaafa691</anchor>
      <arglist>(int rowNumber, bool isRowSelected, Component *existingComponentToUpdate)</arglist>
    </member>
    <member kind="function">
      <name>selectedRowsChanged</name>
      <anchor>a5e9d674b21ee66c45daf19fc9193505c</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <name>deleteKeyPressed</name>
      <anchor>a3ca7e3d202f0a695eab38628b4c3a68e</anchor>
      <arglist>(int currentSelectedRow)</arglist>
    </member>
    <member kind="function">
      <name>returnKeyPressed</name>
      <anchor>a446f729961a0f3c4f1adb28e1554ab4e</anchor>
      <arglist>(int currentSelectedRow)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileLogger</name>
    <base>Logger</base>
    <filename>classFileLogger.html</filename>
    <member kind="function">
      <name>FileLogger</name>
      <anchor>a2d873dd232329a1602ae230b3d1e2736</anchor>
      <arglist>(const File &amp;fileToWriteTo, const String &amp;welcomeMessage, const int maxInitialFileSizeBytes=128 *1024)</arglist>
    </member>
    <member kind="function">
      <name>~FileLogger</name>
      <anchor>ab08af44f2de3fe1b51158132f9a399dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>logMessage</name>
      <anchor>a36e23aca4e91ff567ad79ff7eb3df695</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function">
      <name>getLogFile</name>
      <anchor>a1255f3c6808fe9c4899a497305ab1e2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createDefaultAppLogger</name>
      <anchor>af546ec5497b6bb3d126cf64f182fc2d9</anchor>
      <arglist>(const String &amp;logFileSubDirectoryName, const String &amp;logFileName, const String &amp;welcomeMessage, const int maxInitialFileSizeBytes=128 *1024)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilenameComponent</name>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>FileDragAndDropTarget</base>
    <base>AsyncUpdater</base>
    <base>ButtonListener</base>
    <base>ComboBoxListener</base>
    <filename>classFilenameComponent.html</filename>
    <member kind="function">
      <name>FilenameComponent</name>
      <anchor>af7e0ceb90d37ff9a92f453d9c59212d9</anchor>
      <arglist>(const String &amp;name, const File &amp;currentFile, bool canEditFilename, bool isDirectory, bool isForSaving, const String &amp;fileBrowserWildcard, const String &amp;enforcedSuffix, const String &amp;textWhenNothingSelected)</arglist>
    </member>
    <member kind="function">
      <name>~FilenameComponent</name>
      <anchor>afb93c7681259b25567f0b78008794ee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCurrentFile</name>
      <anchor>a939720893ee160e7e0345eb1e54a5999</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setCurrentFile</name>
      <anchor>a5a4dead1f0820321e9439a48eb52a588</anchor>
      <arglist>(File newFile, bool addToRecentlyUsedList, bool sendChangeNotification=true)</arglist>
    </member>
    <member kind="function">
      <name>setFilenameIsEditable</name>
      <anchor>a2b3bbfd73bd1f071a5c511f8782266d8</anchor>
      <arglist>(bool shouldBeEditable)</arglist>
    </member>
    <member kind="function">
      <name>setDefaultBrowseTarget</name>
      <anchor>a79934b297889977649251cae1afd323e</anchor>
      <arglist>(const File &amp;newDefaultDirectory)</arglist>
    </member>
    <member kind="function">
      <name>getRecentlyUsedFilenames</name>
      <anchor>aa29ef95e4d0cbd1ef2b114c1c29a02ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setRecentlyUsedFilenames</name>
      <anchor>a740fcb632383c83c32b744f16191e7cd</anchor>
      <arglist>(const StringArray &amp;filenames)</arglist>
    </member>
    <member kind="function">
      <name>addRecentlyUsedFile</name>
      <anchor>a4a49fee3ac243a55e7ef7db10535b432</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <name>setMaxNumberOfRecentFiles</name>
      <anchor>a6c0e43582a1abe9542b8382592f3e515</anchor>
      <arglist>(int newMaximum)</arglist>
    </member>
    <member kind="function">
      <name>setBrowseButtonText</name>
      <anchor>af3f994d7a7e5591322f01288b4a2000c</anchor>
      <arglist>(const String &amp;browseButtonText)</arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>a68d23410011d95128c87ad14dfca04f8</anchor>
      <arglist>(FilenameComponentListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>a37affd68e94d2099914b142bc6a5bc0d</anchor>
      <arglist>(FilenameComponentListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>setTooltip</name>
      <anchor>ad5fe19746b9f6fdd901ff55e1483c5d6</anchor>
      <arglist>(const String &amp;newTooltip)</arglist>
    </member>
    <member kind="function">
      <name>paintOverChildren</name>
      <anchor>aee44df6fd5bdd223cd27216c07f56a37</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a85417eceae2e7bbaec3addfff7ec0991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lookAndFeelChanged</name>
      <anchor>aa04497b25c3fd066518c2deb93daae7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isInterestedInFileDrag</name>
      <anchor>ae9b2c41affe5d644920389d6030a1866</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function">
      <name>filesDropped</name>
      <anchor>aa4e4085755587f59230ff52ff5fdd353</anchor>
      <arglist>(const StringArray &amp;files, int, int)</arglist>
    </member>
    <member kind="function">
      <name>fileDragEnter</name>
      <anchor>a02c4f2917eacf9763215883f0236a13f</anchor>
      <arglist>(const StringArray &amp;files, int, int)</arglist>
    </member>
    <member kind="function">
      <name>fileDragExit</name>
      <anchor>a2ec216d51fd5ad29159602a4f7a889f1</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilenameComponentListener</name>
    <filename>classFilenameComponentListener.html</filename>
    <member kind="function">
      <name>~FilenameComponentListener</name>
      <anchor>ae6b8bb26e3daf19d3b935cd5bea2e707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>filenameComponentChanged</name>
      <anchor>ab004f18f2a17ca43a7c153f8680a11f4</anchor>
      <arglist>(FilenameComponent *fileComponentThatHasChanged)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileOutputStream</name>
    <base>OutputStream</base>
    <filename>classFileOutputStream.html</filename>
    <member kind="function">
      <name>FileOutputStream</name>
      <anchor>a8fec01c54ed2612012b722141710fdbc</anchor>
      <arglist>(const File &amp;fileToWriteTo, int bufferSizeToUse=16384)</arglist>
    </member>
    <member kind="function">
      <name>~FileOutputStream</name>
      <anchor>aa0423041bf20194144689440ed94ade3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFile</name>
      <anchor>aaefbc546f0a295eea4abc66c4b1e1409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>failedToOpen</name>
      <anchor>a97866f9f1475abcd359f0e31121624dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>flush</name>
      <anchor>ac7ddf0244b8e03bf43ea1d873b65af28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>a460286bad1258c1ad1be8751a72a2205</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>ab20f6daa82d40203ffa8b00fb5f6c80b</anchor>
      <arglist>(int64 pos)</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>ae6238549583f374812e88be52e033882</anchor>
      <arglist>(const void *data, int numBytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilePreviewComponent</name>
    <base>Component</base>
    <filename>classFilePreviewComponent.html</filename>
    <member kind="function">
      <name>FilePreviewComponent</name>
      <anchor>a1d368e3ea93da423b44da9001d63cd5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~FilePreviewComponent</name>
      <anchor>aa2f2047c589d8aee5f4e92973c16e00c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectedFileChanged</name>
      <anchor>aa89507ce51322a1462bb12d1fd07715a</anchor>
      <arglist>(const File &amp;newSelectedFile)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileSearchPath</name>
    <filename>classFileSearchPath.html</filename>
    <member kind="function">
      <name>FileSearchPath</name>
      <anchor>a37b486aaabdae9e71f69310bcd32de79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>FileSearchPath</name>
      <anchor>a55b79d55adaa7a4635063088eb00dd2c</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <name>FileSearchPath</name>
      <anchor>a043b1f2ab48ded271f78b7ddd17a68f6</anchor>
      <arglist>(const FileSearchPath &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~FileSearchPath</name>
      <anchor>aefab78766a187af30986836b9ba1f70d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a663c28591c30e3f2f3c9ce07bdb680f9</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <name>getNumPaths</name>
      <anchor>ac23a53aa33f559222421ac4d17321804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>a20d84ed5045f65767d62d020a076e2bc</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>a20ab204b98eef91e74e87032e47ad7ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>a045b18e60858ac874c9fbf4b28c4f52f</anchor>
      <arglist>(const File &amp;directoryToAdd, int insertIndex=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>addIfNotAlreadyThere</name>
      <anchor>a1c282c10f1b2d4217959dc1514fc4611</anchor>
      <arglist>(const File &amp;directoryToAdd)</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>ad560bd8c08782e3eb0ead50ee2793161</anchor>
      <arglist>(int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <name>addPath</name>
      <anchor>a0c2d266907a5e34df0048bb9865703f1</anchor>
      <arglist>(const FileSearchPath &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>removeRedundantPaths</name>
      <anchor>ada0f0c385326ce152cf1b23c39b31516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeNonExistentPaths</name>
      <anchor>a9a3170aadec6b3dd9b2d5c263f87b9bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>findChildFiles</name>
      <anchor>a4ba70d62200ad57a85b1cb0ade33b1cf</anchor>
      <arglist>(Array&lt; File &gt; &amp;results, int whatToLookFor, bool searchRecursively, const String &amp;wildCardPattern=&quot;*&quot;) const </arglist>
    </member>
    <member kind="function">
      <name>isFileInPath</name>
      <anchor>a9b866d5ab02e3677c375bf1e3fa935f6</anchor>
      <arglist>(const File &amp;fileToCheck, bool checkRecursively) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileSearchPathListComponent</name>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>FileDragAndDropTarget</base>
    <base>ButtonListener</base>
    <base>ListBoxModel</base>
    <filename>classFileSearchPathListComponent.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>ad490e320611ac10c29f5c07e0c6aa30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>ad490e320611ac10c29f5c07e0c6aa30faaeb38822be9df0511374d2f6c0684790</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FileSearchPathListComponent</name>
      <anchor>a5e41ab33f6ec3c92c65d5ccbf6b1735a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~FileSearchPathListComponent</name>
      <anchor>aa19c5cc1e545558434fdd65239f38318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPath</name>
      <anchor>a4c85124046796a937410134593a58d81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setPath</name>
      <anchor>a04ad4d49fa2871532c5d66a682ef03a9</anchor>
      <arglist>(const FileSearchPath &amp;newPath)</arglist>
    </member>
    <member kind="function">
      <name>setDefaultBrowseTarget</name>
      <anchor>aac07a5d2f748148ca278a8d8826e6e43</anchor>
      <arglist>(const File &amp;newDefaultDirectory)</arglist>
    </member>
    <member kind="function">
      <name>getNumRows</name>
      <anchor>adab5968a6560b7f5def84290fc9bb02a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintListBoxItem</name>
      <anchor>aa95a61fc7de9f0e2d5643a6449c34158</anchor>
      <arglist>(int rowNumber, Graphics &amp;g, int width, int height, bool rowIsSelected)</arglist>
    </member>
    <member kind="function">
      <name>deleteKeyPressed</name>
      <anchor>a9f3c1e515a937e00d8ac6843967514a0</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <name>returnKeyPressed</name>
      <anchor>afe63228e9b3e14845d2aa4bfd4484678</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <name>listBoxItemDoubleClicked</name>
      <anchor>a0a47ee02b43741bcca7c630cd719cc8c</anchor>
      <arglist>(int row, const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>selectedRowsChanged</name>
      <anchor>a14e32eced450dcc84ca663f4f4386e14</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>aa7d61c91f1206b26e168477b93c43274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a19355d862b903b574f27e188095eaa79</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>isInterestedInFileDrag</name>
      <anchor>a4a9ea69e889bd338207f0b11bf68169f</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function">
      <name>filesDropped</name>
      <anchor>a97a40e4a8f032de64c4c450f5c220226</anchor>
      <arglist>(const StringArray &amp;files, int, int)</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>a1c691dc224b70cc1c02bf86ccdcfd015</anchor>
      <arglist>(Button *button)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileTreeComponent</name>
    <base>TreeView</base>
    <base>DirectoryContentsDisplayComponent</base>
    <filename>classFileTreeComponent.html</filename>
    <member kind="function">
      <name>FileTreeComponent</name>
      <anchor>ac2d6da93dff837221552e684749ce508</anchor>
      <arglist>(DirectoryContentsList &amp;listToShow)</arglist>
    </member>
    <member kind="function">
      <name>~FileTreeComponent</name>
      <anchor>a23f8e7a313601b0cba09ced9bdcc2dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumSelectedFiles</name>
      <anchor>a2a6c7a1c69078fe7a1755a49ec12a04a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSelectedFile</name>
      <anchor>a32bfa1b5b9997cf2d2582f42cc214d7b</anchor>
      <arglist>(int index=0) const </arglist>
    </member>
    <member kind="function">
      <name>scrollToTop</name>
      <anchor>a073e0467733f97816641d88f4fad899a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDragAndDropDescription</name>
      <anchor>acf0d725ef9505914f37e60ab433c84d4</anchor>
      <arglist>(const String &amp;description)</arglist>
    </member>
    <member kind="function">
      <name>getDragAndDropDescription</name>
      <anchor>a72d0508a5c1af8d7fdf3f7e34590e1e1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FillType</name>
    <filename>classFillType.html</filename>
    <member kind="function">
      <name>FillType</name>
      <anchor>a921efcfc3b58650b4eab09777cb6f5a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>FillType</name>
      <anchor>a2882421992580e2c61b65937acac58b7</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <name>FillType</name>
      <anchor>a5be046ef5a18f2a136a9b33b2486e58d</anchor>
      <arglist>(const ColourGradient &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <name>FillType</name>
      <anchor>a026fe1c0623f9b2415cbfc74f6c6fe60</anchor>
      <arglist>(const Image &amp;image, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>FillType</name>
      <anchor>accca5be8258d918b4cdce41b5bbca907</anchor>
      <arglist>(const FillType &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~FillType</name>
      <anchor>a52c5a09d3c35db3dc20048ad2bc60897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a41018ff8ebbb02d12d0d0117b4c4f9de</anchor>
      <arglist>(const FillType &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>isColour</name>
      <anchor>a4e81dfcbc6ed19b5038f21489b72f60e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isGradient</name>
      <anchor>ac53285be887e8a265ace589222492603</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isTiledImage</name>
      <anchor>ae3cb71d148a3cf43097476ac421a6e79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setColour</name>
      <anchor>abdd47ea731bf63498c17cabeedeffeb5</anchor>
      <arglist>(const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <name>setGradient</name>
      <anchor>a56bd20de45bbd44cd262245ea1ff3615</anchor>
      <arglist>(const ColourGradient &amp;newGradient)</arglist>
    </member>
    <member kind="function">
      <name>setTiledImage</name>
      <anchor>aa96a5894006bdead89e4450fdfab179b</anchor>
      <arglist>(const Image &amp;image, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>setOpacity</name>
      <anchor>a69d5071409c267342f23b9b6972749b2</anchor>
      <arglist>(float newOpacity)</arglist>
    </member>
    <member kind="function">
      <name>getOpacity</name>
      <anchor>aa471528b099b4cccf29f2d83adeafac5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>colour</name>
      <anchor>a6eb1907c0b75fccfbf45ede3b3b490d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>gradient</name>
      <anchor>a62d382f59a2bf0720245908a4269a805</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>image</name>
      <anchor>ac12246688ad4c659bbc5f593ee804373</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>transform</name>
      <anchor>a6302124b870bccda6a55b13a37a69744</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlacAudioFormat</name>
    <base>AudioFormat</base>
    <filename>classFlacAudioFormat.html</filename>
    <member kind="function">
      <name>FlacAudioFormat</name>
      <anchor>a767df3502e290183216370447d1dc7ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~FlacAudioFormat</name>
      <anchor>a71a95d6ee4ba2c401b82fc253be3c99b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPossibleSampleRates</name>
      <anchor>a65e6a35b77b4a97ad091b5f01f7f9f29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPossibleBitDepths</name>
      <anchor>ae1a87359d784213738409800092f226f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canDoStereo</name>
      <anchor>a1c139fb670a143f8d20b6de0e52048fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canDoMono</name>
      <anchor>af6345c8cc4eb0b6b7cf564d15291f3aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isCompressed</name>
      <anchor>a3f1df9dc90113b19635266689a843040</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createReaderFor</name>
      <anchor>a0a3c04679795e24ee4739dceacf8d18b</anchor>
      <arglist>(InputStream *sourceStream, const bool deleteStreamIfOpeningFails)</arglist>
    </member>
    <member kind="function">
      <name>createWriterFor</name>
      <anchor>aa7c76099fd21f91d57104d3db9ce3e90</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FocusChangeListener</name>
    <filename>classFocusChangeListener.html</filename>
    <member kind="function">
      <name>~FocusChangeListener</name>
      <anchor>aa63a86374b76c70ecc0bbae3977f17a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>globalFocusChanged</name>
      <anchor>aea1c72e9c4d918e41c729d79592fa956</anchor>
      <arglist>(Component *focusedComponent)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Font</name>
    <filename>classFont.html</filename>
    <member kind="function">
      <name>FontStyleFlags</name>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lain</name>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4fa99039e6bb438434f9bccde132132dd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>old</name>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4fa1af8035a650d8a663a3f67b3b6208eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>talic</name>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4fa1d2b466ff0cbcf7e762558b847b99a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nderlined</name>
      <anchor>a52a35b5dc1e6f782e25283c9283bae4fa3bb23d4d794ac926cd255a886aa37190</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Font</name>
      <anchor>a15524cff0cecb0d9525c786678a7935c</anchor>
      <arglist>(float fontHeight, int styleFlags=plain)</arglist>
    </member>
    <member kind="function">
      <name>Font</name>
      <anchor>ae41e6b5cf9c3c368aaace76f7208c2fa</anchor>
      <arglist>(const String &amp;typefaceName, float fontHeight, int styleFlags)</arglist>
    </member>
    <member kind="function">
      <name>Font</name>
      <anchor>a72947f4f561e23ddfa2d5880ac12b8ed</anchor>
      <arglist>(const Font &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Font</name>
      <anchor>a9524428484b892673994cd74f964a089</anchor>
      <arglist>(const Typeface::Ptr &amp;typeface)</arglist>
    </member>
    <member kind="function">
      <name>Font</name>
      <anchor>a4e6a119206f505522100221c1fafde45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~Font</name>
      <anchor>a134aaa2f78af0c12d3ce504957169768</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a90c12880975ecf9210ed7863aa2b30da</anchor>
      <arglist>(const Font &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a1a4e96077292ee1eb22639e79f028547</anchor>
      <arglist>(const Font &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>ae58a2b859d57fe0a804ebf56fa238f3c</anchor>
      <arglist>(const Font &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>setTypefaceName</name>
      <anchor>a79a3169e0685ade146aefe20b2250745</anchor>
      <arglist>(const String &amp;faceName)</arglist>
    </member>
    <member kind="function">
      <name>getTypefaceName</name>
      <anchor>a4365fd7a471a08a2daa27a8f4f39f4c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDefaultSansSerifFontName</name>
      <anchor>a3b419066d6f90c0cbb3dc3a3cede3b9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDefaultSerifFontName</name>
      <anchor>a360b5202b886f3ae7366313ed8c82542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDefaultMonospacedFontName</name>
      <anchor>adf56c03e49dc223669742c33ea144152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPlatformDefaultFontNames</name>
      <anchor>ac401d3c354f6fc6f89736e0c99e2dbc6</anchor>
      <arglist>(String &amp;defaultSans, String &amp;defaultSerif, String &amp;defaultFixed)</arglist>
    </member>
    <member kind="function">
      <name>getHeight</name>
      <anchor>a80a5d8bf18d01462edb58d77e3d89dc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setHeight</name>
      <anchor>a3dc7a6f8ab92c63a7a3551434806aebf</anchor>
      <arglist>(float newHeight)</arglist>
    </member>
    <member kind="function">
      <name>setHeightWithoutChangingWidth</name>
      <anchor>a704ed07aafcb44d99cf5724e08893316</anchor>
      <arglist>(float newHeight)</arglist>
    </member>
    <member kind="function">
      <name>getAscent</name>
      <anchor>adf2c00fbf24a05b02b5b8e6cf41f37b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDescent</name>
      <anchor>afb12eaca61c64310775518f68ad7cf35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getStyleFlags</name>
      <anchor>a4454a2e3ecd52f9ed672d933c9eb18dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setStyleFlags</name>
      <anchor>a8f88bd8f46a78e6b7a93128621cca13d</anchor>
      <arglist>(const int newFlags)</arglist>
    </member>
    <member kind="function">
      <name>setBold</name>
      <anchor>a46c360f86677fda0471d61c22eb82a3a</anchor>
      <arglist>(bool shouldBeBold)</arglist>
    </member>
    <member kind="function">
      <name>isBold</name>
      <anchor>aa493dbdfd33a0ca1de55a59e85ced23b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setItalic</name>
      <anchor>a4c72d0b30c88f8119f285306acbb4344</anchor>
      <arglist>(bool shouldBeItalic)</arglist>
    </member>
    <member kind="function">
      <name>isItalic</name>
      <anchor>a217ff4da9be48160160f7853227f7bd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setUnderline</name>
      <anchor>af107c023ff440651ae9291cdf058b7c1</anchor>
      <arglist>(bool shouldBeUnderlined)</arglist>
    </member>
    <member kind="function">
      <name>isUnderlined</name>
      <anchor>a05800b92ac08a8c3fe6ed87645702cb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setHorizontalScale</name>
      <anchor>a305977210a0e621b8c36bbce58d665aa</anchor>
      <arglist>(float scaleFactor)</arglist>
    </member>
    <member kind="function">
      <name>getHorizontalScale</name>
      <anchor>ae6f114f64e73a20ba56e1751bd53d9a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setExtraKerningFactor</name>
      <anchor>a996b7095b0956f62b71f24893e72a914</anchor>
      <arglist>(float extraKerning)</arglist>
    </member>
    <member kind="function">
      <name>getExtraKerningFactor</name>
      <anchor>a4ec54da0a62c6b44a3e6e11f1febecd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setSizeAndStyle</name>
      <anchor>adda175db2fae3b56a41d59db82b26ab8</anchor>
      <arglist>(float newHeight, int newStyleFlags, float newHorizontalScale, float newKerningAmount)</arglist>
    </member>
    <member kind="function">
      <name>getStringWidth</name>
      <anchor>aed4d0579fb11ca1bba6c68e5bd02e1b2</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <name>getStringWidthFloat</name>
      <anchor>a9fac3d0ffd0163d9063047d78db7781c</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <name>getGlyphPositions</name>
      <anchor>a6040a5e844539fb75c720b1d6d0ae053</anchor>
      <arglist>(const String &amp;text, Array&lt; int &gt; &amp;glyphs, Array&lt; float &gt; &amp;xOffsets) const </arglist>
    </member>
    <member kind="function">
      <name>getTypeface</name>
      <anchor>a7b3902ae5dde1ad8cd5f5cd5c6fb3960</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>findFonts</name>
      <anchor>a95f7587d2f1bb76329f4f09444b09cdb</anchor>
      <arglist>(Array&lt; Font &gt; &amp;results)</arglist>
    </member>
    <member kind="function">
      <name>findAllTypefaceNames</name>
      <anchor>a1c39b7cff81b200028356da25bf98e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFallbackFontName</name>
      <anchor>a51c33f7cebff26724100ce7862288747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFallbackFontName</name>
      <anchor>ad898e9741496ae8fe48aa27198732733</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericAudioProcessorEditor</name>
    <base>AudioProcessorEditor</base>
    <filename>classGenericAudioProcessorEditor.html</filename>
    <member kind="function">
      <name>GenericAudioProcessorEditor</name>
      <anchor>a82b0509773fdcb7ba29b0e6e09a003dd</anchor>
      <arglist>(AudioProcessor *const owner)</arglist>
    </member>
    <member kind="function">
      <name>~GenericAudioProcessorEditor</name>
      <anchor>a3a06a90ce44f2715a2741eed8636c5ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a61acb775686bfb1e6dbcd2eb70e3da5b</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a12d7eba07748502e6c8533e93bb08ddf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlowEffect</name>
    <base>ImageEffectFilter</base>
    <filename>classGlowEffect.html</filename>
    <member kind="function">
      <name>GlowEffect</name>
      <anchor>a8ffa8313feae185387d68af2983cdeea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~GlowEffect</name>
      <anchor>a15493b06f02825726df3e69c6a5e4a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setGlowProperties</name>
      <anchor>a2864ac6d0fcbfab43e10e13e6412168a</anchor>
      <arglist>(const float newRadius, const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <name>applyEffect</name>
      <anchor>a0aeeff341274a3fd1cc1d327a3dbee6a</anchor>
      <arglist>(Image &amp;sourceImage, Graphics &amp;destContext)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlyphArrangement</name>
    <filename>classGlyphArrangement.html</filename>
    <member kind="function">
      <name>GlyphArrangement</name>
      <anchor>ab05924e6a7eded55ad3d030fbc55d5ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GlyphArrangement</name>
      <anchor>af7176b40ebcf58f8eee687b94515b912</anchor>
      <arglist>(const GlyphArrangement &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~GlyphArrangement</name>
      <anchor>aa6a89d95ae356910d04d56121f44d693</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>aa6fd6205db7ea08cf1aa32f88a0016c9</anchor>
      <arglist>(const GlyphArrangement &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>getNumGlyphs</name>
      <anchor>a10e915f64e78c3056e46d89160434257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getGlyph</name>
      <anchor>ae5d54fc2b1b0da9c7e973594a85442d7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a910c2396f3737e63dbf6d0ce4e8fdf94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addLineOfText</name>
      <anchor>a0ace103d7c4b6600dcea7aff1f26811d</anchor>
      <arglist>(const Font &amp;font, const String &amp;text, float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>addCurtailedLineOfText</name>
      <anchor>a7bd1c1d0e03dfd9ecc19a826b78975aa</anchor>
      <arglist>(const Font &amp;font, const String &amp;text, float x, float y, float maxWidthPixels, bool useEllipsis)</arglist>
    </member>
    <member kind="function">
      <name>addJustifiedText</name>
      <anchor>a5cc600b28d93cb972baf14d3be08859f</anchor>
      <arglist>(const Font &amp;font, const String &amp;text, float x, float y, float maxLineWidth, const Justification &amp;horizontalLayout)</arglist>
    </member>
    <member kind="function">
      <name>addFittedText</name>
      <anchor>a18cfbfb3481a8f6d498e58be4f1c438b</anchor>
      <arglist>(const Font &amp;font, const String &amp;text, float x, float y, float width, float height, const Justification &amp;layout, int maximumLinesToUse, float minimumHorizontalScale=0.7f)</arglist>
    </member>
    <member kind="function">
      <name>addGlyphArrangement</name>
      <anchor>a985ca35c831980383080c6565caf36b4</anchor>
      <arglist>(const GlyphArrangement &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>a5944d7c77faa1ea9ab6273d5806860c6</anchor>
      <arglist>(const Graphics &amp;g) const </arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>ab0a6d27632c9a1bc564aa8b50330551e</anchor>
      <arglist>(const Graphics &amp;g, const AffineTransform &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <name>createPath</name>
      <anchor>a35cd45ff7bd974e0c4876142eef16c90</anchor>
      <arglist>(Path &amp;path) const </arglist>
    </member>
    <member kind="function">
      <name>findGlyphIndexAt</name>
      <anchor>aca23d4051cb4934df16f76a128798e01</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <name>getBoundingBox</name>
      <anchor>a06152a880be9c0113ea4085b1d766509</anchor>
      <arglist>(int startIndex, int numGlyphs, bool includeWhitespace) const </arglist>
    </member>
    <member kind="function">
      <name>moveRangeOfGlyphs</name>
      <anchor>a56badaeaf0b5dbeed1920757fd8c9a05</anchor>
      <arglist>(int startIndex, int numGlyphs, float deltaX, float deltaY)</arglist>
    </member>
    <member kind="function">
      <name>removeRangeOfGlyphs</name>
      <anchor>ad3fcc973e64f466911320e90ca57a322</anchor>
      <arglist>(int startIndex, int numGlyphs)</arglist>
    </member>
    <member kind="function">
      <name>stretchRangeOfGlyphs</name>
      <anchor>a70fb63a9d205a4af5f3cb258f2b8b501</anchor>
      <arglist>(int startIndex, int numGlyphs, float horizontalScaleFactor)</arglist>
    </member>
    <member kind="function">
      <name>justifyGlyphs</name>
      <anchor>a4f5a5b4bfea37fb1bcfc4747b0f4bbc5</anchor>
      <arglist>(int startIndex, int numGlyphs, float x, float y, float width, float height, const Justification &amp;justification)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Graphics</name>
    <filename>classGraphics.html</filename>
    <member kind="function">
      <name>ResamplingQuality</name>
      <anchor>a5da218e649d1b5ac3d67443ae77caf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>owResamplingQuality</name>
      <anchor>a5da218e649d1b5ac3d67443ae77caf87a4eb9cfa2e544befd2d50708e3316b28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ediumResamplingQuality</name>
      <anchor>a5da218e649d1b5ac3d67443ae77caf87a5d8dfbf84457e91eb309b1402562f2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ighResamplingQuality</name>
      <anchor>a5da218e649d1b5ac3d67443ae77caf87ae3c4b3cdf28f0aefc035977522675e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Graphics</name>
      <anchor>a7d27eef24426332d97f00b20fea7bb2f</anchor>
      <arglist>(Image &amp;imageToDrawOnto)</arglist>
    </member>
    <member kind="function">
      <name>~Graphics</name>
      <anchor>a7841c9a961ac9bca33bd30ddf8066cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Graphics</name>
      <anchor>a8cbef931fb218cd11049ebe231ca916d</anchor>
      <arglist>(LowLevelGraphicsContext *const internalContext)</arglist>
    </member>
    <member kind="function">
      <name>setColour</name>
      <anchor>af17c43bb97e6822aa4b7b8a8adc40b99</anchor>
      <arglist>(const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <name>setOpacity</name>
      <anchor>a6b4e00e942fae5f34d1133c4ddb8c2d1</anchor>
      <arglist>(const float newOpacity)</arglist>
    </member>
    <member kind="function">
      <name>setGradientFill</name>
      <anchor>a57478bc2496ebb84696e5ba64b455965</anchor>
      <arglist>(const ColourGradient &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <name>setTiledImageFill</name>
      <anchor>a675cd4c4715165f0a0aec0bd8c3fe390</anchor>
      <arglist>(const Image &amp;imageToUse, int anchorX, int anchorY, float opacity)</arglist>
    </member>
    <member kind="function">
      <name>setFillType</name>
      <anchor>a763ea233d7b7c8e45e33c7ea8030ff48</anchor>
      <arglist>(const FillType &amp;newFill)</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>a1fbdb321975d90c45243027a61ac2be9</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>af6e07de35e7d2777f9152633b0932fbd</anchor>
      <arglist>(float newFontHeight, int fontStyleFlags=Font::plain)</arglist>
    </member>
    <member kind="function">
      <name>drawSingleLineText</name>
      <anchor>ac3248b7c88c744533da5708d3e176915</anchor>
      <arglist>(const String &amp;text, int startX, int baselineY) const </arglist>
    </member>
    <member kind="function">
      <name>drawMultiLineText</name>
      <anchor>a37c017a9d2f32bcd677f61f5de97ab9a</anchor>
      <arglist>(const String &amp;text, int startX, int baselineY, int maximumLineWidth) const </arglist>
    </member>
    <member kind="function">
      <name>drawTextAsPath</name>
      <anchor>a837821b4bab764d76df560350e069b45</anchor>
      <arglist>(const String &amp;text, const AffineTransform &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>aa03c871748cf584b548663b79da7926c</anchor>
      <arglist>(const String &amp;text, int x, int y, int width, int height, const Justification &amp;justificationType, bool useEllipsesIfTooBig) const </arglist>
    </member>
    <member kind="function">
      <name>drawFittedText</name>
      <anchor>ad2c56e11c42bc7404233b9a23e939ede</anchor>
      <arglist>(const String &amp;text, int x, int y, int width, int height, const Justification &amp;justificationFlags, int maximumNumberOfLines, float minimumHorizontalScale=0.7f) const </arglist>
    </member>
    <member kind="function">
      <name>fillAll</name>
      <anchor>a516a7795e6e0c6c70eb982a83ea0b8c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>fillAll</name>
      <anchor>a29e9bc174cf54be0f423172e24d5cf78</anchor>
      <arglist>(const Colour &amp;colourToUse) const </arglist>
    </member>
    <member kind="function">
      <name>fillRect</name>
      <anchor>ac2202ef993b53d77d8646ed4ce3ea9d1</anchor>
      <arglist>(int x, int y, int width, int height) const </arglist>
    </member>
    <member kind="function">
      <name>fillRect</name>
      <anchor>a9ff78524c757a302ad8b9cbc4c7ba851</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangle) const </arglist>
    </member>
    <member kind="function">
      <name>fillRect</name>
      <anchor>a018bffc13a318cb5e59d29b258313b8b</anchor>
      <arglist>(float x, float y, float width, float height) const </arglist>
    </member>
    <member kind="function">
      <name>fillRoundedRectangle</name>
      <anchor>a1049a2dae8a1ae3e5e57238f2fd36a84</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSize) const </arglist>
    </member>
    <member kind="function">
      <name>fillRoundedRectangle</name>
      <anchor>afc06f32c228086e55876184176314bd1</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;rectangle, float cornerSize) const </arglist>
    </member>
    <member kind="function">
      <name>fillCheckerBoard</name>
      <anchor>a3673bf3576ed2a0330a9a036683b5608</anchor>
      <arglist>(int x, int y, int width, int height, int checkWidth, int checkHeight, const Colour &amp;colour1, const Colour &amp;colour2) const </arglist>
    </member>
    <member kind="function">
      <name>drawRect</name>
      <anchor>a28baf90f8e11ec6f96c349f45e09a9d0</anchor>
      <arglist>(int x, int y, int width, int height, int lineThickness=1) const </arglist>
    </member>
    <member kind="function">
      <name>drawRect</name>
      <anchor>a7b8a15c73c5d797cd169852224236f4f</anchor>
      <arglist>(float x, float y, float width, float height, float lineThickness=1.0f) const </arglist>
    </member>
    <member kind="function">
      <name>drawRect</name>
      <anchor>a88e7c28b48c3f2e9e2c9df7d2571908f</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangle, int lineThickness=1) const </arglist>
    </member>
    <member kind="function">
      <name>drawRoundedRectangle</name>
      <anchor>a78541e36136eb040c4b8c81d4b8db8dd</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSize, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <name>drawRoundedRectangle</name>
      <anchor>a91706e86b7120523346fee8f2161d48f</anchor>
      <arglist>(const Rectangle&lt; float &gt; &amp;rectangle, float cornerSize, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <name>drawBevel</name>
      <anchor>a9785e9e0d63e8576db415decc7f5b2cd</anchor>
      <arglist>(int x, int y, int width, int height, int bevelThickness, const Colour &amp;topLeftColour=Colours::white, const Colour &amp;bottomRightColour=Colours::black, bool useGradient=true, bool sharpEdgeOnOutside=true) const </arglist>
    </member>
    <member kind="function">
      <name>setPixel</name>
      <anchor>a69e70db1afc03d58f9055f8f45d8e5d1</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <name>fillEllipse</name>
      <anchor>ab6fdfd1cb32b32d52b6b30df36321f70</anchor>
      <arglist>(float x, float y, float width, float height) const </arglist>
    </member>
    <member kind="function">
      <name>drawEllipse</name>
      <anchor>ac88110d5407539aa1be841a89d5170b0</anchor>
      <arglist>(float x, float y, float width, float height, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <name>drawLine</name>
      <anchor>a0911bf63fd6c0d3e35b2b701fcbc7728</anchor>
      <arglist>(float startX, float startY, float endX, float endY) const </arglist>
    </member>
    <member kind="function">
      <name>drawLine</name>
      <anchor>a664643f9fef3c8b37b0620c28ec4bb76</anchor>
      <arglist>(float startX, float startY, float endX, float endY, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <name>drawLine</name>
      <anchor>a1a5e6b31778bd627083b883523111649</anchor>
      <arglist>(const Line &amp;line) const </arglist>
    </member>
    <member kind="function">
      <name>drawLine</name>
      <anchor>af86ad7e4f1df07c106cc9b494b9b348e</anchor>
      <arglist>(const Line &amp;line, float lineThickness) const </arglist>
    </member>
    <member kind="function">
      <name>drawDashedLine</name>
      <anchor>a5fd2fb8a5ac6369cf916c3ca4d017f98</anchor>
      <arglist>(float startX, float startY, float endX, float endY, const float *dashLengths, int numDashLengths, float lineThickness=1.0f) const </arglist>
    </member>
    <member kind="function">
      <name>drawVerticalLine</name>
      <anchor>a042d4f7223a63212ae1d9452e26cbd7a</anchor>
      <arglist>(int x, float top, float bottom) const </arglist>
    </member>
    <member kind="function">
      <name>drawHorizontalLine</name>
      <anchor>aeea9ba47ff90bb7643038692bf647738</anchor>
      <arglist>(int y, float left, float right) const </arglist>
    </member>
    <member kind="function">
      <name>fillPath</name>
      <anchor>a129aa4c9dcc137a1c910a2f5ef118fb7</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform=AffineTransform::identity) const </arglist>
    </member>
    <member kind="function">
      <name>strokePath</name>
      <anchor>a5bd626168d02b83d10123e398da5c5a7</anchor>
      <arglist>(const Path &amp;path, const PathStrokeType &amp;strokeType, const AffineTransform &amp;transform=AffineTransform::identity) const </arglist>
    </member>
    <member kind="function">
      <name>drawArrow</name>
      <anchor>ad4c4dce7f0d8148a6c3187dd2c3e9097</anchor>
      <arglist>(float startX, float startY, float endX, float endY, float lineThickness, float arrowheadWidth, float arrowheadLength) const </arglist>
    </member>
    <member kind="function">
      <name>setImageResamplingQuality</name>
      <anchor>a0f8160f9b0a6866e40cf1a2b45c3b892</anchor>
      <arglist>(const ResamplingQuality newQuality)</arglist>
    </member>
    <member kind="function">
      <name>drawImageAt</name>
      <anchor>afbe07950c9a29bf46ecaa34aea287b73</anchor>
      <arglist>(const Image *const imageToDraw, int topLeftX, int topLeftY, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>a6e59f61f7be81afc5d1c66663b1cb22e</anchor>
      <arglist>(const Image *const imageToDraw, int destX, int destY, int destWidth, int destHeight, int sourceX, int sourceY, int sourceWidth, int sourceHeight, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <name>drawImageTransformed</name>
      <anchor>afa0d5c872058a1dbb0b8018a40b7a130</anchor>
      <arglist>(const Image *imageToDraw, const Rectangle&lt; int &gt; &amp;imageSubRegion, const AffineTransform &amp;transform, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <name>drawImageWithin</name>
      <anchor>aec36a0a64a6a70c461daf850ce988777</anchor>
      <arglist>(const Image *imageToDraw, int destX, int destY, int destWidth, int destHeight, const RectanglePlacement &amp;placementWithinTarget, bool fillAlphaChannelWithCurrentBrush=false) const </arglist>
    </member>
    <member kind="function">
      <name>getClipBounds</name>
      <anchor>a638303b4ebd451985f697eba429fcb59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>clipRegionIntersects</name>
      <anchor>a644d3cc4fca8c6269ba29222c0f2895f</anchor>
      <arglist>(int x, int y, int width, int height) const </arglist>
    </member>
    <member kind="function">
      <name>reduceClipRegion</name>
      <anchor>ad97e058fcff2bc0e634eacc4ef1d7a5f</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>reduceClipRegion</name>
      <anchor>ae30c76ed849ef8a987cb98191e0668e1</anchor>
      <arglist>(const RectangleList &amp;clipRegion)</arglist>
    </member>
    <member kind="function">
      <name>reduceClipRegion</name>
      <anchor>a01d830805b335f8cdf52fadd00bd0d30</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform=AffineTransform::identity)</arglist>
    </member>
    <member kind="function">
      <name>reduceClipRegion</name>
      <anchor>aa5221e745ec9328ea3b1db3a2c7040f6</anchor>
      <arglist>(const Image &amp;image, const Rectangle&lt; int &gt; &amp;sourceClipRegion, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>excludeClipRegion</name>
      <anchor>a9ff97378305763a38f4a99bc638a8824</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangleToExclude)</arglist>
    </member>
    <member kind="function">
      <name>isClipEmpty</name>
      <anchor>a6ae806601e19bc1631085d6e2a7f5d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>saveState</name>
      <anchor>ab4df35938684890f7adac0439e900ca8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>restoreState</name>
      <anchor>ac724e99c9a7bcd8b2987a484e269a368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setOrigin</name>
      <anchor>a9f6c05af33aefe49851d0d1eb9294bea</anchor>
      <arglist>(int newOriginX, int newOriginY)</arglist>
    </member>
    <member kind="function">
      <name>resetToDefaultState</name>
      <anchor>ab8b7cd49bf1ff738c5ff848727e3bc75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isVectorDevice</name>
      <anchor>ae584e8878455891d9010addb384425cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getInternalContext</name>
      <anchor>af741e8cca70be7f15acb995cb43ca730</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GroupComponent</name>
    <base>Component</base>
    <filename>classGroupComponent.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a78ec5941214fc9f9cc82447ae04db082</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utlineColourId</name>
      <anchor>a78ec5941214fc9f9cc82447ae04db082a25fccffcfe6b20840ac84a5dab932f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>a78ec5941214fc9f9cc82447ae04db082a979b6f395a45c23d357f5687bdd74a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GroupComponent</name>
      <anchor>a0d0c5db0283478e955e658936485e1a3</anchor>
      <arglist>(const String &amp;componentName, const String &amp;labelText)</arglist>
    </member>
    <member kind="function">
      <name>~GroupComponent</name>
      <anchor>a558f46ecb72027cdac88676f98a1d649</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>ad71b970bb527c75f7dfa568902ef6977</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <name>getText</name>
      <anchor>a7ab66b7e9ad83a084e6ffc1fd395bca4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setTextLabelPosition</name>
      <anchor>a90e058cf3a35a3d9943f399e2ef459f3</anchor>
      <arglist>(const Justification &amp;justification)</arglist>
    </member>
    <member kind="function">
      <name>getTextLabelPosition</name>
      <anchor>af530cbf121c9ea2b586875adfa1bdf72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a683b8eada2fd402d353b2caece5568fe</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>enablementChanged</name>
      <anchor>a6cb96fc58844707b8dae8a6f1feaedfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>a4d2a952995b5853ce5b93eeae031e29f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GZIPCompressorOutputStream</name>
    <base>OutputStream</base>
    <filename>classGZIPCompressorOutputStream.html</filename>
    <member kind="function">
      <name>GZIPCompressorOutputStream</name>
      <anchor>ac18c403bf2f027119f0e8e42e5e4782b</anchor>
      <arglist>(OutputStream *destStream, int compressionLevel=0, bool deleteDestStreamWhenDestroyed=false, bool noWrap=false)</arglist>
    </member>
    <member kind="function">
      <name>~GZIPCompressorOutputStream</name>
      <anchor>a7e77d9225c8d3b44d7a55fd328f710d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>flush</name>
      <anchor>ac5a33ac0aa774dfe5cfd66d50a0c5fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>ae0254cd137c6aad4f6b76f97b8b1e3d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>a2cf4ecde3f94696165cc1d677f26e05d</anchor>
      <arglist>(int64 newPosition)</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>a719a785d83c04a320acf301ee2c41b77</anchor>
      <arglist>(const void *destBuffer, int howMany)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GZIPDecompressorInputStream</name>
    <base>InputStream</base>
    <filename>classGZIPDecompressorInputStream.html</filename>
    <member kind="function">
      <name>GZIPDecompressorInputStream</name>
      <anchor>a1f3e3e868fcac072d0d5cc49bde278f0</anchor>
      <arglist>(InputStream *sourceStream, bool deleteSourceWhenDestroyed, bool noWrap=false, int64 uncompressedStreamLength=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>~GZIPDecompressorInputStream</name>
      <anchor>a4bcf594ac091cb9def1938a8aa85e448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>a9574085dbd2619a36d895038068bfbcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>a5303758dc9798bc160092aa2a00e41bd</anchor>
      <arglist>(int64 pos)</arglist>
    </member>
    <member kind="function">
      <name>getTotalLength</name>
      <anchor>a166543f803d19e2ab68a6966370c2da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isExhausted</name>
      <anchor>a7acb0a126be288acfc39410b0b25fe12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>a7bb2f5942f0da1304399cdbdfb4c5a33</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HeapBlock</name>
    <filename>classHeapBlock.html</filename>
    <member kind="function">
      <name>HeapBlock</name>
      <anchor>ad370c48ea6552e22760a9c447a7f13d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HeapBlock</name>
      <anchor>a6f4cb72b95ed92b8f4a32c4e06ffff63</anchor>
      <arglist>(const size_t numElements)</arglist>
    </member>
    <member kind="function">
      <name>~HeapBlock</name>
      <anchor>ac409462db3ea1612e0a03ada0d3c0f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator ElementType *</name>
      <anchor>a9cb22dc9c30fe1d8a89bf21842b2543f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getData</name>
      <anchor>ab4d8d34e2fe2222ff49e2498ae686571</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator void *</name>
      <anchor>a0bfcf290cf20ed3080666cada386a9a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;&gt;</name>
      <anchor>a543df51c3d4d14d9d2e0a2c5328f131f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>af5945fe5ad695fca5a3d6ed81a140787</anchor>
      <arglist>(IndexType index) const </arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>aca946b46a1d311aeb4cca5c25edf517d</anchor>
      <arglist>(IndexType index) const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>a334912ef0ba51c0661bcebe19761da40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>abd7ae973e72f5ff92a5f8b6cf6c66558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a32ee173a892b4675cc281b01e4042322</anchor>
      <arglist>(const ElementType *const otherPointer) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a29bc7cc3fff3a36434ce06fad7dbb9a7</anchor>
      <arglist>(const ElementType *const otherPointer) const </arglist>
    </member>
    <member kind="function">
      <name>malloc</name>
      <anchor>ade48e55af82e06ebe12f36113bb99bb5</anchor>
      <arglist>(const size_t newNumElements, const size_t elementSize=sizeof(ElementType))</arglist>
    </member>
    <member kind="function">
      <name>calloc</name>
      <anchor>aad5091597ba0bb4fad93af3ce799b7b7</anchor>
      <arglist>(const size_t newNumElements, const size_t elementSize=sizeof(ElementType))</arglist>
    </member>
    <member kind="function">
      <name>allocate</name>
      <anchor>af856f25248259a3ef3a3dce5ebd1acc7</anchor>
      <arglist>(const size_t newNumElements, const bool initialiseToZero)</arglist>
    </member>
    <member kind="function">
      <name>realloc</name>
      <anchor>a17a9c1d46da338d89d1bc2ed98122264</anchor>
      <arglist>(const size_t newNumElements, const size_t elementSize=sizeof(ElementType))</arglist>
    </member>
    <member kind="function">
      <name>free</name>
      <anchor>a8714abad6ccc8b63e85ab5b6d262c157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>swapWith</name>
      <anchor>a55af6c22a137caffb631807f4e28df24</anchor>
      <arglist>(HeapBlock&lt; ElementType &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HyperlinkButton</name>
    <base>Button</base>
    <filename>classHyperlinkButton.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a7e5d7db9e3d3665d349ec2582eb48d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>a7e5d7db9e3d3665d349ec2582eb48d5badc8e65be7955e88ddfe56e9555246d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>HyperlinkButton</name>
      <anchor>aab8c9244ad8e28df8d012bbb3fb5b89f</anchor>
      <arglist>(const String &amp;linkText, const URL &amp;linkURL)</arglist>
    </member>
    <member kind="function">
      <name>~HyperlinkButton</name>
      <anchor>a277791602a973667098c9bcdbfed251b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>a255042483636a407ec06dfb34adcd6dd</anchor>
      <arglist>(const Font &amp;newFont, bool resizeToMatchComponentHeight, const Justification &amp;justificationType=Justification::horizontallyCentred)</arglist>
    </member>
    <member kind="function">
      <name>setURL</name>
      <anchor>a4ec045893ee9a0e5f719b4c466bcbdef</anchor>
      <arglist>(const URL &amp;newURL)</arglist>
    </member>
    <member kind="function">
      <name>getURL</name>
      <anchor>ad9f580b2c6ec67409663f36db8c1c1e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>changeWidthToFitText</name>
      <anchor>adab11697af1e6c4c886537e03cedd8ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>a0f8a1a05d9efecf0c9e8911d65f02778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>ae50702ce7f1d7665f890c9d8eaf86874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintButton</name>
      <anchor>a7eab0c8a05e56b8f2c078dc2b58a16d1</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IIRFilter</name>
    <filename>classIIRFilter.html</filename>
    <member kind="function">
      <name>IIRFilter</name>
      <anchor>a63408f45298f7a9e5451f7163cbba401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IIRFilter</name>
      <anchor>a6f824a2d84fe4c52f38f6f5fe8ccb946</anchor>
      <arglist>(const IIRFilter &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~IIRFilter</name>
      <anchor>a7fbc93f9fc0ff65e785f8f2bfe13cfdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>a4a19a95acbf954a37d2cd984bcf7f1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>processSamples</name>
      <anchor>a3e1b9686368de7a14d6dd5fa973e0721</anchor>
      <arglist>(float *samples, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>processSingleSampleRaw</name>
      <anchor>a90641ae65f4bf0a2058ec5c4e3287b02</anchor>
      <arglist>(float sample)</arglist>
    </member>
    <member kind="function">
      <name>makeLowPass</name>
      <anchor>a2064580b9aa1a69cd69d667ff1a8a473</anchor>
      <arglist>(double sampleRate, double frequency)</arglist>
    </member>
    <member kind="function">
      <name>makeHighPass</name>
      <anchor>a0bca7c33f2ffaefddd218244b29c8443</anchor>
      <arglist>(double sampleRate, double frequency)</arglist>
    </member>
    <member kind="function">
      <name>makeLowShelf</name>
      <anchor>ad03ad754933b6518ae60ff98d6c0f5bc</anchor>
      <arglist>(double sampleRate, double cutOffFrequency, double Q, float gainFactor)</arglist>
    </member>
    <member kind="function">
      <name>makeHighShelf</name>
      <anchor>a2711997bf8329ba594b1da011195e410</anchor>
      <arglist>(double sampleRate, double cutOffFrequency, double Q, float gainFactor)</arglist>
    </member>
    <member kind="function">
      <name>makeBandPass</name>
      <anchor>a04ccd936d6148f2e36cda372029a88f4</anchor>
      <arglist>(double sampleRate, double centreFrequency, double Q, float gainFactor)</arglist>
    </member>
    <member kind="function">
      <name>makeInactive</name>
      <anchor>a5b8db68b041e533af5d55f86da05099a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>copyCoefficientsFrom</name>
      <anchor>a3183036232d000d419a1245163df2712</anchor>
      <arglist>(const IIRFilter &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>setCoefficients</name>
      <anchor>a1e3bd9f3ce7bca0bcec30a1dacfb9ab9</anchor>
      <arglist>(double c1, double c2, double c3, double c4, double c5, double c6)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>afba9f11078d1258454da525fc5557e8d</anchor>
      <arglist>(const IIRFilter &amp;)</arglist>
    </member>
    <member kind="function">
      <name>processLock</name>
      <anchor>ab00b0f82d8811523cd31398a3cffae46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>active</name>
      <anchor>ace0c7930049d2cca00bebc4b7f9c3a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>coefficients</name>
      <anchor>a8339abd8667934e70de91813a100f725</anchor>
      <arglist>[6]</arglist>
    </member>
    <member kind="function">
      <name>x1</name>
      <anchor>a1200c91a1b971931425a74f1ffa57c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>x2</name>
      <anchor>adef45ab67e66dd710429c50dc5cdcb41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y1</name>
      <anchor>aa12d79fee01468222a9fda148deda917</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y2</name>
      <anchor>a9088d65b14318be689d7e823a4f72463</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IIRFilterAudioSource</name>
    <base>AudioSource</base>
    <filename>classIIRFilterAudioSource.html</filename>
    <member kind="function">
      <name>IIRFilterAudioSource</name>
      <anchor>a1f3df36be60034f2a727c6b4432803d6</anchor>
      <arglist>(AudioSource *const inputSource, const bool deleteInputWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <name>~IIRFilterAudioSource</name>
      <anchor>ae32c8faf7d8c4b95fc389bad73902fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFilterParameters</name>
      <anchor>ae124f080830b80361ad4012751805ac4</anchor>
      <arglist>(const IIRFilter &amp;newSettings)</arglist>
    </member>
    <member kind="function">
      <name>prepareToPlay</name>
      <anchor>a191aaf9746867f15ca1de8aabd4a69d1</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <name>releaseResources</name>
      <anchor>a5e7ffb44f21f7098ca15ee92f877a048</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNextAudioBlock</name>
      <anchor>ab8e2a41159ebad98f2adec4bf066eb9b</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Image</name>
    <filename>classImage.html</filename>
    <member kind="function">
      <name>PixelFormat</name>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GB</name>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01a03a8b8bb3246ef72c98b01e711d61425</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RGB</name>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01a9adefc17fe4663de8e3fc9621c891b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ingleChannel</name>
      <anchor>ab47b5746d2df286ae6f8da6af5463c01ab8bd2ed5df42fd15bd349195d81b64b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Image</name>
      <anchor>aa51549669248091773ee494737abdc24</anchor>
      <arglist>(PixelFormat format, int imageWidth, int imageHeight, bool clearImage)</arglist>
    </member>
    <member kind="function">
      <name>Image</name>
      <anchor>a5a3bc57bd7ba53f9ae55b1963b9ba0a1</anchor>
      <arglist>(const Image &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~Image</name>
      <anchor>a46561cd7dcf7e203e9579737e8ace4eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Image</name>
      <anchor>ab0a89f7898134583b795cfad77b0df2d</anchor>
      <arglist>(PixelFormat format, int imageWidth, int imageHeight)</arglist>
    </member>
    <member kind="function">
      <name>createNativeImage</name>
      <anchor>a2edc73d9d04cbbfe10c1f541aada7187</anchor>
      <arglist>(PixelFormat format, int imageWidth, int imageHeight, bool clearImage)</arglist>
    </member>
    <member kind="function">
      <name>getWidth</name>
      <anchor>adbe5f8b9f79338c7eb6a66bdc69ca0b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHeight</name>
      <anchor>a45dd31ebd02682c5963858f62aa53dd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBounds</name>
      <anchor>ab3ad5dda12b24c466d3ff9fcf76f199c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFormat</name>
      <anchor>a02b10c4cb912368a6c6f839ee0e3acb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isARGB</name>
      <anchor>ad2763808ce7dccb4af5b73d91a2c3090</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isRGB</name>
      <anchor>ab405aece1766d28295c31de60c87a2db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hasAlphaChannel</name>
      <anchor>ab4e612e12eb227115d6020904a9ca371</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>ad176bbb59e5f46266d7394394ae5f51a</anchor>
      <arglist>(int x, int y, int w, int h, const Colour &amp;colourToClearTo=Colour(0x00000000))</arglist>
    </member>
    <member kind="function">
      <name>createCopy</name>
      <anchor>a97e2641351c897ebc79fa8a04341e65c</anchor>
      <arglist>(int newWidth=&amp;#45;1, int newHeight=&amp;#45;1, Graphics::ResamplingQuality quality=Graphics::mediumResamplingQuality) const </arglist>
    </member>
    <member kind="function">
      <name>createCopyOfAlphaChannel</name>
      <anchor>a9cb9bc09e14d175ff88aa2333b35e60c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getPixelAt</name>
      <anchor>a7274715ffd7862b0f7f268b7594184ae</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <name>setPixelAt</name>
      <anchor>a5ea5a059d331122d96071dc950fc79d9</anchor>
      <arglist>(int x, int y, const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <name>multiplyAlphaAt</name>
      <anchor>aebea4260cfa39896530dbac82f62483b</anchor>
      <arglist>(int x, int y, float multiplier)</arglist>
    </member>
    <member kind="function">
      <name>multiplyAllAlphas</name>
      <anchor>a4f9afd22fab379db5e8b26b22a628f75</anchor>
      <arglist>(float amountToMultiplyBy)</arglist>
    </member>
    <member kind="function">
      <name>desaturate</name>
      <anchor>a47141dbe10e84de8edfd859a1c45cee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPixelData</name>
      <anchor>ac7f874304953d104c54d2c9aee3480e0</anchor>
      <arglist>(int destX, int destY, int destW, int destH, const uint8 *sourcePixelData, int sourceLineStride)</arglist>
    </member>
    <member kind="function">
      <name>moveImageSection</name>
      <anchor>aa3626b85da8f3cd9eacabee7c723ce93</anchor>
      <arglist>(int destX, int destY, int sourceX, int sourceY, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>createSolidAreaMask</name>
      <anchor>a7879a00425ea9c79fa30a67740ca1ca1</anchor>
      <arglist>(RectangleList &amp;result, float alphaThreshold=0.5f) const </arglist>
    </member>
    <member kind="function">
      <name>createLowLevelContext</name>
      <anchor>ab7c4665ab0091c867483713d53b92a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>ab4c6036dea7bcdf2554ec51960cde545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>imageWidth</name>
      <anchor>a225ca9d3b90ec7efbff2cbab797ab89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>imageHeight</name>
      <anchor>a3010569b294d75d0cb43618e0adc5f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pixelStride</name>
      <anchor>a3a8fe29e1e9c0ba08f627a094a24feda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lineStride</name>
      <anchor>a63863cbe89dbccaf0687232102e36a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>imageDataAllocated</name>
      <anchor>a4d7cf789ee0b609cbfaa527e6d9d5de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>imageData</name>
      <anchor>ad4d65dc1cecc9335cdf326cdf86750c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Image::BitmapData</name>
    <filename>classImage_1_1BitmapData.html</filename>
    <member kind="function">
      <name>BitmapData::BitmapData</name>
      <anchor>ae808da8507a871acb8236f88080e6d29</anchor>
      <arglist>(Image &amp;image, int x, int y, int w, int h, bool needsToBeWritable)</arglist>
    </member>
    <member kind="function">
      <name>BitmapData::BitmapData</name>
      <anchor>a3710b2251c4c56fa36a1f999ea6b2fdd</anchor>
      <arglist>(const Image &amp;image, int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>BitmapData::~BitmapData</name>
      <anchor>a0398d1e66c0d7ebdac9a373d516dad82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>BitmapData::getLinePointer</name>
      <anchor>adf5d3c9cd68756d91b76113594a1cddd</anchor>
      <arglist>(int y) const </arglist>
    </member>
    <member kind="function">
      <name>BitmapData::getPixelPointer</name>
      <anchor>a4f9d56afd8bfd02a95526267095a559d</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <name>BitmapData::data</name>
      <anchor>a20783df25b604990685fe8cbb0f1cf91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BitmapData::lineStride</name>
      <anchor>a0c9d05e29235f0b395fa57b26b13d67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BitmapData::pixelStride</name>
      <anchor>a7fc1d9da2a609dd67e8e9ad70e5f38f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BitmapData::width</name>
      <anchor>a9eea8066d52a09fb2fce0ae4dd49df1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BitmapData::height</name>
      <anchor>ac81ba5621e83a0bc7d090bf2a17dcc8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageButton</name>
    <base>Button</base>
    <filename>classImageButton.html</filename>
    <member kind="function">
      <name>ImageButton</name>
      <anchor>a8f1c3e5c5ae087b42f9b9ae263e1b94c</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <name>~ImageButton</name>
      <anchor>afbbc63233e45f52a269cca07cbd18d94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setImages</name>
      <anchor>a10ed30f8a14bc8c0520290e0eb95c428</anchor>
      <arglist>(bool resizeButtonNowToFitThisImage, bool rescaleImagesWhenButtonSizeChanges, bool preserveImageProportions, Image *normalImage, float imageOpacityWhenNormal, const Colour &amp;overlayColourWhenNormal, Image *overImage, float imageOpacityWhenOver, const Colour &amp;overlayColourWhenOver, Image *downImage, float imageOpacityWhenDown, const Colour &amp;overlayColourWhenDown, float hitTestAlphaThreshold=0.0f)</arglist>
    </member>
    <member kind="function">
      <name>getNormalImage</name>
      <anchor>ab2a5087e052e1a51f05245af0248acc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getOverImage</name>
      <anchor>ac06a2031a7e1b98c33084c1d644b69b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDownImage</name>
      <anchor>a0e88369717f9115c2f129b28fcfb9bc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hitTest</name>
      <anchor>aee8b3ea35e0bf045ef3779015b80416c</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>paintButton</name>
      <anchor>aa52c5f0822b68a2e2d64053a169daa0a</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageCache</name>
    <base>DeletedAtShutdown</base>
    <base>Timer</base>
    <filename>classImageCache.html</filename>
    <member kind="function">
      <name>getFromFile</name>
      <anchor>a02df09e023276661bbcede5c2696bac2</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <name>getFromMemory</name>
      <anchor>abc2ef4d85252488efe04ed060ef2f04f</anchor>
      <arglist>(const void *imageData, int dataSize)</arglist>
    </member>
    <member kind="function">
      <name>release</name>
      <anchor>a6111709c0d116db6e600dc588e005e5b</anchor>
      <arglist>(Image *imageToRelease)</arglist>
    </member>
    <member kind="function">
      <name>releaseOrDelete</name>
      <anchor>a56a5706dbe1c7fa159a2bed543fbe313</anchor>
      <arglist>(Image *imageToRelease)</arglist>
    </member>
    <member kind="function">
      <name>isImageInCache</name>
      <anchor>a52cc0f6051a709e411453790edf6b70a</anchor>
      <arglist>(Image *imageToLookFor)</arglist>
    </member>
    <member kind="function">
      <name>incReferenceCount</name>
      <anchor>a2f05af115af5072302d4105785ac684f</anchor>
      <arglist>(Image *image)</arglist>
    </member>
    <member kind="function">
      <name>getFromHashCode</name>
      <anchor>a4336efa8da8f70fe4702b85bf182405f</anchor>
      <arglist>(int64 hashCode)</arglist>
    </member>
    <member kind="function">
      <name>addImageToCache</name>
      <anchor>adada1fc9c16b5e2771b2de45055d811f</anchor>
      <arglist>(Image *image, int64 hashCode)</arglist>
    </member>
    <member kind="function">
      <name>setCacheTimeout</name>
      <anchor>a7e8f2a2260acf7ca4f4a62c36ce99332</anchor>
      <arglist>(int millisecs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageConvolutionKernel</name>
    <filename>classImageConvolutionKernel.html</filename>
    <member kind="function">
      <name>ImageConvolutionKernel</name>
      <anchor>a291ce213057a0e0cad9559b349426b44</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <name>~ImageConvolutionKernel</name>
      <anchor>ae80e9785cc4cfa1458d6c4da4b40af58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>ad9a4fd22ec090082e020872213193253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getKernelValue</name>
      <anchor>afca519531992a173aa6a5d6cb0320166</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <name>setKernelValue</name>
      <anchor>a2a0789bb928889e19f807fab4aaeaf9c</anchor>
      <arglist>(int x, int y, float value)</arglist>
    </member>
    <member kind="function">
      <name>setOverallSum</name>
      <anchor>ac71dbeddeb4565e410f5fed1a8216902</anchor>
      <arglist>(float desiredTotalSum)</arglist>
    </member>
    <member kind="function">
      <name>rescaleAllValues</name>
      <anchor>adff3c9b24817bd16ffa56df9af129641</anchor>
      <arglist>(float multiplier)</arglist>
    </member>
    <member kind="function">
      <name>createGaussianBlur</name>
      <anchor>a622a69a6e139de9ccc3bf8f15b841dfe</anchor>
      <arglist>(float blurRadius)</arglist>
    </member>
    <member kind="function">
      <name>getKernelSize</name>
      <anchor>a429c15723be0603d5d0cb0f3f242b148</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>applyToImage</name>
      <anchor>a63efaaa2ace0f87403d2030146b76dde</anchor>
      <arglist>(Image &amp;destImage, const Image *sourceImage, const Rectangle&lt; int &gt; &amp;destinationArea) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageEffectFilter</name>
    <filename>classImageEffectFilter.html</filename>
    <member kind="function">
      <name>~ImageEffectFilter</name>
      <anchor>ac8eceef9cd72ea8f81f992e2db0ea791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>applyEffect</name>
      <anchor>a131c88fd5f0d5f0173d903341f290b15</anchor>
      <arglist>(Image &amp;sourceImage, Graphics &amp;destContext)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageFileFormat</name>
    <filename>classImageFileFormat.html</filename>
    <member kind="function">
      <name>ImageFileFormat</name>
      <anchor>ac2e60288a31b4d2a963b0350f72c4483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ImageFileFormat</name>
      <anchor>adb530fe6617767ac78c26baf179e78d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFormatName</name>
      <anchor>a13de19634e87514c2f23cd76c5c7ab8b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>canUnderstand</name>
      <anchor>a5ff3f240860ae444a7eaafb708b563e2</anchor>
      <arglist>(InputStream &amp;input)=0</arglist>
    </member>
    <member kind="function">
      <name>decodeImage</name>
      <anchor>a3030c19b7c543c63c35ea49d60c2bf21</anchor>
      <arglist>(InputStream &amp;input)=0</arglist>
    </member>
    <member kind="function">
      <name>writeImageToStream</name>
      <anchor>af70bdf60c3cea3a6806d225706670a63</anchor>
      <arglist>(const Image &amp;sourceImage, OutputStream &amp;destStream)=0</arglist>
    </member>
    <member kind="function">
      <name>findImageFormatForStream</name>
      <anchor>a7fcb93b4c52f931ec437674c731c9c04</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <name>loadFrom</name>
      <anchor>a3a7dd2907de146d09e4438125fa857a9</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <name>loadFrom</name>
      <anchor>a0c08af262c98bf02c0c460481accc57e</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <name>loadFrom</name>
      <anchor>a37b2e148aa9e72f07fc68a3fdb204a8c</anchor>
      <arglist>(const void *rawData, const int numBytesOfData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImagePreviewComponent</name>
    <base>FilePreviewComponent</base>
    <base>Timer</base>
    <filename>classImagePreviewComponent.html</filename>
    <member kind="function">
      <name>ImagePreviewComponent</name>
      <anchor>aea25f0e8e764235c53ef1842294ba66e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ImagePreviewComponent</name>
      <anchor>a3ff657921827907d142d96b6539ca3d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectedFileChanged</name>
      <anchor>a3f953788b417de0d3a45ffae57961a45</anchor>
      <arglist>(const File &amp;newSelectedFile)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a83b48da064856202d5a2cf7a539d7407</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>timerCallback</name>
      <anchor>a932fae317a4255ec4d1d099753bf814b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InputSource</name>
    <filename>classInputSource.html</filename>
    <member kind="function">
      <name>InputSource</name>
      <anchor>a2a4cf38faa6998296977b8943f393700</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~InputSource</name>
      <anchor>a09958a0275a39a619a5b64b3e86e76ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createInputStream</name>
      <anchor>a600038277a388345be98e0a71000cc47</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>createInputStreamFor</name>
      <anchor>a45470c84b437855c2cdefce6aae2fcfa</anchor>
      <arglist>(const String &amp;relatedItemPath)=0</arglist>
    </member>
    <member kind="function">
      <name>hashCode</name>
      <anchor>a1fe754d44724da8eaef055c496ca4140</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InputStream</name>
    <filename>classInputStream.html</filename>
    <member kind="function">
      <name>~InputStream</name>
      <anchor>a8c49246dd62e559578732f518f159432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InputStream</name>
      <anchor>aa76c86b53f016984cf52bed6e039e9c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTotalLength</name>
      <anchor>aebacb933570264e9697f6c984e348d01</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>isExhausted</name>
      <anchor>aabacc50cde9fcabe4752c796648fde49</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>aa5350c414bad6b97ae3b463a3401c0d6</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)=0</arglist>
    </member>
    <member kind="function">
      <name>readByte</name>
      <anchor>a2e5944641712d84b6da2eee5d394326a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readBool</name>
      <anchor>a37d1e4956da4fb9f765f16f9c4b4ec3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readShort</name>
      <anchor>a0c4b0f9f1fa9515fea5a98d2ffe7ae02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readShortBigEndian</name>
      <anchor>ac33bbf8ae4597a30bde70cbdbc6bfa5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readInt</name>
      <anchor>a59eb456ebfbe9d4c7fdfd4c14337e19a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readIntBigEndian</name>
      <anchor>a84ab1bcc547eee621c4c6c2502af808d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readInt64</name>
      <anchor>a58941fd7cf4279e49d4697750f837a56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readInt64BigEndian</name>
      <anchor>a8894f1c01c6e0de4b5dd9b9c1fe06c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readFloat</name>
      <anchor>a46d7f191f1872bc27550db3fa0733f59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readFloatBigEndian</name>
      <anchor>a4d19fef152296085c477882e0650b011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readDouble</name>
      <anchor>a31626a82ad48629a202135ac925ffecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readDoubleBigEndian</name>
      <anchor>a7c7a2928053424caf51986d9e6fdaa35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readCompressedInt</name>
      <anchor>a3e3643991f4103c5cfc1b8c61c6a3e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readNextLine</name>
      <anchor>ad5e04e410c03a5204455ca9a1a7e6448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readString</name>
      <anchor>a6d7a5cfcb94495a02c4cf0f8ef452dee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readEntireStreamAsString</name>
      <anchor>ae72fd6f0cd22bd6988e2778e0eb48154</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readIntoMemoryBlock</name>
      <anchor>a1db31a2de998ff874a7f73f46112b642</anchor>
      <arglist>(MemoryBlock &amp;destBlock, int maxNumBytesToRead=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>abf909e2de145df97221ab4deb2824c5c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>ad7b4e8cec1e383657900e27bbcb3b06c</anchor>
      <arglist>(int64 newPosition)=0</arglist>
    </member>
    <member kind="function">
      <name>skipNextBytes</name>
      <anchor>a7e3005cc6a58cd2ded6094dd6dd06542</anchor>
      <arglist>(int64 numBytesToSkip)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterprocessConnection</name>
    <base>Thread</base>
    <base>MessageListener</base>
    <filename>classInterprocessConnection.html</filename>
    <member kind="function">
      <name>InterprocessConnection</name>
      <anchor>a31dc05e077ee562d5ca96ecea09c3663</anchor>
      <arglist>(bool callbacksOnMessageThread=true, uint32 magicMessageHeaderNumber=0xf2b49e2c)</arglist>
    </member>
    <member kind="function">
      <name>~InterprocessConnection</name>
      <anchor>ad4e4b9a6f85226f1015c6620009456c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connectToSocket</name>
      <anchor>a007450a6ca6dc60bb48d384479d9a49d</anchor>
      <arglist>(const String &amp;hostName, int portNumber, int timeOutMillisecs)</arglist>
    </member>
    <member kind="function">
      <name>connectToPipe</name>
      <anchor>af55a39c96e49248340800c122c622653</anchor>
      <arglist>(const String &amp;pipeName, int pipeReceiveMessageTimeoutMs=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>createPipe</name>
      <anchor>a7ddea65e7dbb25d1d471db7355743276</anchor>
      <arglist>(const String &amp;pipeName, int pipeReceiveMessageTimeoutMs=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>disconnect</name>
      <anchor>a16959b067e088c75663fcff8633d600f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isConnected</name>
      <anchor>a2c3d425edefb392a174f01a4e8e4c83a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSocket</name>
      <anchor>af9e08cce385fce38c64842fa22da020e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getPipe</name>
      <anchor>a525eb2fd28e41b727cc06aa79c2a934d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getConnectedHostName</name>
      <anchor>a40eb66000852fcebabe33435dfa680b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>sendMessage</name>
      <anchor>a6fc9e7b55c25eac48baebd131ded9d4f</anchor>
      <arglist>(const MemoryBlock &amp;message)</arglist>
    </member>
    <member kind="function">
      <name>connectionMade</name>
      <anchor>a6491a1c39849ecbdb6093965cfd47b03</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>connectionLost</name>
      <anchor>a83bf2f27d14ea3a9c7e1a88e18e31351</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>messageReceived</name>
      <anchor>a69549dd1bda0584d212940d3faf7457a</anchor>
      <arglist>(const MemoryBlock &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterprocessConnectionServer</name>
    <base>Thread</base>
    <filename>classInterprocessConnectionServer.html</filename>
    <member kind="function">
      <name>InterprocessConnectionServer</name>
      <anchor>af1449e1e8da7ad7a7a30a15e3edea59f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~InterprocessConnectionServer</name>
      <anchor>ac5a60a85820e4c6344a2225b81cf630d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>beginWaitingForSocket</name>
      <anchor>a12aa4180243cdb01725237da25d2230d</anchor>
      <arglist>(int portNumber)</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>ac8a4c37b9e77848e48b499f441749324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createConnectionObject</name>
      <anchor>af0f9bee85542b7adc149270ad779b415</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterProcessLock</name>
    <filename>classInterProcessLock.html</filename>
    <member kind="function">
      <name>InterProcessLock</name>
      <anchor>aa4bb20ad9b280ba608e570f8ece8351e</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <name>~InterProcessLock</name>
      <anchor>a464f2a7c6a841b37534f1d1cbe5c1571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enter</name>
      <anchor>a00d7b9e49bf365eedc923f622e330179</anchor>
      <arglist>(int timeOutMillisecs=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>exit</name>
      <anchor>a3387e77951f1777be407cf76d2691bd0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterProcessLock::Pimpl</name>
    <filename>classInterProcessLock_1_1Pimpl.html</filename>
    <member kind="function">
      <name>Pimpl::Pimpl</name>
      <anchor>aa83d0480fe247ce180017b7cbef8854c</anchor>
      <arglist>(const String &amp;name, const int timeOutMillisecs)</arglist>
    </member>
    <member kind="function">
      <name>Pimpl::~Pimpl</name>
      <anchor>a23407da9972004910750e53c88c5ae2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Pimpl::closeFile</name>
      <anchor>a284555f5e8332b54095e01283d163c55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Pimpl::handle</name>
      <anchor>a4514e5e822320cfea2eaaf481c158658</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Pimpl::refCount</name>
      <anchor>a85157d4ec677b10a72954b9d81c39a56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterProcessLock::ScopedLockType</name>
    <filename>classInterProcessLock_1_1ScopedLockType.html</filename>
    <member kind="function">
      <name>ScopedLockType::ScopedLockType</name>
      <anchor>a3796700eafa76f5633346ffd7674e400</anchor>
      <arglist>(InterProcessLock &amp;lock)</arglist>
    </member>
    <member kind="function">
      <name>ScopedLockType::~ScopedLockType</name>
      <anchor>a2517d70321d5acabdfe5a96f11ef9c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ScopedLockType::isLocked</name>
      <anchor>a63751afe4088df5eb844abdbe1b2a708</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JPEGImageFormat</name>
    <base>ImageFileFormat</base>
    <filename>classJPEGImageFormat.html</filename>
    <member kind="function">
      <name>JPEGImageFormat</name>
      <anchor>a3e000b303a2a2d90dca7be44ace102c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~JPEGImageFormat</name>
      <anchor>a92189a737ac849a79b0950b42bf03142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setQuality</name>
      <anchor>a4c7d297d98e28f47212bbc285cd70d32</anchor>
      <arglist>(const float newQuality)</arglist>
    </member>
    <member kind="function">
      <name>getFormatName</name>
      <anchor>a3f3ca8ac1fbe8d36456ed5da5a8d2052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canUnderstand</name>
      <anchor>affbf9cfed2bb92a27d8feaa5cca3152f</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <name>decodeImage</name>
      <anchor>a5cdb5d99e4f42e3d7dee1a83104cf0e9</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <name>writeImageToStream</name>
      <anchor>a4d41f19c27e81243677780a10a15b567</anchor>
      <arglist>(const Image &amp;sourceImage, OutputStream &amp;destStream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JUCEApplication</name>
    <base>ApplicationCommandTarget</base>
    <base>ActionListener</base>
    <filename>classJUCEApplication.html</filename>
    <member kind="function">
      <name>JUCEApplication</name>
      <anchor>a80e6dadf35b6954df90f2e11bb25ad8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~JUCEApplication</name>
      <anchor>a7dc209ab07c1dbb226fa106a07e1a22a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getInstance</name>
      <anchor>ac919443f7740895ab5999bf7fbe9aaa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>initialise</name>
      <anchor>a937ed7da27baafc693017666c5dc17fa</anchor>
      <arglist>(const String &amp;commandLineParameters)=0</arglist>
    </member>
    <member kind="function">
      <name>isInitialising</name>
      <anchor>a937a2595f2d545075e6c8e9e6ea710bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>shutdown</name>
      <anchor>a9c0cfd61c65e067b5c51a0dda306eb94</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getApplicationName</name>
      <anchor>a6d0ce92edbfcc864e69faeed9bde92bd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getApplicationVersion</name>
      <anchor>a7b3850e4b5dcfbd988f4cca1eb923f64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>moreThanOneInstanceAllowed</name>
      <anchor>aea2d05c2f43278e26da09c2c8aee5325</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>anotherInstanceStarted</name>
      <anchor>a951c761fef742f6d7020907d6073a6eb</anchor>
      <arglist>(const String &amp;commandLine)</arglist>
    </member>
    <member kind="function">
      <name>systemRequestedQuit</name>
      <anchor>a508f46d93a9355c2dc984c7f12c3abbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unhandledException</name>
      <anchor>af4b96f97305d972bc9c3f1cc7157af29</anchor>
      <arglist>(const std::exception *e, const String &amp;sourceFilename, int lineNumber)</arglist>
    </member>
    <member kind="function">
      <name>quit</name>
      <anchor>a618b5238c20a1590c12ffe20d15e999a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setApplicationReturnValue</name>
      <anchor>a0f9f240f4aeb7818f97a726346f2881a</anchor>
      <arglist>(int newReturnValue)</arglist>
    </member>
    <member kind="function">
      <name>getApplicationReturnValue</name>
      <anchor>a0b38ae98054d99b006248710c33a09b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCommandLineParameters</name>
      <anchor>ae739ba9fc3555a6e31b2edd548bd711c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>main</name>
      <anchor>a5d494e861b0b60272345e0a887834601</anchor>
      <arglist>(String &amp;commandLine, JUCEApplication *newApp)</arglist>
    </member>
    <member kind="function">
      <name>main</name>
      <anchor>ac55d958a95d8b28a85ca57bf559c4f15</anchor>
      <arglist>(int argc, const char *argv[], JUCEApplication *newApp)</arglist>
    </member>
    <member kind="function">
      <name>sendUnhandledException</name>
      <anchor>ac7d80dfae3161d3cafa6b4d0ba916f8f</anchor>
      <arglist>(const std::exception *e, const char *sourceFile, int lineNumber)</arglist>
    </member>
    <member kind="function">
      <name>getNextCommandTarget</name>
      <anchor>a53eb2460c6147646ceefe65db2c01931</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCommandInfo</name>
      <anchor>a0a434091edacc91a99c430cc583d41fc</anchor>
      <arglist>(CommandID commandID, ApplicationCommandInfo &amp;result)</arglist>
    </member>
    <member kind="function">
      <name>getAllCommands</name>
      <anchor>a4bb289588c209663c994652ca19ade57</anchor>
      <arglist>(Array&lt; CommandID &gt; &amp;commands)</arglist>
    </member>
    <member kind="function">
      <name>perform</name>
      <anchor>a2b970e816cb628d51e66bceaec293631</anchor>
      <arglist>(const InvocationInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <name>actionListenerCallback</name>
      <anchor>ab2e35ff522719378ea88afa23987c1bf</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function">
      <name>initialiseApp</name>
      <anchor>a5b39d93226624c81ede6c41c5e6ae4be</anchor>
      <arglist>(String &amp;commandLine)</arglist>
    </member>
    <member kind="function">
      <name>shutdownAppAndClearUp</name>
      <anchor>af83e86fb329ddc8f619941aac8e805b3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Justification</name>
    <filename>classJustification.html</filename>
    <member kind="function">
      <name>@11</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eft</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a56156bb2892e32febf8011af9c5da653</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ight</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a92d0fe0a466b35d67e1b7b91f971d7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>orizontallyCentred</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5ac9fd148cf8547fab0e3aeee306223ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>op</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5aba34337f0f6a8cfcaf472a72f6d46649</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ottom</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5ac77cede28d3cecdc46227f503446207b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>erticallyCentred</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a8a4ec09c32a9a1111e72ec7a9b6f9411</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>orizontallyJustified</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a0881c08fa2d58e9d6f36ab8bbea4b800</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>entred</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5af9d9adde20dce1aa38ff9a69be2b4384</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>entredLeft</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a66eba21caedb3d6bfbeff74c610628b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>entredRight</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5aea1dc507ac46f0c7417666ba14d9ad5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>entredTop</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a3a44a2451bf933ef23b99d19c53db3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>entredBottom</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a392a10b2805345384ac0589b1261cea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>opLeft</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5af2d7cc575db9d4d9a1305407625b7afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>opRight</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a36ad3c72f605613650333cc78d1e0b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ottomLeft</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a3597930eb27b2d7aed0a929816a10ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ottomRight</name>
      <anchor>a4b9db354585c335c96baecf1a14c2db5a397027445c8ee878b4f4871f10ba58d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Justification</name>
      <anchor>ab095e64aaf6300c7907cfbcafc2fda34</anchor>
      <arglist>(int flags_)</arglist>
    </member>
    <member kind="function">
      <name>Justification</name>
      <anchor>ad51f5f40eecd851c0eb5815760795bd6</anchor>
      <arglist>(const Justification &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>adcb67e6a82ea5a2686bcd4d7d98de86b</anchor>
      <arglist>(const Justification &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>getFlags</name>
      <anchor>a6afcb0d6ed6d7c7977566f0a51f0bbed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>testFlags</name>
      <anchor>aa9938f19ce33c3318f971a036347b302</anchor>
      <arglist>(int flagsToTest) const </arglist>
    </member>
    <member kind="function">
      <name>getOnlyVerticalFlags</name>
      <anchor>afff737aea482964eaee6f895c2a24923</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getOnlyHorizontalFlags</name>
      <anchor>ac406fb7b986e8ac6a2e966e4350597b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>applyToRectangle</name>
      <anchor>a9c049bf27f45a3e1525d8a06e3493921</anchor>
      <arglist>(int &amp;x, int &amp;y, int w, int h, int spaceX, int spaceY, int spaceW, int spaceH) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyboardFocusTraverser</name>
    <filename>classKeyboardFocusTraverser.html</filename>
    <member kind="function">
      <name>KeyboardFocusTraverser</name>
      <anchor>a275c834346e37c782d74f08365f1a06f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~KeyboardFocusTraverser</name>
      <anchor>ac8dafe9d30ce2fbc9fb3163d1d16b2e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNextComponent</name>
      <anchor>a7e353323ae96807e5f9cc903e49ca839</anchor>
      <arglist>(Component *current)</arglist>
    </member>
    <member kind="function">
      <name>getPreviousComponent</name>
      <anchor>ab452631402fb9031651434f2e94b252c</anchor>
      <arglist>(Component *current)</arglist>
    </member>
    <member kind="function">
      <name>getDefaultComponent</name>
      <anchor>a2c21be5bdf95b97b501e595955c7d75b</anchor>
      <arglist>(Component *parentComponent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyListener</name>
    <filename>classKeyListener.html</filename>
    <member kind="function">
      <name>~KeyListener</name>
      <anchor>a3b63a69dab82d70acb71939a4c05b869</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>ae69d788cbada2ae5069a9e725db0baf7</anchor>
      <arglist>(const KeyPress &amp;key, Component *originatingComponent)=0</arglist>
    </member>
    <member kind="function">
      <name>keyStateChanged</name>
      <anchor>aa3efa1c9c4ebfb754c9d68180a40b6c7</anchor>
      <arglist>(bool isKeyDown, Component *originatingComponent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyMappingEditorComponent</name>
    <base>Component</base>
    <base>TreeViewItem</base>
    <base>ChangeListener</base>
    <base>ButtonListener</base>
    <filename>classKeyMappingEditorComponent.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a5621ed52a0934c85301ded0696798a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>a5621ed52a0934c85301ded0696798a42a41dc42d5069bfbae08a65ae57066f836</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>a5621ed52a0934c85301ded0696798a42a83eb0e6141d7afb10f1392784575d617</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>KeyMappingEditorComponent</name>
      <anchor>a1c0d78194c83f11ded78c3be0d8ea076</anchor>
      <arglist>(KeyPressMappingSet *mappingSet, bool showResetToDefaultButton)</arglist>
    </member>
    <member kind="function">
      <name>~KeyMappingEditorComponent</name>
      <anchor>a8d8cddb27b23c862b2230586daebc9e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setColours</name>
      <anchor>a726406bd37ec08341122647a00fee15a</anchor>
      <arglist>(const Colour &amp;mainBackground, const Colour &amp;textColour)</arglist>
    </member>
    <member kind="function">
      <name>getMappings</name>
      <anchor>a2539b8cec7c0587f7af3d57588da8824</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>shouldCommandBeIncluded</name>
      <anchor>abb52cedae53b4d9b12d7f084b688cbed</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <name>isCommandReadOnly</name>
      <anchor>aa62cc07cddf842c855c577fbd118958c</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <name>getDescriptionForKeyPress</name>
      <anchor>ad09bd4e376e87e0ddbb3005334c4b5e1</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>parentHierarchyChanged</name>
      <anchor>afdc0351656e9806877eeec6fddc91949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a27467e99983021ebe48794a60f799ed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>changeListenerCallback</name>
      <anchor>af35bf0662c36e588acc4dbfc17087086</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <name>mightContainSubItems</name>
      <anchor>a5bcfc3b2584c97f24d5ea528d5f9b7ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getUniqueName</name>
      <anchor>a40ab6e6a45aa51d1b755ef452a5031bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>adbe33bab9293f5e8d14ad435fe173cea</anchor>
      <arglist>(Button *button)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyPress</name>
    <filename>classKeyPress.html</filename>
    <member kind="function">
      <name>KeyPress</name>
      <anchor>a84ced395d82113380454808e9fd773d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>KeyPress</name>
      <anchor>a7368a89ab63ad42bf3e3c49fe65d3a57</anchor>
      <arglist>(int keyCode, const ModifierKeys &amp;modifiers, juce_wchar textCharacter)</arglist>
    </member>
    <member kind="function">
      <name>KeyPress</name>
      <anchor>a15117bc63b5299eb83bbd501651ebccf</anchor>
      <arglist>(int keyCode)</arglist>
    </member>
    <member kind="function">
      <name>KeyPress</name>
      <anchor>af0c742c5c0b057ae521c8a8719bb3ef7</anchor>
      <arglist>(const KeyPress &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a9f787f99e51683e6e9b849b0196823b1</anchor>
      <arglist>(const KeyPress &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a6097aad88d1e628a71a22c6489c746a2</anchor>
      <arglist>(const KeyPress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a993e134a16c49f13752f7e72a9204e80</anchor>
      <arglist>(const KeyPress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>a8239dbef62298f38cdb812309125556b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getKeyCode</name>
      <anchor>aa4aad1b17b7eca64e6a0844b3256fa9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getModifiers</name>
      <anchor>a8c40a3a05c6694edaefae862256bc675</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTextCharacter</name>
      <anchor>a0779869cd0c78e0b321f61c41fb92fed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isKeyCode</name>
      <anchor>a9bb838780cad9d7c18ab50a9d71439f9</anchor>
      <arglist>(int keyCodeToCompare) const </arglist>
    </member>
    <member kind="function">
      <name>createFromDescription</name>
      <anchor>a1111a3a24234bd98a82df0309ade80e0</anchor>
      <arglist>(const String &amp;textVersion)</arglist>
    </member>
    <member kind="function">
      <name>getTextDescription</name>
      <anchor>adaf7a75cf7c33dc8629a3b0670f8495c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isCurrentlyDown</name>
      <anchor>abbe7f5207ac72fbda3be3ac287c16a88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isKeyCurrentlyDown</name>
      <anchor>a94c2aecc867e4dba1382c31c377523d2</anchor>
      <arglist>(int keyCode)</arglist>
    </member>
    <member kind="function">
      <name>spaceKey</name>
      <anchor>a60f802af5aff465d7ff910009608e343</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>escapeKey</name>
      <anchor>a565ec13ad662d05392b609fad31b8f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>returnKey</name>
      <anchor>a1cfe46412c3af08250ddc14bfaef1205</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tabKey</name>
      <anchor>a2a3d96e0f2602106a3855a34a2e1dbb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>deleteKey</name>
      <anchor>ae568c9aba033acf0c24390f24304b9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>backspaceKey</name>
      <anchor>a035471d297e6f91fc8e86d91539da361</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>insertKey</name>
      <anchor>af62c3ffd333fc440eca6596b56df48b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>upKey</name>
      <anchor>a97fcf796ea92d9ff3818ee17cdbafa80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>downKey</name>
      <anchor>aeb9a20dd50b39f66d7d778d31b6b5f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>leftKey</name>
      <anchor>ad2961244072158eee77e11844a968f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rightKey</name>
      <anchor>aff89b4c5876819968ff83a6c6ee15416</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pageUpKey</name>
      <anchor>aed878a6382f57cca1617d923b236ea1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pageDownKey</name>
      <anchor>ac30e9e5628a043cfac1c601540b1ef01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>homeKey</name>
      <anchor>ae811d47e771f147a949d1bb818d9c9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>endKey</name>
      <anchor>a54ced410db4096610651498e85e63b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F1Key</name>
      <anchor>a4718eab842ed4cfef54b2538941fd7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F2Key</name>
      <anchor>a68ef806408eb7ad6a13923d8244771f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F3Key</name>
      <anchor>ad8eef2e261d82cfb2957fd6b6b27e421</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F4Key</name>
      <anchor>a962505a345c199485480f3a87e33968e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F5Key</name>
      <anchor>a41256ebbfdcd285a06baab285bb24f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F6Key</name>
      <anchor>a6fc8b94cc4fc53cd0dd8a60ab1275e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F7Key</name>
      <anchor>a1600c88c7f1d109d1c098b89ed399eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F8Key</name>
      <anchor>a33c505fcea9f343a0682ea8b9ac38361</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F9Key</name>
      <anchor>ab2826f73bf6f9851a03908984e9ef85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F10Key</name>
      <anchor>acc93115bcbc62c2d6f6410bd953048b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F11Key</name>
      <anchor>aba680314581f58ae805b8ca6db4cd7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F12Key</name>
      <anchor>a8d2b24133ac5f7be8968dc6f76ad290d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F13Key</name>
      <anchor>aae831dec3e60af238a7691365fbca521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F14Key</name>
      <anchor>af81fbf2d5a9848bfae5344cf9daa01ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F15Key</name>
      <anchor>af08f015ab55e816151f061946a86922f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>F16Key</name>
      <anchor>ab22e575b32683a1dc7b8ca3c578dc402</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPad0</name>
      <anchor>a4a44bab251df2712330effd9358968b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPad1</name>
      <anchor>af8c69449943e82aac0a728d2ba4dd016</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPad2</name>
      <anchor>a25a781888b24650884cb41a70a2f1b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPad3</name>
      <anchor>aa020cb0e8d6661d2d38476c96524b542</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPad4</name>
      <anchor>ae49578eec3c953038ec269380fddc032</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPad5</name>
      <anchor>af5ff94b47c44d1e41e80dc581a872a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPad6</name>
      <anchor>a5d362149cc5a341c24b74644d0812f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPad7</name>
      <anchor>a8b9053c4da94ae7a5d8f7d171adb6853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPad8</name>
      <anchor>af941a0797b78b1429f20497d4c16b4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPad9</name>
      <anchor>af5c16e7d95c0cc6b5e0739c2021b7f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPadAdd</name>
      <anchor>a070c217aebfc2af7c511a12623db59e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPadSubtract</name>
      <anchor>a3587df27be497fb3d805dc6ac8eadc5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPadMultiply</name>
      <anchor>aec3e249cbc1b42e0917131c64c5a3042</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPadDivide</name>
      <anchor>a3261a5f6e1231d0dc55294c38ae67108</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPadSeparator</name>
      <anchor>a53df5e582959f3ae2e3c75f383f251e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPadDecimalPoint</name>
      <anchor>a599c6a65c651b40c667d369e58a31d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPadEquals</name>
      <anchor>ac52dd54c9ba617eb2075d0769238d9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberPadDelete</name>
      <anchor>a98053d001402ac0a14ba101f9fd98615</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>playKey</name>
      <anchor>a08e1a3281e1a772f1e6227f70d117622</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>stopKey</name>
      <anchor>a4ebc694e95335f25418c99eb2235d815</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>fastForwardKey</name>
      <anchor>a5818ad479163ff4ee7d191b5c125a5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rewindKey</name>
      <anchor>a135d25e32e2493d0e58a61ae3e476121</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyPressMappingSet</name>
    <base>KeyListener</base>
    <base>ChangeBroadcaster</base>
    <base>FocusChangeListener</base>
    <filename>classKeyPressMappingSet.html</filename>
    <member kind="function">
      <name>KeyPressMappingSet</name>
      <anchor>a28df6e3408888b79979a196f4a17c614</anchor>
      <arglist>(ApplicationCommandManager *commandManager)</arglist>
    </member>
    <member kind="function">
      <name>KeyPressMappingSet</name>
      <anchor>a5c900ef5b95eafc0f30d43b099990b4f</anchor>
      <arglist>(const KeyPressMappingSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~KeyPressMappingSet</name>
      <anchor>adae95f518172adb938d30d38cf361743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCommandManager</name>
      <anchor>ac01662c146561a88b244c154c7e1dacd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getKeyPressesAssignedToCommand</name>
      <anchor>a528761863684271cd25037675feee636</anchor>
      <arglist>(CommandID commandID) const </arglist>
    </member>
    <member kind="function">
      <name>addKeyPress</name>
      <anchor>ac2adbad788cddf223990617e00fbd7f1</anchor>
      <arglist>(CommandID commandID, const KeyPress &amp;newKeyPress, int insertIndex=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>resetToDefaultMappings</name>
      <anchor>a11ec4b86290489da987e2fcc3455b140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resetToDefaultMapping</name>
      <anchor>a60fb5f6f71f8d4b9ef04627c625fb5b5</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <name>clearAllKeyPresses</name>
      <anchor>a16e2d91480adcd22ee5dbfdce01c0156</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearAllKeyPresses</name>
      <anchor>a9f3803440dd3d36fd79680c8dc2cc779</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <name>removeKeyPress</name>
      <anchor>a69386f2e687ced9630b24a745b6fa33a</anchor>
      <arglist>(CommandID commandID, int keyPressIndex)</arglist>
    </member>
    <member kind="function">
      <name>removeKeyPress</name>
      <anchor>a0626523ca6a55cc5948531f0382e2ad8</anchor>
      <arglist>(const KeyPress &amp;keypress)</arglist>
    </member>
    <member kind="function">
      <name>containsMapping</name>
      <anchor>ade985652053ad1b9bb899bce4c6c0a46</anchor>
      <arglist>(CommandID commandID, const KeyPress &amp;keyPress) const </arglist>
    </member>
    <member kind="function">
      <name>findCommandForKeyPress</name>
      <anchor>af93ffcc38f675cdc0d3c29e3aecb2bf2</anchor>
      <arglist>(const KeyPress &amp;keyPress) const </arglist>
    </member>
    <member kind="function">
      <name>restoreFromXml</name>
      <anchor>acd0da647bbd350e6daebcd8705a8b11e</anchor>
      <arglist>(const XmlElement &amp;xmlVersion)</arglist>
    </member>
    <member kind="function">
      <name>createXml</name>
      <anchor>ab1f065bf0a2035046b35d84080a7c42d</anchor>
      <arglist>(bool saveDifferencesFromDefaultSet) const </arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>a67a478973fe6aede21f1651a85ab2049</anchor>
      <arglist>(const KeyPress &amp;key, Component *originatingComponent)</arglist>
    </member>
    <member kind="function">
      <name>keyStateChanged</name>
      <anchor>a5a13378496876203f2f13b86a135ad5e</anchor>
      <arglist>(bool isKeyDown, Component *originatingComponent)</arglist>
    </member>
    <member kind="function">
      <name>globalFocusChanged</name>
      <anchor>acc295bb3a49df59b7b360d859a5b660a</anchor>
      <arglist>(Component *focusedComponent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KnownPluginList</name>
    <base>ChangeBroadcaster</base>
    <filename>classKnownPluginList.html</filename>
    <member kind="function">
      <name>SortMethod</name>
      <anchor>a6beabfccc86796527f663f30f3514098</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>efaultOrder</name>
      <anchor>a6beabfccc86796527f663f30f3514098a095b33c1920322812d2f98874fa647c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ortAlphabetically</name>
      <anchor>a6beabfccc86796527f663f30f3514098a13fa4bc46bb8b6c70670f13fa2a8ad4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ortByCategory</name>
      <anchor>a6beabfccc86796527f663f30f3514098a2a27fc73f320a500d812f660663eee11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ortByManufacturer</name>
      <anchor>a6beabfccc86796527f663f30f3514098acf0c4ac83301f91cb2eb1ac54fb32222</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ortByFileSystemLocation</name>
      <anchor>a6beabfccc86796527f663f30f3514098a7da9f1486befa583139ced7d449a6b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>KnownPluginList</name>
      <anchor>a9e42fc0a1b1819ad21a734f6380fb1a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~KnownPluginList</name>
      <anchor>a62cbb85f1fe910f1197f078b90dfac61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>af0066ed9002767c229a86e18407ddd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumTypes</name>
      <anchor>a08783e9b8292109225417b8dd3230b2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getType</name>
      <anchor>a065c1a7bc246a8a77f59003ab0a3736e</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getTypeForFile</name>
      <anchor>a2d4b52e7433bf90ddb5b8c7a0e73564f</anchor>
      <arglist>(const String &amp;fileOrIdentifier) const </arglist>
    </member>
    <member kind="function">
      <name>getTypeForIdentifierString</name>
      <anchor>ab9bc09ac3eb4efb14cefbc3a390acc95</anchor>
      <arglist>(const String &amp;identifierString) const </arglist>
    </member>
    <member kind="function">
      <name>addType</name>
      <anchor>a3ca7b930d503c7a4f56198603ff82215</anchor>
      <arglist>(const PluginDescription &amp;type)</arglist>
    </member>
    <member kind="function">
      <name>removeType</name>
      <anchor>a4ec98afce586dfbef03a3098b8c73038</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>scanAndAddFile</name>
      <anchor>a8364ba510d676c59677c997a7f89235c</anchor>
      <arglist>(const String &amp;possiblePluginFileOrIdentifier, bool dontRescanIfAlreadyInList, OwnedArray&lt; PluginDescription &gt; &amp;typesFound, AudioPluginFormat &amp;formatToUse)</arglist>
    </member>
    <member kind="function">
      <name>isListingUpToDate</name>
      <anchor>aee17a685ddb53a81e3d660619b32c1a1</anchor>
      <arglist>(const String &amp;possiblePluginFileOrIdentifier) const </arglist>
    </member>
    <member kind="function">
      <name>scanAndAddDragAndDroppedFiles</name>
      <anchor>a213f3e5fde4c3c0d31244c6b3e6ad172</anchor>
      <arglist>(const StringArray &amp;filenames, OwnedArray&lt; PluginDescription &gt; &amp;typesFound)</arglist>
    </member>
    <member kind="function">
      <name>addToMenu</name>
      <anchor>abdf4797df0f108759d2a6cbf2278521a</anchor>
      <arglist>(PopupMenu &amp;menu, const SortMethod sortMethod) const </arglist>
    </member>
    <member kind="function">
      <name>getIndexChosenByMenu</name>
      <anchor>a39129b712d42d4ae13b9a2209014e88b</anchor>
      <arglist>(int menuResultCode) const </arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>ab2dd417611080b9ee8a6ccdea73d4f0f</anchor>
      <arglist>(const SortMethod method)</arglist>
    </member>
    <member kind="function">
      <name>createXml</name>
      <anchor>ad89793da82742e90ca4226d2e93aa946</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>recreateFromXml</name>
      <anchor>a3914fddc79074744a1a7b7d7a0e8201f</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Label</name>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>TextEditorListener</base>
    <base>ComponentListener</base>
    <base>Value::Listener</base>
    <filename>classLabel.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a41756012394513222e1323bb432fa701</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>a41756012394513222e1323bb432fa701a80bf4bb58a466a4debb994f3ee2c8cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>a41756012394513222e1323bb432fa701a1f25238374bf53d43f8c73e68c8e937c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utlineColourId</name>
      <anchor>a41756012394513222e1323bb432fa701ab67bf6af853bcef12b41b3e81f7d18bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Label</name>
      <anchor>af8443ac9f4a0603b2ef43f811a63c77f</anchor>
      <arglist>(const String &amp;componentName, const String &amp;labelText)</arglist>
    </member>
    <member kind="function">
      <name>~Label</name>
      <anchor>a39e1167a9b5827afd888780973d88894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>af718cbb06e0c0fe8535ad90ead295ba4</anchor>
      <arglist>(const String &amp;newText, bool broadcastChangeMessage)</arglist>
    </member>
    <member kind="function">
      <name>getText</name>
      <anchor>afab4522c42347d7c086e4fd726f863e9</anchor>
      <arglist>(bool returnActiveEditorContents=false) const </arglist>
    </member>
    <member kind="function">
      <name>getTextValue</name>
      <anchor>a64f6e22191ff430b97887e5647336c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>af590df032e89790278b1b00ce4083d1d</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <name>getFont</name>
      <anchor>ad6463b3fd525f952e75ff28b6566f563</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setJustificationType</name>
      <anchor>a3a9a927872bce1fc045e1116ae15c9a3</anchor>
      <arglist>(const Justification &amp;justification)</arglist>
    </member>
    <member kind="function">
      <name>getJustificationType</name>
      <anchor>a1ab081fdf037574b0aec4aeac8e7f601</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setBorderSize</name>
      <anchor>a9299ad0f357b8264fea2ff8de4dc2eda</anchor>
      <arglist>(int horizontalBorder, int verticalBorder)</arglist>
    </member>
    <member kind="function">
      <name>getHorizontalBorderSize</name>
      <anchor>a419118ccfee6b58f4148bfacde19857b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getVerticalBorderSize</name>
      <anchor>ae2e56a625491aeb2d5670229752fd92a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>attachToComponent</name>
      <anchor>a3c2397c0da1249f9e27e2279e0f2d4eb</anchor>
      <arglist>(Component *owner, bool onLeft)</arglist>
    </member>
    <member kind="function">
      <name>getAttachedComponent</name>
      <anchor>aa632b228291a4bc21e6ad21c675099e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isAttachedOnLeft</name>
      <anchor>a67000094f13c27bef09041dd7969be4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setMinimumHorizontalScale</name>
      <anchor>a3529019ec38b097daec0fb97fe7218d1</anchor>
      <arglist>(float newScale)</arglist>
    </member>
    <member kind="function">
      <name>getMinimumHorizontalScale</name>
      <anchor>ac9fae865e4c1aa59e5a8356d791652f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>aa8dfc5ed19428131cfca31bd21be0deb</anchor>
      <arglist>(LabelListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>a62029c91e11449d706906822b009141c</anchor>
      <arglist>(LabelListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>setEditable</name>
      <anchor>a9342a397932d82bb1d196ebf9a8969d8</anchor>
      <arglist>(bool editOnSingleClick, bool editOnDoubleClick=false, bool lossOfFocusDiscardsChanges=false)</arglist>
    </member>
    <member kind="function">
      <name>isEditableOnSingleClick</name>
      <anchor>aa99ca05d194f54e2941547144a5bc78b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isEditableOnDoubleClick</name>
      <anchor>a5403c3c866f591355b13ef67e14a47c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>doesLossOfFocusDiscardChanges</name>
      <anchor>a447b0ca1211422df75c6639dbe44403b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isEditable</name>
      <anchor>a063f04e9d6da41002e433b612fda511e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>showEditor</name>
      <anchor>a7e8a44e4664b3d3e774e78d29b4b558b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hideEditor</name>
      <anchor>a6f5fd9653da51af4720d1ac5e54f18d8</anchor>
      <arglist>(bool discardCurrentEditorContents)</arglist>
    </member>
    <member kind="function">
      <name>isBeingEdited</name>
      <anchor>a23e05c775dbd496d2566f3a5a5aad047</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createEditorComponent</name>
      <anchor>a87b2717e5c855b64346b70a908eabc13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textWasEdited</name>
      <anchor>ac25aabade178c65badaaf2773e0c26b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textWasChanged</name>
      <anchor>a2bc26840c05560b6c17a719c0a2537b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>editorShown</name>
      <anchor>a7e0205075e382e2ae226655cedfdccba</anchor>
      <arglist>(TextEditor *editorComponent)</arglist>
    </member>
    <member kind="function">
      <name>editorAboutToBeHidden</name>
      <anchor>a0cb8d5ff136d2281df6dbb76330d868d</anchor>
      <arglist>(TextEditor *editorComponent)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a0ebe311cefa2aa293b18ce1079659dd6</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a3939a8a7549b917a28e007a0a6d09f05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>a94850560f9ea4740867ba2f08d64a7d6</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDoubleClick</name>
      <anchor>aeb582223218bbf23de03b11819cee514</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>componentMovedOrResized</name>
      <anchor>af9f4b597e7e9ce7d5559b304bcae398e</anchor>
      <arglist>(Component &amp;component, bool wasMoved, bool wasResized)</arglist>
    </member>
    <member kind="function">
      <name>componentParentHierarchyChanged</name>
      <anchor>aa880620724bf84b6c301a3fc1e5f7a58</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>componentVisibilityChanged</name>
      <anchor>ad09ceec2027842198ddea2c2c5179c9e</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>inputAttemptWhenModal</name>
      <anchor>a0885863f2ab250112dc376f9f753b2eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>focusGained</name>
      <anchor>adc3037d9147502cbc43c2581c5ff2523</anchor>
      <arglist>(FocusChangeType)</arglist>
    </member>
    <member kind="function">
      <name>enablementChanged</name>
      <anchor>a7d3e731ef29721e61e9df7357462bfe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createFocusTraverser</name>
      <anchor>a157d56a441cfb160979eef9c0cd5ace9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textEditorTextChanged</name>
      <anchor>a16e5e8decd8a9156d7ec182bb9fc9b09</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function">
      <name>textEditorReturnKeyPressed</name>
      <anchor>acaac8d1bf746085f232f5dbe39c22fa3</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function">
      <name>textEditorEscapeKeyPressed</name>
      <anchor>ac540b373b82500335531c5307274c0ba</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function">
      <name>textEditorFocusLost</name>
      <anchor>a9e7197698d63937d565e04c0ec1a102c</anchor>
      <arglist>(TextEditor &amp;editor)</arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>a1025963c51c7e6834ac65aa2f31cbc7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>aec3e90374cfdbcda0fcb5c664f52cd02</anchor>
      <arglist>(Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LabelListener</name>
    <filename>classLabelListener.html</filename>
    <member kind="function">
      <name>~LabelListener</name>
      <anchor>a23e6627da22deafd854e14f651670b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>labelTextChanged</name>
      <anchor>aec8f8abf16d2fcfff45a576b33be6cda</anchor>
      <arglist>(Label *labelThatHasChanged)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LassoComponent</name>
    <base>Component</base>
    <filename>classLassoComponent.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>aee298dc93b3481d6cef3b0884a9c4790</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>assoFillColourId</name>
      <anchor>aee298dc93b3481d6cef3b0884a9c4790ae8e91c39fc10151d1ed7c9312f090522</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>assoOutlineColourId</name>
      <anchor>aee298dc93b3481d6cef3b0884a9c4790a55fc81e2446917181ae96167d1e10fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LassoComponent</name>
      <anchor>a16d6156cf00545c4645f09a13757ef0c</anchor>
      <arglist>(const int outlineThickness_=1)</arglist>
    </member>
    <member kind="function">
      <name>~LassoComponent</name>
      <anchor>a4b5fcd45216fac0717e4d7c968975dd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>beginLasso</name>
      <anchor>a63eaa333f9eec6357aec04380c63c879</anchor>
      <arglist>(const MouseEvent &amp;e, LassoSource&lt; SelectableItemType &gt; *const lassoSource)</arglist>
    </member>
    <member kind="function">
      <name>dragLasso</name>
      <anchor>a4aca7f9f28ecef2834bfabe648ba6959</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>endLasso</name>
      <anchor>a77e7463330941cd3ef81fa41209387f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>aa2b05e6a36b1ab1f9bbdc52d27bb1c08</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>hitTest</name>
      <anchor>a703a9338ca652d465100471caeb00f15</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LassoSource</name>
    <filename>classLassoSource.html</filename>
    <member kind="function">
      <name>~LassoSource</name>
      <anchor>a852e8a3012d3590f1eaaa4d01683fc99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>findLassoItemsInArea</name>
      <anchor>aa9f701a5e74a1a82270afd911b49ad95</anchor>
      <arglist>(Array&lt; SelectableItemType &gt; &amp;itemsFound, int x, int y, int width, int height)=0</arglist>
    </member>
    <member kind="function">
      <name>getLassoSelection</name>
      <anchor>a24cf96f354570daf9478658f79c0c1b1</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Line</name>
    <filename>classLine.html</filename>
    <member kind="function">
      <name>Line</name>
      <anchor>acc11b8a429d8cdd63ba6803dff5602b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Line</name>
      <anchor>ac40968264c0af3b70506c13ce3b70b5b</anchor>
      <arglist>(const Line &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Line</name>
      <anchor>a3d834389828756d6aae4f077e95d1669</anchor>
      <arglist>(float startX, float startY, float endX, float endY)</arglist>
    </member>
    <member kind="function">
      <name>Line</name>
      <anchor>ac0a4e7f617c7b871a80db5230d0a0242</anchor>
      <arglist>(const Point&lt; float &gt; &amp;start, const Point&lt; float &gt; &amp;end)</arglist>
    </member>
    <member kind="function">
      <name>~Line</name>
      <anchor>aabe85f48d22d92b62257091f48174fac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>acb8aad7112450a8155bb4ce06c42d23d</anchor>
      <arglist>(const Line &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>getStartX</name>
      <anchor>a2d35d3b967cc6ba0b87b446382ba238d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getStartY</name>
      <anchor>a23f3b764ffd2c2073bc550b0459620ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getEndX</name>
      <anchor>ab237babb0675cdad48623330f848819f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getEndY</name>
      <anchor>a86a4d6997a95509d4a274e4793d2a9ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getStart</name>
      <anchor>ae3d12a3fefbe8c3fe66c10561579e216</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getEnd</name>
      <anchor>a5d1379a54bbc3f94f1ef7d8a41e34c29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setStart</name>
      <anchor>a420bd277d281abbc371f1d986c4bf035</anchor>
      <arglist>(float newStartX, float newStartY)</arglist>
    </member>
    <member kind="function">
      <name>setEnd</name>
      <anchor>ab9c8bdf6e6cf23e0810ec886fd1a026b</anchor>
      <arglist>(float newEndX, float newEndY)</arglist>
    </member>
    <member kind="function">
      <name>setStart</name>
      <anchor>a62b6a1dda948f266d0d6f51b33adfb9a</anchor>
      <arglist>(const Point&lt; float &gt; &amp;newStart)</arglist>
    </member>
    <member kind="function">
      <name>setEnd</name>
      <anchor>a8ecd03c36e3a95ca70ddd44bf7ce5d79</anchor>
      <arglist>(const Point&lt; float &gt; &amp;newEnd)</arglist>
    </member>
    <member kind="function">
      <name>applyTransform</name>
      <anchor>aecebf76e3fcb748ccd1274a7c8e70a46</anchor>
      <arglist>(const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>getLength</name>
      <anchor>aa00b9952c09da26f294fb816670a2e76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isVertical</name>
      <anchor>adb1e4c411e63f9ac31f70648fa3149d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isHorizontal</name>
      <anchor>a799c03e48bd560a9f6c0b2b729e38855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAngle</name>
      <anchor>a4d34b277943e364709bba074fce1b8c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a1790e7ca4fc380e0f8b55294b4d40375</anchor>
      <arglist>(const Line &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a0fc61d2460715ad8267477861e8dcf85</anchor>
      <arglist>(const Line &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>intersects</name>
      <anchor>a7f1c5b3299498bc84ef43f45b627aa70</anchor>
      <arglist>(const Line &amp;line, float &amp;intersectionX, float &amp;intersectionY) const </arglist>
    </member>
    <member kind="function">
      <name>getPointAlongLine</name>
      <anchor>a983edc8a9e0c5e196cf8af6fdb21cf1f</anchor>
      <arglist>(float distanceFromStart) const </arglist>
    </member>
    <member kind="function">
      <name>getPointAlongLine</name>
      <anchor>ae96b3d8fe20ae6b1ca2915c2981365cc</anchor>
      <arglist>(float distanceFromStart, float perpendicularDistance) const </arglist>
    </member>
    <member kind="function">
      <name>getPointAlongLineProportionally</name>
      <anchor>a90b35437b0e7688c8023eece2ff6a141</anchor>
      <arglist>(float proportionOfLength) const </arglist>
    </member>
    <member kind="function">
      <name>getDistanceFromLine</name>
      <anchor>a97e6c9c196cba00e1e543f371c2abb34</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <name>findNearestPointTo</name>
      <anchor>ac5d0e7d0cf84a7b7cda8e7da225082ff</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <name>isPointAbove</name>
      <anchor>ac03ef79a11c1da0441cf55094646bea8</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <name>withShortenedStart</name>
      <anchor>acad1868387d279539d397c88887dfead</anchor>
      <arglist>(float distanceToShortenBy) const </arglist>
    </member>
    <member kind="function">
      <name>withShortenedEnd</name>
      <anchor>a869315b61362af136f7eaf180a56d532</anchor>
      <arglist>(float distanceToShortenBy) const </arglist>
    </member>
    <member kind="function">
      <name>clipToPath</name>
      <anchor>adab85b5c047c07a83959f9ee2cb05e4c</anchor>
      <arglist>(const Path &amp;path, bool keepSectionOutsidePath)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListBox</name>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <filename>classListBox.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a08423950677e2e4efe521b32184708cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>a08423950677e2e4efe521b32184708cbaf183e449ae9c8c100dd383198dab361b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utlineColourId</name>
      <anchor>a08423950677e2e4efe521b32184708cbad8efb08c0307b5e7e87d2590af10ef1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>a08423950677e2e4efe521b32184708cbae4c8cdf2403dbc1feb8c9fe1d91281ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ListBox</name>
      <anchor>a11e0efe96c5f52d877b005e8df02aa11</anchor>
      <arglist>(const String &amp;componentName, ListBoxModel *model)</arglist>
    </member>
    <member kind="function">
      <name>~ListBox</name>
      <anchor>a71376a469c4b6a97b100d227fd8704ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setModel</name>
      <anchor>a4d47ad39b0125f2ef5c35ce945c9b529</anchor>
      <arglist>(ListBoxModel *newModel)</arglist>
    </member>
    <member kind="function">
      <name>getModel</name>
      <anchor>a79ca668578273d9e2fe407841ba811c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>updateContent</name>
      <anchor>a3e8cb20434a462c1a102cf62e112e16d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMultipleSelectionEnabled</name>
      <anchor>a9647c445c0cd064c37247bc004738bdc</anchor>
      <arglist>(bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <name>setMouseMoveSelectsRows</name>
      <anchor>aaaff40d6a0a564eda13a1a34d5daca15</anchor>
      <arglist>(bool shouldSelect)</arglist>
    </member>
    <member kind="function">
      <name>selectRow</name>
      <anchor>ac56613db03adf964a683e184f7248640</anchor>
      <arglist>(int rowNumber, bool dontScrollToShowThisRow=false, bool deselectOthersFirst=true)</arglist>
    </member>
    <member kind="function">
      <name>selectRangeOfRows</name>
      <anchor>ae846fdb92bcf2be4040f93eba9f13efd</anchor>
      <arglist>(int firstRow, int lastRow)</arglist>
    </member>
    <member kind="function">
      <name>deselectRow</name>
      <anchor>a55db77bbc9e90e83b1f137fa1e565b55</anchor>
      <arglist>(int rowNumber)</arglist>
    </member>
    <member kind="function">
      <name>deselectAllRows</name>
      <anchor>a60b4c8ea8a51c04d43899fd51f349794</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>flipRowSelection</name>
      <anchor>adb559ca08ef51c4a81160a235172eae8</anchor>
      <arglist>(int rowNumber)</arglist>
    </member>
    <member kind="function">
      <name>getSelectedRows</name>
      <anchor>adc3b205cd081793d1c9edfb3f0e1d4f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setSelectedRows</name>
      <anchor>a8fda2df4929cc0e94ffaea5614484a0d</anchor>
      <arglist>(const SparseSet&lt; int &gt; &amp;setOfRowsToBeSelected, bool sendNotificationEventToModel=true)</arglist>
    </member>
    <member kind="function">
      <name>isRowSelected</name>
      <anchor>ae2a4e8b0468e2adaeedf571cb1aa0cc0</anchor>
      <arglist>(int rowNumber) const </arglist>
    </member>
    <member kind="function">
      <name>getNumSelectedRows</name>
      <anchor>abd6d17d979e1f30c5f305fc3d248ea0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSelectedRow</name>
      <anchor>a7539693edfefdf90f4e6562e4cebb6b8</anchor>
      <arglist>(int index=0) const </arglist>
    </member>
    <member kind="function">
      <name>getLastRowSelected</name>
      <anchor>a8fc23c975d4c66b24b4233df57262bbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>selectRowsBasedOnModifierKeys</name>
      <anchor>a1b7198db615b11092e4d2c3c6b2d70a8</anchor>
      <arglist>(int rowThatWasClickedOn, const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>setVerticalPosition</name>
      <anchor>a250df6a39059fde46b37fcf17fb982db</anchor>
      <arglist>(double newProportion)</arglist>
    </member>
    <member kind="function">
      <name>getVerticalPosition</name>
      <anchor>ad9924ff85a8ec56761fdbd90a8b25bf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>scrollToEnsureRowIsOnscreen</name>
      <anchor>a743f9159c7d4bd49390e43559e933fa0</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function">
      <name>getVerticalScrollBar</name>
      <anchor>a1dda1fd53aa6436c4ef255b5be7e6ef7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHorizontalScrollBar</name>
      <anchor>a369b9c9e7fa6e8227fdb9e31a52977e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRowContainingPosition</name>
      <anchor>af48a03abb174d1e61f175529836dba12</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <name>getInsertionIndexForPosition</name>
      <anchor>af17d7efb466fa08c491be52a27759a54</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <name>getRowPosition</name>
      <anchor>a4842d80a6a6461ac5eeb01b76227dd8b</anchor>
      <arglist>(int rowNumber, bool relativeToComponentTopLeft) const </arglist>
    </member>
    <member kind="function">
      <name>getComponentForRowNumber</name>
      <anchor>a9ec3b798726a02f60135e14de611c184</anchor>
      <arglist>(int rowNumber) const </arglist>
    </member>
    <member kind="function">
      <name>getRowNumberOfComponent</name>
      <anchor>a0c6a2cf2dcd4a44827d832171f6f3c6d</anchor>
      <arglist>(Component *rowComponent) const </arglist>
    </member>
    <member kind="function">
      <name>getVisibleRowWidth</name>
      <anchor>ac4249837256f4c53b00858fc79374b4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setRowHeight</name>
      <anchor>ab9c8c47afd94fbfd4cf84edcab71acb2</anchor>
      <arglist>(int newHeight)</arglist>
    </member>
    <member kind="function">
      <name>getRowHeight</name>
      <anchor>a9c7d97a1818c7259c36c9a1b302c92e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumRowsOnScreen</name>
      <anchor>a5492e9cfaeb8599b1926021901afd8da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setOutlineThickness</name>
      <anchor>a621d125d3338ff769bfcac1ca057e66b</anchor>
      <arglist>(int outlineThickness)</arglist>
    </member>
    <member kind="function">
      <name>getOutlineThickness</name>
      <anchor>ab4b601f512c66ef8dfc6a602acea4340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setHeaderComponent</name>
      <anchor>ab36777ae5cce2b2fc5008504117f6cc9</anchor>
      <arglist>(Component *newHeaderComponent)</arglist>
    </member>
    <member kind="function">
      <name>setMinimumContentWidth</name>
      <anchor>addb9bd64ab337e3d8a50b199a93d3840</anchor>
      <arglist>(int newMinimumWidth)</arglist>
    </member>
    <member kind="function">
      <name>getVisibleContentWidth</name>
      <anchor>ad5aae914a09a4403becd13c7456a357a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>repaintRow</name>
      <anchor>a76e56f3b9876fa1b51d0a7f9f56ceddf</anchor>
      <arglist>(int rowNumber)</arglist>
    </member>
    <member kind="function">
      <name>createSnapshotOfSelectedRows</name>
      <anchor>a22e58e0166e6da7a83c349e11585e129</anchor>
      <arglist>(int &amp;x, int &amp;y)</arglist>
    </member>
    <member kind="function">
      <name>getViewport</name>
      <anchor>a66b979d80c27989365322e2bd7d36613</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>a68f781087244597b9f8f9592855adc8d</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>keyStateChanged</name>
      <anchor>adec2c4109b1bd0377ff6e30edeff3f78</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a59d36cc4ae31d9a690885c3c5349d814</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>paintOverChildren</name>
      <anchor>a255cfbbb6dd99c741105a48effe77aa7</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a7a5a4e8b6cdb335be6cd92cbcda4606b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>visibilityChanged</name>
      <anchor>af1c552504b44b9b97427edf6bcdffe8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseWheelMove</name>
      <anchor>ad98dc0e9ae55c62c6c561101681af846</anchor>
      <arglist>(const MouseEvent &amp;e, float wheelIncrementX, float wheelIncrementY)</arglist>
    </member>
    <member kind="function">
      <name>mouseMove</name>
      <anchor>a2c7eb193f1a8b3551d5c357bcf1d8381</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>mouseExit</name>
      <anchor>a541bd20151b60a4b5fa389dd79bd17ec</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>a7cb72fe5c9ba86d68761a8b9613c4235</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>a6abc85c250457bc654a36f69ebce5a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startDragAndDrop</name>
      <anchor>a1ba5a3a97cb5b905e367c93436730f5b</anchor>
      <arglist>(const MouseEvent &amp;e, const String &amp;dragDescription)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListBoxModel</name>
    <filename>classListBoxModel.html</filename>
    <member kind="function">
      <name>~ListBoxModel</name>
      <anchor>aab4876cf1091ee05b32a39a485f1a4fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumRows</name>
      <anchor>aa34d0f88948722ae16c8ce6a7874bcfd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>paintListBoxItem</name>
      <anchor>a255cf47783413c4f3fa71008a34cb776</anchor>
      <arglist>(int rowNumber, Graphics &amp;g, int width, int height, bool rowIsSelected)=0</arglist>
    </member>
    <member kind="function">
      <name>refreshComponentForRow</name>
      <anchor>af049aa731e43557c107b1285ca7e3d88</anchor>
      <arglist>(int rowNumber, bool isRowSelected, Component *existingComponentToUpdate)</arglist>
    </member>
    <member kind="function">
      <name>listBoxItemClicked</name>
      <anchor>a1ffd0f1cb56fa4b5f080b22ca0e424ad</anchor>
      <arglist>(int row, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>listBoxItemDoubleClicked</name>
      <anchor>ad4830f15c32a393371e0c1e4fe211e14</anchor>
      <arglist>(int row, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>backgroundClicked</name>
      <anchor>a7b5d369b12c2a23a8d87600978f7e2f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectedRowsChanged</name>
      <anchor>a869cb29e1b605e7312806f0ee7449fa2</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <name>deleteKeyPressed</name>
      <anchor>acc840517aac4398dd378ce1e5bd668ac</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <name>returnKeyPressed</name>
      <anchor>a713c3007875a4473feafdd81fc8d58fc</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <name>listWasScrolled</name>
      <anchor>aec88952fecefb30febf11ed9f172ba40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDragSourceDescription</name>
      <anchor>a20f23649c66023236e1c516e519455d2</anchor>
      <arglist>(const SparseSet&lt; int &gt; &amp;currentlySelectedRows)</arglist>
    </member>
    <member kind="function">
      <name>getTooltipForRow</name>
      <anchor>a932638eeeb4e869fa93e7574ed914119</anchor>
      <arglist>(int row)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListenerList</name>
    <filename>classListenerList.html</filename>
    <member kind="function">
      <name>ThisType</name>
      <anchor>a3b96ee4d2b3e77dfddce53f2451c4556</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ListenerType</name>
      <anchor>aa03db5b04e4fe0dda6e95bd9055c9705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ListenerList</name>
      <anchor>a809baedf6e32eaaf1696e85e1149389f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ListenerList</name>
      <anchor>a3b3b8138506855e80b9ebf61a032f540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>aad67eee9d64815b62ad8ea11f6812e75</anchor>
      <arglist>(ListenerClass *const listenerToAdd)</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>ac7d5795fb151d7470e1fb2226c7d4676</anchor>
      <arglist>(ListenerClass *const listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>ada19b15f0360eb00fe5ee0f1064d85a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>a3a40fe1054c16a32705d855d02b2d429</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>a5d8b3998bfb180b6eba5859fc504dbf1</anchor>
      <arglist>(ListenerClass *const listener) const </arglist>
    </member>
    <member kind="function">
      <name>call</name>
      <anchor>adb25c4b3880d1004072305edf2e08766</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)())</arglist>
    </member>
    <member kind="function">
      <name>callChecked</name>
      <anchor>a47566c46d8a5ec8df68a9bc489275efc</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)())</arglist>
    </member>
    <member kind="function">
      <name>call</name>
      <anchor>a8cb807c8e6bc96c02b46deb44f1edaa3</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1), LL_PARAM(1))</arglist>
    </member>
    <member kind="function">
      <name>callChecked</name>
      <anchor>a49df6f00275eb7eb9f57e4f119e8bc36</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1), LL_PARAM(1))</arglist>
    </member>
    <member kind="function">
      <name>call</name>
      <anchor>a203cb091475e5d61834cd04ed1ffcde8</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2), LL_PARAM(1), LL_PARAM(2))</arglist>
    </member>
    <member kind="function">
      <name>callChecked</name>
      <anchor>a386c157a0e0a51985dad0fbb3da13f1d</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2), LL_PARAM(1), LL_PARAM(2))</arglist>
    </member>
    <member kind="function">
      <name>call</name>
      <anchor>af8827ed009bbebd7041a3d06d8039365</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2, P3), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3))</arglist>
    </member>
    <member kind="function">
      <name>callChecked</name>
      <anchor>ad1c0bc3f99c7b92c7cc8bfac029e2681</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3))</arglist>
    </member>
    <member kind="function">
      <name>call</name>
      <anchor>ab5f31515114adeccb3161c764288182e</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2, P3, P4), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4))</arglist>
    </member>
    <member kind="function">
      <name>callChecked</name>
      <anchor>a47b4c2903fb6ae48a5ddc2239a1cbabc</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4))</arglist>
    </member>
    <member kind="function">
      <name>call</name>
      <anchor>a5c0a24fd48bdeb258c4bbc40bfff1728</anchor>
      <arglist>(void(ListenerClass::*callbackFunction)(P1, P2, P3, P4, P5), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5))</arglist>
    </member>
    <member kind="function">
      <name>callChecked</name>
      <anchor>a004bd5ff841992c3e535283ca3b02086</anchor>
      <arglist>(const BailOutCheckerType &amp;bailOutChecker, void(ListenerClass::*callbackFunction)(P1, P2, P3, P4, P5), LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5))</arglist>
    </member>
    <member kind="function">
      <name>getListeners</name>
      <anchor>a958714525de427516363c2bdfb0f7543</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListenerList::DummyBailOutChecker</name>
    <filename>classListenerList_1_1DummyBailOutChecker.html</filename>
    <member kind="function">
      <name>DummyBailOutChecker::shouldBailOut</name>
      <anchor>a5f13f3f339a089019d679c37c2f0dc71</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListenerList::Iterator</name>
    <filename>classListenerList_1_1Iterator.html</filename>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>aeea3d9f5c8c3772e6568ff4263ae6b2f</anchor>
      <arglist>(const ListType &amp;list_, const BailOutCheckerType &amp;bailOutChecker_)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::~Iterator</name>
      <anchor>a00b487fccb4e05091749c913a197808c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::next</name>
      <anchor>a9980b4ee13549c5d8392299a79671f8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::getListener</name>
      <anchor>acbb948a6b8894957265801a76089884e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalisedStrings</name>
    <filename>classLocalisedStrings.html</filename>
    <member kind="function">
      <name>LocalisedStrings</name>
      <anchor>a12f939ad4557caada5822e7bb9025318</anchor>
      <arglist>(const String &amp;fileContents)</arglist>
    </member>
    <member kind="function">
      <name>LocalisedStrings</name>
      <anchor>a11442a8ad64719a7f8cff9142fffb877</anchor>
      <arglist>(const File &amp;fileToLoad)</arglist>
    </member>
    <member kind="function">
      <name>~LocalisedStrings</name>
      <anchor>aba56315c628fc24aee1fb9c41e0e4fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCurrentMappings</name>
      <anchor>a4916d09e4d881362a6d35d753d902bf5</anchor>
      <arglist>(LocalisedStrings *newTranslations)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentMappings</name>
      <anchor>a0131361dde468bffc6c76a6f97b768eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>translateWithCurrentMappings</name>
      <anchor>ab161c25a6daf2b1bf6f72d38150a82c7</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>translateWithCurrentMappings</name>
      <anchor>a3e01ffa97188f60dae3df9f3ec7cd9fc</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>a912bf26e6a86d430750092cdf8bd7838</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <name>getLanguageName</name>
      <anchor>adf972acd8d97b0fea1855604fe4d894a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCountryCodes</name>
      <anchor>ad79373f4843c2685435f741281c374ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setIgnoresCase</name>
      <anchor>ae298a7c4217807e13b697beb61fdaec6</anchor>
      <arglist>(const bool shouldIgnoreCase)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Logger</name>
    <filename>classLogger.html</filename>
    <member kind="function">
      <name>~Logger</name>
      <anchor>ae93f62ca3e47716b7120acb032a260f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Logger</name>
      <anchor>abc41bfb031d896170c7675fa96a6b30c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCurrentLogger</name>
      <anchor>a3ca942845a38c92f77018f4e7e3b1b03</anchor>
      <arglist>(Logger *const newLogger, const bool deleteOldLogger=false)</arglist>
    </member>
    <member kind="function">
      <name>writeToLog</name>
      <anchor>a037cd16034c0663805f301b0e95c0be6</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
    <member kind="function">
      <name>outputDebugString</name>
      <anchor>a54273b4faf398b4da464d21bb6abac59</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>logMessage</name>
      <anchor>ab2ef7f6552d425bf729b7d1a7ed5160f</anchor>
      <arglist>(const String &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LookAndFeel</name>
    <filename>classLookAndFeel.html</filename>
    <member kind="function">
      <name>LookAndFeel</name>
      <anchor>ac3c8e3057a825febbdf7fcff31d0cb99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~LookAndFeel</name>
      <anchor>a377c52537b71e079dba7568f35af6520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDefaultLookAndFeel</name>
      <anchor>ade6e1f79d39de5eb7310be24b4b3553a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDefaultLookAndFeel</name>
      <anchor>aec7f4ae1e8cbab2140e138bc20b88eba</anchor>
      <arglist>(LookAndFeel *newDefaultLookAndFeel)</arglist>
    </member>
    <member kind="function">
      <name>findColour</name>
      <anchor>a83bf778eefdd849f7aba4575f9ec10c6</anchor>
      <arglist>(int colourId) const </arglist>
    </member>
    <member kind="function">
      <name>setColour</name>
      <anchor>a215093b3684c4d4d50efa9190e0c6639</anchor>
      <arglist>(int colourId, const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <name>isColourSpecified</name>
      <anchor>a60cc0a4abeb4a6d8e811791626f4da37</anchor>
      <arglist>(int colourId) const </arglist>
    </member>
    <member kind="function">
      <name>getTypefaceForFont</name>
      <anchor>a9f0db849b384fb22137023583167f419</anchor>
      <arglist>(const Font &amp;font)</arglist>
    </member>
    <member kind="function">
      <name>setDefaultSansSerifTypefaceName</name>
      <anchor>a15a3d2e1c913bc68859d29945f40a51a</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <name>getMouseCursorFor</name>
      <anchor>a3df2d12e060ae1a09fa00da4c503a04b</anchor>
      <arglist>(Component &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>drawButtonBackground</name>
      <anchor>a8dbd9bd9a981a90a1e0d15ec7270079b</anchor>
      <arglist>(Graphics &amp;g, Button &amp;button, const Colour &amp;backgroundColour, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>getFontForTextButton</name>
      <anchor>aed73a9961d3f0d20c5cb4ef471490e1d</anchor>
      <arglist>(TextButton &amp;button)</arglist>
    </member>
    <member kind="function">
      <name>drawButtonText</name>
      <anchor>a34b3d88bf774404b069092e8ee7955ed</anchor>
      <arglist>(Graphics &amp;g, TextButton &amp;button, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>drawToggleButton</name>
      <anchor>ad00c510749e2a29f742cc034d8d13347</anchor>
      <arglist>(Graphics &amp;g, ToggleButton &amp;button, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>changeToggleButtonWidthToFitText</name>
      <anchor>af00e9c23ac73e0b4a9aeb4eaa7883f3a</anchor>
      <arglist>(ToggleButton &amp;button)</arglist>
    </member>
    <member kind="function">
      <name>drawTickBox</name>
      <anchor>a4cb7f93b5c2dc0750c25289c3b2c965c</anchor>
      <arglist>(Graphics &amp;g, Component &amp;component, float x, float y, float w, float h, bool ticked, bool isEnabled, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>createAlertWindow</name>
      <anchor>adc19e3d1d06b1a8999790b47b56d3f95</anchor>
      <arglist>(const String &amp;title, const String &amp;message, const String &amp;button1, const String &amp;button2, const String &amp;button3, AlertWindow::AlertIconType iconType, int numButtons, Component *associatedComponent)</arglist>
    </member>
    <member kind="function">
      <name>drawAlertBox</name>
      <anchor>a7808705b08c5c33e39f01bfc6210410c</anchor>
      <arglist>(Graphics &amp;g, AlertWindow &amp;alert, const Rectangle&lt; int &gt; &amp;textArea, TextLayout &amp;textLayout)</arglist>
    </member>
    <member kind="function">
      <name>getAlertBoxWindowFlags</name>
      <anchor>ae1f8e3d087bd7fa54618034819dadcc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getAlertWindowButtonHeight</name>
      <anchor>aa5178a29ba5ed5fb1e752f20408abd06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getAlertWindowFont</name>
      <anchor>af3a91f996021475a8f22e1f421f2b43f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawProgressBar</name>
      <anchor>a5a0f15843df14eb4ddbcaeb60423510b</anchor>
      <arglist>(Graphics &amp;g, ProgressBar &amp;progressBar, int width, int height, double progress, const String &amp;textToShow)</arglist>
    </member>
    <member kind="function">
      <name>drawSpinningWaitAnimation</name>
      <anchor>a8b1b828e749bbf0c966c3563062ec77d</anchor>
      <arglist>(Graphics &amp;g, const Colour &amp;colour, int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>drawScrollbarButton</name>
      <anchor>a4880cb3699cd3024ca14ca94755dae50</anchor>
      <arglist>(Graphics &amp;g, ScrollBar &amp;scrollbar, int width, int height, int buttonDirection, bool isScrollbarVertical, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>drawScrollbar</name>
      <anchor>a60d120c5f522635b86feee4f727815ce</anchor>
      <arglist>(Graphics &amp;g, ScrollBar &amp;scrollbar, int x, int y, int width, int height, bool isScrollbarVertical, int thumbStartPosition, int thumbSize, bool isMouseOver, bool isMouseDown)</arglist>
    </member>
    <member kind="function">
      <name>getScrollbarEffect</name>
      <anchor>a620d41bdbc1915245f64c1646409024a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getMinimumScrollbarThumbSize</name>
      <anchor>a2bfec8ff30e454fdee91a87b8788a97e</anchor>
      <arglist>(ScrollBar &amp;scrollbar)</arglist>
    </member>
    <member kind="function">
      <name>getDefaultScrollbarWidth</name>
      <anchor>ab67f8f8945ff7776e29479aba9dc69c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getScrollbarButtonSize</name>
      <anchor>a020bc1ed1ce162cbf482fad7ea46408b</anchor>
      <arglist>(ScrollBar &amp;scrollbar)</arglist>
    </member>
    <member kind="function">
      <name>getTickShape</name>
      <anchor>a59b9be0688bae8e46c927b9b1ba5ff50</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <name>getCrossShape</name>
      <anchor>ac7ef8f5c24356c91c56be8089b90342b</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <name>drawTreeviewPlusMinusBox</name>
      <anchor>afa9575ddeeaa4b946fff1cf474606518</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int w, int h, bool isPlus, bool isMouseOver)</arglist>
    </member>
    <member kind="function">
      <name>fillTextEditorBackground</name>
      <anchor>a5605ae9a851611cb56c050e99ca7a68c</anchor>
      <arglist>(Graphics &amp;g, int width, int height, TextEditor &amp;textEditor)</arglist>
    </member>
    <member kind="function">
      <name>drawTextEditorOutline</name>
      <anchor>a1d9832a561664cced8c00d5c5169fac0</anchor>
      <arglist>(Graphics &amp;g, int width, int height, TextEditor &amp;textEditor)</arglist>
    </member>
    <member kind="function">
      <name>getDefaultFolderImage</name>
      <anchor>aebac3b96c3f8fdd861608d9ee590b16a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDefaultDocumentFileImage</name>
      <anchor>ad3ed3a202c1332761fa67ddeb9d77e00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createFileChooserHeaderText</name>
      <anchor>a33a95fb6c3940c91981b3f4822f6cf6b</anchor>
      <arglist>(const String &amp;title, const String &amp;instructions, GlyphArrangement &amp;destArrangement, int width)</arglist>
    </member>
    <member kind="function">
      <name>drawFileBrowserRow</name>
      <anchor>a51b679ccc1f20e9650b2453839e222b1</anchor>
      <arglist>(Graphics &amp;g, int width, int height, const String &amp;filename, Image *icon, const String &amp;fileSizeDescription, const String &amp;fileTimeDescription, bool isDirectory, bool isItemSelected, int itemIndex)</arglist>
    </member>
    <member kind="function">
      <name>createFileBrowserGoUpButton</name>
      <anchor>a310794092fd24d9f23bc7b7620964e4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>layoutFileBrowserComponent</name>
      <anchor>a996c40ff545bd36b85b6f7b97fd101d1</anchor>
      <arglist>(FileBrowserComponent &amp;browserComp, DirectoryContentsDisplayComponent *fileListComponent, FilePreviewComponent *previewComp, ComboBox *currentPathBox, TextEditor *filenameBox, Button *goUpButton)</arglist>
    </member>
    <member kind="function">
      <name>drawBubble</name>
      <anchor>a290c9c86050db87f5ea6779030826ded</anchor>
      <arglist>(Graphics &amp;g, float tipX, float tipY, float boxX, float boxY, float boxW, float boxH)</arglist>
    </member>
    <member kind="function">
      <name>drawPopupMenuBackground</name>
      <anchor>ad7660f46281cd050dde931232a3cff4d</anchor>
      <arglist>(Graphics &amp;g, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>drawPopupMenuItem</name>
      <anchor>a140a6248309d56bf8c8b3e72ed7bdc6c</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isSeparator, bool isActive, bool isHighlighted, bool isTicked, bool hasSubMenu, const String &amp;text, const String &amp;shortcutKeyText, Image *image, const Colour *const textColour)</arglist>
    </member>
    <member kind="function">
      <name>getPopupMenuFont</name>
      <anchor>ab534edc759d27fe27a308685e5043d1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawPopupMenuUpDownArrow</name>
      <anchor>af43c11f45a2d65ead660355e8468e471</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isScrollUpArrow)</arglist>
    </member>
    <member kind="function">
      <name>getIdealPopupMenuItemSize</name>
      <anchor>ae6d8e4885202adf5eeeafbb1dad8587d</anchor>
      <arglist>(const String &amp;text, bool isSeparator, int standardMenuItemHeight, int &amp;idealWidth, int &amp;idealHeight)</arglist>
    </member>
    <member kind="function">
      <name>getMenuWindowFlags</name>
      <anchor>aaffa3812abc886b082449a1bfc2cdce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawMenuBarBackground</name>
      <anchor>a585e8abe5df765d2eca59789e3c907a2</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isMouseOverBar, MenuBarComponent &amp;menuBar)</arglist>
    </member>
    <member kind="function">
      <name>getMenuBarItemWidth</name>
      <anchor>a03a4b7206e36203a4b4398c9c5ec32a3</anchor>
      <arglist>(MenuBarComponent &amp;menuBar, int itemIndex, const String &amp;itemText)</arglist>
    </member>
    <member kind="function">
      <name>getMenuBarFont</name>
      <anchor>a42323b086efbec2bfab2665494a5f297</anchor>
      <arglist>(MenuBarComponent &amp;menuBar, int itemIndex, const String &amp;itemText)</arglist>
    </member>
    <member kind="function">
      <name>drawMenuBarItem</name>
      <anchor>aa4c4834d321b9489a702bb23de791a2f</anchor>
      <arglist>(Graphics &amp;g, int width, int height, int itemIndex, const String &amp;itemText, bool isMouseOverItem, bool isMenuOpen, bool isMouseOverBar, MenuBarComponent &amp;menuBar)</arglist>
    </member>
    <member kind="function">
      <name>drawComboBox</name>
      <anchor>a6374b412f3dc81090012716e447b2916</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isButtonDown, int buttonX, int buttonY, int buttonW, int buttonH, ComboBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>getComboBoxFont</name>
      <anchor>aa2355506a261a71a65c3841f394d148d</anchor>
      <arglist>(ComboBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>createComboBoxTextBox</name>
      <anchor>ae4ee56424e5b369ba7188deb20ee3326</anchor>
      <arglist>(ComboBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>positionComboBoxText</name>
      <anchor>ad1e94a16a424903b5cad9baa3909421a</anchor>
      <arglist>(ComboBox &amp;box, Label &amp;labelToPosition)</arglist>
    </member>
    <member kind="function">
      <name>drawLabel</name>
      <anchor>a44ef672b9065ecd4c553d1bae6238ad0</anchor>
      <arglist>(Graphics &amp;g, Label &amp;label)</arglist>
    </member>
    <member kind="function">
      <name>drawLinearSlider</name>
      <anchor>a6476217b0367fe42cca0e8a8beb401d5</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle style, Slider &amp;slider)</arglist>
    </member>
    <member kind="function">
      <name>drawLinearSliderBackground</name>
      <anchor>afd9d8b992c754e7730bf802865e4a8e4</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle style, Slider &amp;slider)</arglist>
    </member>
    <member kind="function">
      <name>drawLinearSliderThumb</name>
      <anchor>aa5f3eac6860c4cbdee2d8f71c7952381</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle style, Slider &amp;slider)</arglist>
    </member>
    <member kind="function">
      <name>getSliderThumbRadius</name>
      <anchor>a3431247f022a5abd39de55fed9b35a29</anchor>
      <arglist>(Slider &amp;slider)</arglist>
    </member>
    <member kind="function">
      <name>drawRotarySlider</name>
      <anchor>a06a712a86cf11099ee0495f416e7761e</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int width, int height, float sliderPosProportional, float rotaryStartAngle, float rotaryEndAngle, Slider &amp;slider)</arglist>
    </member>
    <member kind="function">
      <name>createSliderButton</name>
      <anchor>a8936bfac6c30ca3bfc02b8717c78724c</anchor>
      <arglist>(bool isIncrement)</arglist>
    </member>
    <member kind="function">
      <name>createSliderTextBox</name>
      <anchor>afb1eb68e3421cf3dcea9b3d4204d2e2e</anchor>
      <arglist>(Slider &amp;slider)</arglist>
    </member>
    <member kind="function">
      <name>getSliderEffect</name>
      <anchor>add3d1dc087adf5b3c19e4b11fcdf126a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTooltipSize</name>
      <anchor>a3a44cc3dd7f4e47b6b3450bd833c7ac1</anchor>
      <arglist>(const String &amp;tipText, int &amp;width, int &amp;height)</arglist>
    </member>
    <member kind="function">
      <name>drawTooltip</name>
      <anchor>a6facc42a5b70d48c9c6706ae06b1c766</anchor>
      <arglist>(Graphics &amp;g, const String &amp;text, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>createFilenameComponentBrowseButton</name>
      <anchor>ae14685e5b684de2c1a86b0bb774f25de</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>layoutFilenameComponent</name>
      <anchor>a812441cc621a83202e9e7381e696c55c</anchor>
      <arglist>(FilenameComponent &amp;filenameComp, ComboBox *filenameBox, Button *browseButton)</arglist>
    </member>
    <member kind="function">
      <name>drawCornerResizer</name>
      <anchor>ad88c6a610b71f207cbe1ddf894e33f38</anchor>
      <arglist>(Graphics &amp;g, int w, int h, bool isMouseOver, bool isMouseDragging)</arglist>
    </member>
    <member kind="function">
      <name>drawResizableFrame</name>
      <anchor>a803d945e1d3b6833094013df7b38a1b3</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const BorderSize &amp;borders)</arglist>
    </member>
    <member kind="function">
      <name>fillResizableWindowBackground</name>
      <anchor>a765b21fdefd0d513ba731c016d9bd183</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const BorderSize &amp;border, ResizableWindow &amp;window)</arglist>
    </member>
    <member kind="function">
      <name>drawResizableWindowBorder</name>
      <anchor>a2a47ecac9dc02e676004216e23abd1c8</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const BorderSize &amp;border, ResizableWindow &amp;window)</arglist>
    </member>
    <member kind="function">
      <name>drawDocumentWindowTitleBar</name>
      <anchor>a41b7ba1e8cfdf0532eecf76f32322c62</anchor>
      <arglist>(DocumentWindow &amp;window, Graphics &amp;g, int w, int h, int titleSpaceX, int titleSpaceW, const Image *icon, bool drawTitleTextOnLeft)</arglist>
    </member>
    <member kind="function">
      <name>createDocumentWindowButton</name>
      <anchor>a95a790d5f1be2ac8a3abf1f75ef5f001</anchor>
      <arglist>(int buttonType)</arglist>
    </member>
    <member kind="function">
      <name>positionDocumentWindowButtons</name>
      <anchor>a6f49a6578f85f27e457cba06a4e3a915</anchor>
      <arglist>(DocumentWindow &amp;window, int titleBarX, int titleBarY, int titleBarW, int titleBarH, Button *minimiseButton, Button *maximiseButton, Button *closeButton, bool positionTitleBarButtonsOnLeft)</arglist>
    </member>
    <member kind="function">
      <name>getDefaultMenuBarHeight</name>
      <anchor>afbb9c7a455f188ac30ae4dac354cce8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createDropShadowerForComponent</name>
      <anchor>a2482b209dec9f86c0f2ddc249d8b77c9</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <name>drawStretchableLayoutResizerBar</name>
      <anchor>a22dd269f6b66f077f1699dc23a001d3f</anchor>
      <arglist>(Graphics &amp;g, int w, int h, bool isVerticalBar, bool isMouseOver, bool isMouseDragging)</arglist>
    </member>
    <member kind="function">
      <name>drawGroupComponentOutline</name>
      <anchor>a4e8170460cb6ce0c373447232f05cfb6</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const String &amp;text, const Justification &amp;position, GroupComponent &amp;group)</arglist>
    </member>
    <member kind="function">
      <name>createTabButtonShape</name>
      <anchor>a2658988ac7e09488762d3a76a0d5ff3e</anchor>
      <arglist>(Path &amp;p, int width, int height, int tabIndex, const String &amp;text, Button &amp;button, TabbedButtonBar::Orientation orientation, bool isMouseOver, bool isMouseDown, bool isFrontTab)</arglist>
    </member>
    <member kind="function">
      <name>fillTabButtonShape</name>
      <anchor>a1f3c2d68322f937465327408f1f06d0a</anchor>
      <arglist>(Graphics &amp;g, const Path &amp;path, const Colour &amp;preferredBackgroundColour, int tabIndex, const String &amp;text, Button &amp;button, TabbedButtonBar::Orientation orientation, bool isMouseOver, bool isMouseDown, bool isFrontTab)</arglist>
    </member>
    <member kind="function">
      <name>drawTabButtonText</name>
      <anchor>aa21ca6362973ac302435e335b7c14548</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int w, int h, const Colour &amp;preferredBackgroundColour, int tabIndex, const String &amp;text, Button &amp;button, TabbedButtonBar::Orientation orientation, bool isMouseOver, bool isMouseDown, bool isFrontTab)</arglist>
    </member>
    <member kind="function">
      <name>getTabButtonOverlap</name>
      <anchor>a9b2f6ab233f29beeb4b66225e14a5e3f</anchor>
      <arglist>(int tabDepth)</arglist>
    </member>
    <member kind="function">
      <name>getTabButtonSpaceAroundImage</name>
      <anchor>a3a25d9b9d0aa131940ac3c48ac46811e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTabButtonBestWidth</name>
      <anchor>a7f01a8d7922574e167cee0c0ec46f476</anchor>
      <arglist>(int tabIndex, const String &amp;text, int tabDepth, Button &amp;button)</arglist>
    </member>
    <member kind="function">
      <name>drawTabButton</name>
      <anchor>ae21968f086967bf3571248c08bdabf3a</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const Colour &amp;preferredColour, int tabIndex, const String &amp;text, Button &amp;button, TabbedButtonBar::Orientation orientation, bool isMouseOver, bool isMouseDown, bool isFrontTab)</arglist>
    </member>
    <member kind="function">
      <name>drawTabAreaBehindFrontButton</name>
      <anchor>a5b56a42509e1650b52bd9ae6af78e7da</anchor>
      <arglist>(Graphics &amp;g, int w, int h, TabbedButtonBar &amp;tabBar, TabbedButtonBar::Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <name>createTabBarExtrasButton</name>
      <anchor>af390796715eb21445893f5d895714c95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawImageButton</name>
      <anchor>aa5e490ef83db662ec7be31c759bfc199</anchor>
      <arglist>(Graphics &amp;g, Image *image, int imageX, int imageY, int imageW, int imageH, const Colour &amp;overlayColour, float imageOpacity, ImageButton &amp;button)</arglist>
    </member>
    <member kind="function">
      <name>drawTableHeaderBackground</name>
      <anchor>a3978bacd83746fa52fe8b6ca301fbc0e</anchor>
      <arglist>(Graphics &amp;g, TableHeaderComponent &amp;header)</arglist>
    </member>
    <member kind="function">
      <name>drawTableHeaderColumn</name>
      <anchor>a402d9884ebdfc8464be986ce056651a0</anchor>
      <arglist>(Graphics &amp;g, const String &amp;columnName, int columnId, int width, int height, bool isMouseOver, bool isMouseDown, int columnFlags)</arglist>
    </member>
    <member kind="function">
      <name>paintToolbarBackground</name>
      <anchor>afadb0bbb5a0272263a0de37c5756d100</anchor>
      <arglist>(Graphics &amp;g, int width, int height, Toolbar &amp;toolbar)</arglist>
    </member>
    <member kind="function">
      <name>createToolbarMissingItemsButton</name>
      <anchor>aaadbaa034de45111397987b70d41c426</anchor>
      <arglist>(Toolbar &amp;toolbar)</arglist>
    </member>
    <member kind="function">
      <name>paintToolbarButtonBackground</name>
      <anchor>a144d7350c3d57fb1f17c49a34b3b674f</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isMouseOver, bool isMouseDown, ToolbarItemComponent &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>paintToolbarButtonLabel</name>
      <anchor>ac5b59d072b7c89510cc866f950458d8b</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int width, int height, const String &amp;text, ToolbarItemComponent &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>drawPropertyPanelSectionHeader</name>
      <anchor>a977fc8156a5eca5ab95cd1904f3599bd</anchor>
      <arglist>(Graphics &amp;g, const String &amp;name, bool isOpen, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>drawPropertyComponentBackground</name>
      <anchor>a4e119b58dcd08d39c4775b0079d97a25</anchor>
      <arglist>(Graphics &amp;g, int width, int height, PropertyComponent &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>drawPropertyComponentLabel</name>
      <anchor>a836de65af6c2fc67e08492acb9e7876a</anchor>
      <arglist>(Graphics &amp;g, int width, int height, PropertyComponent &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>getPropertyComponentContentPosition</name>
      <anchor>a4760e2877630b3558ee9a1c0518b30b3</anchor>
      <arglist>(PropertyComponent &amp;component)</arglist>
    </member>
    <member kind="function">
      <name>drawLevelMeter</name>
      <anchor>a5baa8963b51fbd5bb4df6657ed8760f0</anchor>
      <arglist>(Graphics &amp;g, int width, int height, float level)</arglist>
    </member>
    <member kind="function">
      <name>drawKeymapChangeButton</name>
      <anchor>a8a8bfac538ddc28e73496c26d963638e</anchor>
      <arglist>(Graphics &amp;g, int width, int height, Button &amp;button, const String &amp;keyDescription)</arglist>
    </member>
    <member kind="function">
      <name>playAlertSound</name>
      <anchor>ac8619d01580cde12075b229490ab2f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawGlassSphere</name>
      <anchor>a27cc35b084667a8428927d4b8deec862</anchor>
      <arglist>(Graphics &amp;g, float x, float y, float diameter, const Colour &amp;colour, float outlineThickness)</arglist>
    </member>
    <member kind="function">
      <name>drawGlassPointer</name>
      <anchor>a892ab340fda78f1575f52b217fe65c9b</anchor>
      <arglist>(Graphics &amp;g, float x, float y, float diameter, const Colour &amp;colour, float outlineThickness, int direction)</arglist>
    </member>
    <member kind="function">
      <name>drawGlassLozenge</name>
      <anchor>a3c5fe20a56ac5dcc8e4e6f802c5b956d</anchor>
      <arglist>(Graphics &amp;g, float x, float y, float width, float height, const Colour &amp;colour, float outlineThickness, float cornerSize, bool flatOnLeft, bool flatOnRight, bool flatOnTop, bool flatOnBottom)</arglist>
    </member>
    <member kind="function">
      <name>shutdownJuce_GUI</name>
      <anchor>a2cd9961ea76b25d9451111e4d3e72def</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowLevelGraphicsContext</name>
    <filename>classLowLevelGraphicsContext.html</filename>
    <member kind="function">
      <name>LowLevelGraphicsContext</name>
      <anchor>a7bc641020d6f44a15a10bde2f22a8bab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~LowLevelGraphicsContext</name>
      <anchor>ae52dbd717d7336a5523e0e3106c2f8be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isVectorDevice</name>
      <anchor>a3065966f502492c5889429a13b5e45ab</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>setOrigin</name>
      <anchor>a088803372a49c9b297a1bafeb03a2398</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>clipToRectangle</name>
      <anchor>aaa08f796cf992357fb6342baa958bfd6</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)=0</arglist>
    </member>
    <member kind="function">
      <name>clipToRectangleList</name>
      <anchor>a02c89819dca5f7c67ba91f0e3f8d803a</anchor>
      <arglist>(const RectangleList &amp;clipRegion)=0</arglist>
    </member>
    <member kind="function">
      <name>excludeClipRectangle</name>
      <anchor>a9f4fba10dde9c8e5031d924505f183df</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)=0</arglist>
    </member>
    <member kind="function">
      <name>clipToPath</name>
      <anchor>a8ad59b64de518b81311efe156a006a2d</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function">
      <name>clipToImageAlpha</name>
      <anchor>a2ab1425652389073826c7399a261c21d</anchor>
      <arglist>(const Image &amp;sourceImage, const Rectangle&lt; int &gt; &amp;srcClip, const AffineTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function">
      <name>clipRegionIntersects</name>
      <anchor>af98935b3abbe40e7a1ecf85d777723bd</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)=0</arglist>
    </member>
    <member kind="function">
      <name>getClipBounds</name>
      <anchor>a389f6b3e454d4a962b8580896f661a61</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>isClipEmpty</name>
      <anchor>a1bfb18f0f76a90bb5c2282777551acde</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>saveState</name>
      <anchor>a254135b4a407bdbc47c4f25e70c3eaf5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>restoreState</name>
      <anchor>a873bad830decaf0de5a3a34027ce8519</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>setFill</name>
      <anchor>a40bc24455843a6e95b88db3d86cffe1a</anchor>
      <arglist>(const FillType &amp;fillType)=0</arglist>
    </member>
    <member kind="function">
      <name>setOpacity</name>
      <anchor>aa84973a37cea2535e86143a54f4fb0a3</anchor>
      <arglist>(float newOpacity)=0</arglist>
    </member>
    <member kind="function">
      <name>setInterpolationQuality</name>
      <anchor>ab1ffb7d4c38df12ce39fe36bb73b3615</anchor>
      <arglist>(Graphics::ResamplingQuality quality)=0</arglist>
    </member>
    <member kind="function">
      <name>fillRect</name>
      <anchor>a0b3f796d4abd33b5e90d4eaedea50df9</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r, bool replaceExistingContents)=0</arglist>
    </member>
    <member kind="function">
      <name>fillPath</name>
      <anchor>ab8aa4bea47040112f7a185ae689faffd</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>a0c4fedccdd77d975983be0f826355015</anchor>
      <arglist>(const Image &amp;sourceImage, const Rectangle&lt; int &gt; &amp;srcClip, const AffineTransform &amp;transform, bool fillEntireClipAsTiles)=0</arglist>
    </member>
    <member kind="function">
      <name>drawLine</name>
      <anchor>a4871cbcba27a47827868ce15f73d24a5</anchor>
      <arglist>(double x1, double y1, double x2, double y2)=0</arglist>
    </member>
    <member kind="function">
      <name>drawVerticalLine</name>
      <anchor>aa5df32d26fd891f3b0baeead6ff674b0</anchor>
      <arglist>(int x, double top, double bottom)=0</arglist>
    </member>
    <member kind="function">
      <name>drawHorizontalLine</name>
      <anchor>a717664267980d7c31ff65b74dcf97f1a</anchor>
      <arglist>(int y, double left, double right)=0</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>a0a13d86839d52f6d691f4694e0b941a9</anchor>
      <arglist>(const Font &amp;newFont)=0</arglist>
    </member>
    <member kind="function">
      <name>getFont</name>
      <anchor>aa16ddefe01b12a6f1706542afcffc764</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>drawGlyph</name>
      <anchor>aae75c3a7ea8ff92f52f8f92d122ce4de</anchor>
      <arglist>(int glyphNumber, const AffineTransform &amp;transform)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowLevelGraphicsPostScriptRenderer</name>
    <base>LowLevelGraphicsContext</base>
    <filename>classLowLevelGraphicsPostScriptRenderer.html</filename>
    <member kind="function">
      <name>LowLevelGraphicsPostScriptRenderer</name>
      <anchor>a08206c409e9491668e7d929fd06d5391</anchor>
      <arglist>(OutputStream &amp;resultingPostScript, const String &amp;documentTitle, int totalWidth, int totalHeight)</arglist>
    </member>
    <member kind="function">
      <name>~LowLevelGraphicsPostScriptRenderer</name>
      <anchor>a1fe792575e086f09de6b8b7a1d71d815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>LowLevelGraphicsPostScriptRenderer</name>
      <anchor>ad2d174219389d752974c3edbbb2f61cb</anchor>
      <arglist>(const LowLevelGraphicsPostScriptRenderer &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>isVectorDevice</name>
      <anchor>acabb79057bf1345aa637b21ab5a4bc48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setOrigin</name>
      <anchor>a415300484c4f2d659cb26dfd19b28314</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>clipToRectangle</name>
      <anchor>aeb6e0383fce8c1e8cfad36952a424ea0</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>clipToRectangleList</name>
      <anchor>a43370004ace2094c69fa837f3a392dd8</anchor>
      <arglist>(const RectangleList &amp;clipRegion)</arglist>
    </member>
    <member kind="function">
      <name>excludeClipRectangle</name>
      <anchor>a58f689a9ccdc50884c792dd221269f9c</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>clipToPath</name>
      <anchor>ad85a04353f8babdae930dec28c46711d</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>clipToImageAlpha</name>
      <anchor>a9a72b3a2e95ba6c933ab7f2baa4836db</anchor>
      <arglist>(const Image &amp;sourceImage, const Rectangle&lt; int &gt; &amp;srcClip, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>saveState</name>
      <anchor>af3a313342b98473f97734c7345dcbee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>restoreState</name>
      <anchor>ae819a388261847724abedfbb0cc76b42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clipRegionIntersects</name>
      <anchor>a9abcde249dd45dddff4fbc108dae0a57</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>getClipBounds</name>
      <anchor>a9e53377b39f56322e942db1ca2b3af56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isClipEmpty</name>
      <anchor>aed924bca5c684b5b4b4a78f54c8df0d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setFill</name>
      <anchor>a05dc63404638c983e43abc132f30f628</anchor>
      <arglist>(const FillType &amp;fillType)</arglist>
    </member>
    <member kind="function">
      <name>setOpacity</name>
      <anchor>a629c3a2b985114fa571db27963fc2277</anchor>
      <arglist>(float opacity)</arglist>
    </member>
    <member kind="function">
      <name>setInterpolationQuality</name>
      <anchor>ab45102dfd88fe08d3c005424005052b6</anchor>
      <arglist>(Graphics::ResamplingQuality quality)</arglist>
    </member>
    <member kind="function">
      <name>fillRect</name>
      <anchor>af86d1af660e7cb82c42862531feaab92</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r, bool replaceExistingContents)</arglist>
    </member>
    <member kind="function">
      <name>fillPath</name>
      <anchor>a8449127c9e0f0dc2726493f290fb8d5a</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>a40ba44df31f35f79337c3c7f14c26a23</anchor>
      <arglist>(const Image &amp;sourceImage, const Rectangle&lt; int &gt; &amp;srcClip, const AffineTransform &amp;transform, bool fillEntireClipAsTiles)</arglist>
    </member>
    <member kind="function">
      <name>drawLine</name>
      <anchor>ae926f696d0b5468db0e7f9ca6f941bb2</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function">
      <name>drawVerticalLine</name>
      <anchor>a5a6f93d6544c784b2a2fa97be1b97c18</anchor>
      <arglist>(int x, double top, double bottom)</arglist>
    </member>
    <member kind="function">
      <name>drawHorizontalLine</name>
      <anchor>ad3ba08ff74ce206e742f5f129e9a4055</anchor>
      <arglist>(int x, double top, double bottom)</arglist>
    </member>
    <member kind="function">
      <name>getFont</name>
      <anchor>aaee113fd6cdda954bc55175868b8ab8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>adbd9ed0d6470b8f3c2e8b4ac76307999</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <name>drawGlyph</name>
      <anchor>a5362ccebd773c4af42ef1e1e1442e43f</anchor>
      <arglist>(int glyphNumber, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>writeClip</name>
      <anchor>ad6a3a6f3041a02c5aac656dbd7ec2c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>writeColour</name>
      <anchor>a1faf5f29049d5da11911c8df037612be</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <name>writePath</name>
      <anchor>a7dd61a77af1e0fbf83a2879f5f383309</anchor>
      <arglist>(const Path &amp;path) const </arglist>
    </member>
    <member kind="function">
      <name>writeXY</name>
      <anchor>aa55ce0492614b773c2250d7d1e37d954</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <name>writeTransform</name>
      <anchor>a134cad7780073f23056bf7e2637a1985</anchor>
      <arglist>(const AffineTransform &amp;trans) const </arglist>
    </member>
    <member kind="function">
      <name>writeImage</name>
      <anchor>acf0d11d1eff9fdc8f70a9c377c076269</anchor>
      <arglist>(const Image &amp;im, int sx, int sy, int maxW, int maxH) const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>abb0e78332ae9edf8e0fe5bdb3edb1af4</anchor>
      <arglist>(const LowLevelGraphicsPostScriptRenderer &amp;)</arglist>
    </member>
    <member kind="function">
      <name>out</name>
      <anchor>abda44d72a9730c4b62ce3a7a2fbc8bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>totalWidth</name>
      <anchor>a0fa5658fdc5f8c2fb801ab7dba117f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>totalHeight</name>
      <anchor>a842f2dc876aeebb14cc27e3faee70735</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>needToClip</name>
      <anchor>a75772619fb8c5d185cd82b48ee46822e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lastColour</name>
      <anchor>af380fa0611c3ca97a4cb2925a228bbd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>stateStack</name>
      <anchor>a95a55fd1cd7588048a37ac86fa384849</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowLevelGraphicsSoftwareRenderer</name>
    <base>LowLevelGraphicsContext</base>
    <filename>classLowLevelGraphicsSoftwareRenderer.html</filename>
    <member kind="function">
      <name>LowLevelGraphicsSoftwareRenderer</name>
      <anchor>a1d2eaf881f0dd9eb4cf6840a549cb2e6</anchor>
      <arglist>(Image &amp;imageToRenderOn)</arglist>
    </member>
    <member kind="function">
      <name>~LowLevelGraphicsSoftwareRenderer</name>
      <anchor>aa1594e25b78ce4f55d1a4c785fdce3ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>LowLevelGraphicsSoftwareRenderer</name>
      <anchor>ab7bb3713b47f8805cb8a76aab7ad7dd2</anchor>
      <arglist>(const LowLevelGraphicsSoftwareRenderer &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>isVectorDevice</name>
      <anchor>a2923a10a3f58198049e53ef7c8a4da0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setOrigin</name>
      <anchor>ae4135dd1d692f2fe8d36ec17b9dc36b2</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>clipToRectangle</name>
      <anchor>ac74f95dc095fe9a7f509143032edf08e</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>clipToRectangleList</name>
      <anchor>af10a586766f1024b90c1766d26a70e31</anchor>
      <arglist>(const RectangleList &amp;clipRegion)</arglist>
    </member>
    <member kind="function">
      <name>excludeClipRectangle</name>
      <anchor>a414eb27117da780e348c401f3e284b6d</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>clipToPath</name>
      <anchor>a73df9711298b593cfd862dcdcac77286</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>clipToImageAlpha</name>
      <anchor>a322e3d5b52383accec229e156f8519f1</anchor>
      <arglist>(const Image &amp;sourceImage, const Rectangle&lt; int &gt; &amp;srcClip, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>clipRegionIntersects</name>
      <anchor>a664b4a4485247c893ff57837f9aa22c0</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>getClipBounds</name>
      <anchor>aca9ae7db3c3518dc835294e9e298f0a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isClipEmpty</name>
      <anchor>acd85f92727ce047921232e08489db5bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>saveState</name>
      <anchor>a0354dced116a419c90309477a05bd7ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>restoreState</name>
      <anchor>a6ce62a6b103e8f0ea6a257fbb431dc66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFill</name>
      <anchor>a3b48fd32a733069cea201c16be41cb21</anchor>
      <arglist>(const FillType &amp;fillType)</arglist>
    </member>
    <member kind="function">
      <name>setOpacity</name>
      <anchor>a0712b890c6e0fdc52a364e6df080c8a5</anchor>
      <arglist>(float opacity)</arglist>
    </member>
    <member kind="function">
      <name>setInterpolationQuality</name>
      <anchor>a090e203989f13525b06ca87d5efd11dd</anchor>
      <arglist>(Graphics::ResamplingQuality quality)</arglist>
    </member>
    <member kind="function">
      <name>fillRect</name>
      <anchor>ab6207ce29cc421074236d751df3d89a8</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r, bool replaceExistingContents)</arglist>
    </member>
    <member kind="function">
      <name>fillPath</name>
      <anchor>af2f54ae28ceaff083e8745456f015553</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>a81cc6d6515d4ef6ab5b671209e9da1f2</anchor>
      <arglist>(const Image &amp;sourceImage, const Rectangle&lt; int &gt; &amp;srcClip, const AffineTransform &amp;transform, bool fillEntireClipAsTiles)</arglist>
    </member>
    <member kind="function">
      <name>drawLine</name>
      <anchor>a3757bac98fe69fe1ce66d2d286ee1a20</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function">
      <name>drawVerticalLine</name>
      <anchor>abcf86bc2917337193e1be4f7f82f476f</anchor>
      <arglist>(int x, double top, double bottom)</arglist>
    </member>
    <member kind="function">
      <name>drawHorizontalLine</name>
      <anchor>af1c27dad5811f0e844245d98ea1a0174</anchor>
      <arglist>(int x, double top, double bottom)</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>aaae9b6d046ad8fb8dc54d78d0d718358</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <name>getFont</name>
      <anchor>ac3642c0573a3ceeb9a29b5e0636541a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawGlyph</name>
      <anchor>aa51af2f0267f19b882f7c05af68428b7</anchor>
      <arglist>(int glyphNumber, float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>drawGlyph</name>
      <anchor>a848755aa0beb465555fbdc4545ed13d3</anchor>
      <arglist>(int glyphNumber, const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a5898298194f7f649886b93aa6b4de41f</anchor>
      <arglist>(const LowLevelGraphicsSoftwareRenderer &amp;)</arglist>
    </member>
    <member kind="function">
      <name>image</name>
      <anchor>af820c95a3209fa1488c512f4b0673571</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>currentState</name>
      <anchor>a668d8ea0d92ea56cddbdfd5b7c6a37c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>stateStack</name>
      <anchor>a4120e3641e2e79ad2f10edfbfee06402</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MagnifierComponent</name>
    <base>Component</base>
    <filename>classMagnifierComponent.html</filename>
    <member kind="function">
      <name>MagnifierComponent</name>
      <anchor>a2dc712300eb90d9aeac6f4fffccfb1c2</anchor>
      <arglist>(Component *contentComponent, bool deleteContentCompWhenNoLongerNeeded)</arglist>
    </member>
    <member kind="function">
      <name>~MagnifierComponent</name>
      <anchor>a41e04b4d6bb15a2b1776fae9450a7c39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getContentComponent</name>
      <anchor>a875609175c8335e4b25ec0ac790b8346</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setScaleFactor</name>
      <anchor>a5756f6955f5343d277c645bfca1612ea</anchor>
      <arglist>(double newScaleFactor)</arglist>
    </member>
    <member kind="function">
      <name>getScaleFactor</name>
      <anchor>a5bacbec0e378fde6e86311026e99b9e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setResamplingQuality</name>
      <anchor>afa0972ca3e604282e2c80838ffd090c5</anchor>
      <arglist>(Graphics::ResamplingQuality newQuality)</arglist>
    </member>
    <member kind="function">
      <name>childBoundsChanged</name>
      <anchor>aa320800edbd19da362644ceb1c8f6e76</anchor>
      <arglist>(Component *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MD5</name>
    <filename>classMD5.html</filename>
    <member kind="function">
      <name>MD5</name>
      <anchor>afa6155ec36de415ab2dcf5e54b670d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MD5</name>
      <anchor>a320bdc423d2a677d2db34e0630201542</anchor>
      <arglist>(const MD5 &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>MD5</name>
      <anchor>a1953dfc398a00d1bdcc7810fb6e40ba4</anchor>
      <arglist>(const MemoryBlock &amp;data)</arglist>
    </member>
    <member kind="function">
      <name>MD5</name>
      <anchor>a638e364b92cfe3f626a46ed3b08c1f2e</anchor>
      <arglist>(const void *data, const size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <name>MD5</name>
      <anchor>ad46ea05965df06d14969c1af31b274dc</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>MD5</name>
      <anchor>aeace778a72301d24a79b8519e1dcedbd</anchor>
      <arglist>(InputStream &amp;input, int64 numBytesToRead=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>MD5</name>
      <anchor>a4dd5165aaeca735d904b8e47d94e8cf3</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <name>~MD5</name>
      <anchor>a4d28f3ed296dab676d5333b275add2e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a73fead7f9330d761aeb5b76932a7855e</anchor>
      <arglist>(const MD5 &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>getRawChecksumData</name>
      <anchor>ab0b40b8c47ec243be15d36f3e87d431c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>toHexString</name>
      <anchor>aa9bff0f54cb827a061f08942636fcc5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a091cc27bb8e913dcad78d9a85abe14d4</anchor>
      <arglist>(const MD5 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>ad83a812213c4e1cf0862224e87de81ce</anchor>
      <arglist>(const MD5 &amp;other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemoryBlock</name>
    <filename>classMemoryBlock.html</filename>
    <member kind="function">
      <name>MemoryBlock</name>
      <anchor>a734af8678e5b969cfc2b10e3395c101a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MemoryBlock</name>
      <anchor>aa1cb4f3a32522cc11452f320ad9825ed</anchor>
      <arglist>(const size_t initialSize, const bool initialiseToZero=false)</arglist>
    </member>
    <member kind="function">
      <name>MemoryBlock</name>
      <anchor>ae1ab9d3202796c403ab7a0481118d2bf</anchor>
      <arglist>(const MemoryBlock &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>MemoryBlock</name>
      <anchor>a43c051da80c9c41b027b5e74051b201a</anchor>
      <arglist>(const void *const dataToInitialiseFrom, const size_t sizeInBytes)</arglist>
    </member>
    <member kind="function">
      <name>~MemoryBlock</name>
      <anchor>a1af2edbe97a10dcf54f8b8b631d608ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>af529a6629e2e1da15941498825093c11</anchor>
      <arglist>(const MemoryBlock &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a9cd39a4eec4c2653e4f4d1b50a95fc1c</anchor>
      <arglist>(const MemoryBlock &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>ad47fa29d77b41735eaf84cce319c85c5</anchor>
      <arglist>(const MemoryBlock &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>matches</name>
      <anchor>af9ce16fa819395e8ccb440fffb322729</anchor>
      <arglist>(const void *data, size_t dataSize) const </arglist>
    </member>
    <member kind="function">
      <name>getData</name>
      <anchor>a6766f6ce6f118c4aa0f22d76a547d137</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>a55ab4dbb41a3552e9273e686291ad649</anchor>
      <arglist>(const Type offset) const </arglist>
    </member>
    <member kind="function">
      <name>getSize</name>
      <anchor>a0968e80ae8044a819700e05d1596a30d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setSize</name>
      <anchor>a23b06120a362cff225077cff5a57d6f3</anchor>
      <arglist>(const size_t newSize, const bool initialiseNewSpaceToZero=false)</arglist>
    </member>
    <member kind="function">
      <name>ensureSize</name>
      <anchor>a2d96506cf54d8bc72532fbdc3ce4c481</anchor>
      <arglist>(const size_t minimumSize, const bool initialiseNewSpaceToZero=false)</arglist>
    </member>
    <member kind="function">
      <name>fillWith</name>
      <anchor>a6dcf1006e9b7667b0a3df6ae2111d262</anchor>
      <arglist>(const uint8 valueToUse)</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>aca4dc4670e5c02c283e5737828cfc267</anchor>
      <arglist>(const void *const data, const size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <name>swapWith</name>
      <anchor>a9569406bb340470571e627376b68de86</anchor>
      <arglist>(MemoryBlock &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>copyFrom</name>
      <anchor>a78234beb94a36a0359d494a5e07820b8</anchor>
      <arglist>(const void *srcData, int destinationOffset, size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <name>copyTo</name>
      <anchor>af43422774cb2449245c4b6dd9ec1a720</anchor>
      <arglist>(void *destData, int sourceOffset, size_t numBytes) const </arglist>
    </member>
    <member kind="function">
      <name>removeSection</name>
      <anchor>a7fb654675288d40483f9150ffd38e16a</anchor>
      <arglist>(size_t startByte, size_t numBytesToRemove)</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>a5fb6e9cd79411ae061925f3c08379036</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>loadFromHexString</name>
      <anchor>a9e3a187895669b56e43f94a6811d39b9</anchor>
      <arglist>(const String &amp;sourceHexString)</arglist>
    </member>
    <member kind="function">
      <name>setBitRange</name>
      <anchor>a0e05eb01d558e83f7dd3f44ebbd518bf</anchor>
      <arglist>(size_t bitRangeStart, size_t numBits, int binaryNumberToApply)</arglist>
    </member>
    <member kind="function">
      <name>getBitRange</name>
      <anchor>a67613d5b2a71c7e041b51a38312c2346</anchor>
      <arglist>(size_t bitRangeStart, size_t numBitsToRead) const </arglist>
    </member>
    <member kind="function">
      <name>toBase64Encoding</name>
      <anchor>a779908794a5c48169665962e23892154</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>fromBase64Encoding</name>
      <anchor>a1195493d153f46de5f9bc8d7f78de84e</anchor>
      <arglist>(const String &amp;encodedString)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemoryInputStream</name>
    <base>InputStream</base>
    <filename>classMemoryInputStream.html</filename>
    <member kind="function">
      <name>MemoryInputStream</name>
      <anchor>a31c23dcffd260d093e1393dc041c1645</anchor>
      <arglist>(const void *sourceData, size_t sourceDataSize, bool keepInternalCopyOfData)</arglist>
    </member>
    <member kind="function">
      <name>MemoryInputStream</name>
      <anchor>a27eb51bcd71517ffcc20c8f3c49481d7</anchor>
      <arglist>(const MemoryBlock &amp;data, bool keepInternalCopyOfData)</arglist>
    </member>
    <member kind="function">
      <name>~MemoryInputStream</name>
      <anchor>a9ed7a136a3c0b06d98eb79c4f02acaeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>a1dd03d5d90d73eab9adcf60a065314f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>a3b8720d99faecfe1d86b63905c6d0025</anchor>
      <arglist>(int64 pos)</arglist>
    </member>
    <member kind="function">
      <name>getTotalLength</name>
      <anchor>a33b7212051a112031b41ebd3cea4302f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isExhausted</name>
      <anchor>a13f93439dc9a045befd130c5da70ff49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>aa1f1cfc628b4061671930f82f72bf7b0</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemoryOutputStream</name>
    <base>OutputStream</base>
    <filename>classMemoryOutputStream.html</filename>
    <member kind="function">
      <name>MemoryOutputStream</name>
      <anchor>ab4f570cd78dd7320072243cc752a008a</anchor>
      <arglist>(size_t initialSize=256, size_t granularity=256, MemoryBlock *memoryBlockToWriteTo=0)</arglist>
    </member>
    <member kind="function">
      <name>~MemoryOutputStream</name>
      <anchor>a535d2b68d0309dfdf673618761d0891d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getData</name>
      <anchor>aa0c06c1b9989d33b19261fb747b38d01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDataSize</name>
      <anchor>a44a2520dd26644fa26681666a8f64198</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>a3f1c364b8306c90183a954af072b5492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toUTF8</name>
      <anchor>a2e6a1c1ec17b2ef7952a4457690919a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>flush</name>
      <anchor>a9f055142557e0a5974e938252cb90c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>a75cfaa1821699acb524c14ed327532ad</anchor>
      <arglist>(const void *buffer, int howMany)</arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>a590bfb36b287784157762a38de87a365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>a0e3883e02c73b379239af1cc333f3809</anchor>
      <arglist>(int64 newPosition)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MenuBarComponent</name>
    <base>Component</base>
    <base>MenuBarModelListener</base>
    <base>Timer</base>
    <filename>classMenuBarComponent.html</filename>
    <member kind="function">
      <name>MenuBarComponent</name>
      <anchor>afe767c3daa7001e53350f6b02954ca79</anchor>
      <arglist>(MenuBarModel *model)</arglist>
    </member>
    <member kind="function">
      <name>~MenuBarComponent</name>
      <anchor>a41f0a0bf08a3d837ef5c82e447b3e199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setModel</name>
      <anchor>a3d2c0734ccc73dbb620e3576398aeb2d</anchor>
      <arglist>(MenuBarModel *newModel)</arglist>
    </member>
    <member kind="function">
      <name>showMenu</name>
      <anchor>af24eead5eca57b4f29544c40449a4b8e</anchor>
      <arglist>(int menuIndex)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a6600a045f5498f49d4b792bf6a44b405</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a04b11916a6f802fa44c5bff039d29220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseEnter</name>
      <anchor>ac9fb385b5bb4da628865425da93b2d66</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseExit</name>
      <anchor>a617a6707264ce92ba88f347dfa1efedf</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a4ee001f965de4bc991124c467c19a2bc</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>a52ad34e2acf2d6fc3a0bf7c88dd1e8f7</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>a20446f0d4ea86e898ff99cfe61b9ba1b</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseMove</name>
      <anchor>a4731f938d4fdf8cd204fc4c31c760739</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>inputAttemptWhenModal</name>
      <anchor>acdea6b67679a4de0dd902821ab95fb72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleCommandMessage</name>
      <anchor>a436c107fbe704f6c2cd47a43922306f5</anchor>
      <arglist>(int commandId)</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>a26b27c1eaf5cafe546ed2d4452be2861</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>menuBarItemsChanged</name>
      <anchor>a52a06b67c9621ab6022175c6559962bf</anchor>
      <arglist>(MenuBarModel *menuBarModel)</arglist>
    </member>
    <member kind="function">
      <name>menuCommandInvoked</name>
      <anchor>a41e3e16f13a07b7e12b93126f05276f0</anchor>
      <arglist>(MenuBarModel *menuBarModel, const ApplicationCommandTarget::InvocationInfo &amp;info)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MenuBarModel</name>
    <base>AsyncUpdater</base>
    <base>ApplicationCommandManagerListener</base>
    <filename>classMenuBarModel.html</filename>
    <member kind="function">
      <name>MenuBarModel</name>
      <anchor>afcd69162d7ac0610446ab5ad7f9d8b49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~MenuBarModel</name>
      <anchor>a7f7348e4e1de229386474baf63a6c4d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>menuItemsChanged</name>
      <anchor>aac9cef411b80f8b5ab1dc4572ec90019</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setApplicationCommandManagerToWatch</name>
      <anchor>ab0dcc7d57258ce5281a686b458696df8</anchor>
      <arglist>(ApplicationCommandManager *manager)</arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>a4906a24affc097886fa18d72b651a9a7</anchor>
      <arglist>(MenuBarModelListener *listenerToAdd)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>a23524617b0510e228282d8d0f09221cc</anchor>
      <arglist>(MenuBarModelListener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <name>getMenuBarNames</name>
      <anchor>a520278b157858b1938387e965a95fc94</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getMenuForIndex</name>
      <anchor>aa0fdff8c9a01ee0893fa40e9f1df3f6e</anchor>
      <arglist>(int topLevelMenuIndex, const String &amp;menuName)=0</arglist>
    </member>
    <member kind="function">
      <name>menuItemSelected</name>
      <anchor>aa64b5b9bb4ea4e7bcdc49924659936cc</anchor>
      <arglist>(int menuItemID, int topLevelMenuIndex)=0</arglist>
    </member>
    <member kind="function">
      <name>setMacMainMenu</name>
      <anchor>a50ad56982002c14ff9a4f60d673ff93f</anchor>
      <arglist>(MenuBarModel *newMenuBarModel, const PopupMenu *extraAppleMenuItems=0)</arglist>
    </member>
    <member kind="function">
      <name>getMacMainMenu</name>
      <anchor>a69b8ff2471d5dc4651c31326bdc3ee56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>applicationCommandInvoked</name>
      <anchor>a0fe4486db7cfc54e7188cbe41916ad19</anchor>
      <arglist>(const ApplicationCommandTarget::InvocationInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <name>applicationCommandListChanged</name>
      <anchor>a4c063d32d810e7e843858c8537b2f921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleAsyncUpdate</name>
      <anchor>ae4b769f88e54074dc8e24a533e60dc1c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MenuBarModelListener</name>
    <filename>classMenuBarModelListener.html</filename>
    <member kind="function">
      <name>~MenuBarModelListener</name>
      <anchor>ac789e7ca7aea959a126944cca17609eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>menuBarItemsChanged</name>
      <anchor>a2199fa3367e91e0c911ed9bff6e38bc0</anchor>
      <arglist>(MenuBarModel *menuBarModel)=0</arglist>
    </member>
    <member kind="function">
      <name>menuCommandInvoked</name>
      <anchor>a3472e77b115cba48eefa390ab70ef3e9</anchor>
      <arglist>(MenuBarModel *menuBarModel, const ApplicationCommandTarget::InvocationInfo &amp;info)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Message</name>
    <filename>classMessage.html</filename>
    <member kind="function">
      <name>Message</name>
      <anchor>a4fc4f717b634e66070366cb7722d7761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Message</name>
      <anchor>a4fe5ee1e4e4cb8ea786c09acd622583b</anchor>
      <arglist>(int intParameter1, int intParameter2, int intParameter3, void *pointerParameter)</arglist>
    </member>
    <member kind="function">
      <name>~Message</name>
      <anchor>acee46f6aed7e93e244460565079a5c48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>intParameter1</name>
      <anchor>a6696e349f9421c42f36a0016a8af71db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>intParameter2</name>
      <anchor>a130ebbf02eb17ea11c9fda8e39d1a5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>intParameter3</name>
      <anchor>afc96adcca9057519ab6b81b4da88b8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pointerParameter</name>
      <anchor>a4a7ebfde7b6be9fc951a9fbf61ba232a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageListener</name>
    <filename>classMessageListener.html</filename>
    <member kind="function">
      <name>MessageListener</name>
      <anchor>a1f84a76694e63576a512d75e572675e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~MessageListener</name>
      <anchor>a70778be12f8d64adbb571c610c412021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleMessage</name>
      <anchor>a5174ef8bd8b5faedf4d7b96d1fd8eaf1</anchor>
      <arglist>(const Message &amp;message)=0</arglist>
    </member>
    <member kind="function">
      <name>postMessage</name>
      <anchor>a70b99f10227be91c6768c07c19efec38</anchor>
      <arglist>(Message *message) const </arglist>
    </member>
    <member kind="function">
      <name>isValidMessageListener</name>
      <anchor>af1335a8e6315c4a518fd2d512a038670</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageManager</name>
    <filename>classMessageManager.html</filename>
    <member kind="function">
      <name>~MessageManager</name>
      <anchor>a4b5866d0faa20904470a48a6ba5f6eab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getInstance</name>
      <anchor>aea95a541b6660b7cdcc79b675879f35d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>runDispatchLoop</name>
      <anchor>a3084a3a75717db0f7f05604f2956ff65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stopDispatchLoop</name>
      <anchor>a283b20c2b3786537b31952670d2df7bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasStopMessageBeenSent</name>
      <anchor>a6427ea63705f9389fcbaefa82f5c42d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>runDispatchLoopUntil</name>
      <anchor>a0ddde5289b71c37a3a4a4bb9d673a0de</anchor>
      <arglist>(int millisecondsToRunFor)</arglist>
    </member>
    <member kind="function">
      <name>callFunctionOnMessageThread</name>
      <anchor>a554f81587d57127c9cb5be72aced11c1</anchor>
      <arglist>(MessageCallbackFunction *callback, void *userData)</arglist>
    </member>
    <member kind="function">
      <name>isThisTheMessageThread</name>
      <anchor>ada22ee34e6dc0abdedf739c82887fb68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setCurrentThreadAsMessageThread</name>
      <anchor>af94f78debd3b3d70acade65f50c5058e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCurrentMessageThread</name>
      <anchor>ac9dc1136d201b56f8c937e94b05b5975</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>currentThreadHasLockedMessageManager</name>
      <anchor>a5cfa062f4c751a004ad7f02ccadf85ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>broadcastMessage</name>
      <anchor>a252262c8bfe857ea77fe4e7b4b42ae80</anchor>
      <arglist>(const String &amp;messageText)</arglist>
    </member>
    <member kind="function">
      <name>registerBroadcastListener</name>
      <anchor>ad4ee5d1cae2b55eb45507b491489e5de</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>deregisterBroadcastListener</name>
      <anchor>a5a64dae92820a0ec102294d8ea7aa94f</anchor>
      <arglist>(ActionListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>deliverMessage</name>
      <anchor>a4e2783c94fc0bd00681cc820569014c4</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <name>deliverBroadcastMessage</name>
      <anchor>a869e08aec42d5fed04d5c3c0a437b302</anchor>
      <arglist>(const String &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageManagerLock</name>
    <filename>classMessageManagerLock.html</filename>
    <member kind="function">
      <name>MessageManagerLock</name>
      <anchor>a686a17d53a264a12b11f284537282b5c</anchor>
      <arglist>(Thread *threadToCheckForExitSignal=0)</arglist>
    </member>
    <member kind="function">
      <name>MessageManagerLock</name>
      <anchor>ac6da971e61e376e8216da1f39ccb5582</anchor>
      <arglist>(ThreadPoolJob *jobToCheckForExitSignal)</arglist>
    </member>
    <member kind="function">
      <name>~MessageManagerLock</name>
      <anchor>a28c0cac87a30f5ae285899ff75f4120d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lockWasGained</name>
      <anchor>ab80611ef33bcdf82d64f3e210124fedc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiBuffer</name>
    <filename>classMidiBuffer.html</filename>
    <member kind="function">
      <name>MidiBuffer</name>
      <anchor>aab51b9b3a6ee3f7fe8c65228e042be54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MidiBuffer</name>
      <anchor>a52971dc3459ee8567cc8c35428704144</anchor>
      <arglist>(const MidiMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <name>MidiBuffer</name>
      <anchor>aaeb80e9ef952ee1fcd1b887949c29738</anchor>
      <arglist>(const MidiBuffer &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~MidiBuffer</name>
      <anchor>a169f3e58f12b15d73e1372f549fe6e1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a7428e5f41f82e501d658a2440119e340</anchor>
      <arglist>(const MidiBuffer &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>abfdb42f22f80427f3822b9c01f085cf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>afe195927d727763ad443f213f08975a9</anchor>
      <arglist>(const int start, const int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>a26d400d3cb9722c3122b55daf1337ffd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumEvents</name>
      <anchor>a9714412104c64a2b3c4697f725858ea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>addEvent</name>
      <anchor>a37d68e7e03819dee657b2507d1a1e939</anchor>
      <arglist>(const MidiMessage &amp;midiMessage, const int sampleNumber)</arglist>
    </member>
    <member kind="function">
      <name>addEvent</name>
      <anchor>a090c29933d241f9ea2d3e039b8c85dbd</anchor>
      <arglist>(const uint8 *const rawMidiData, const int maxBytesOfMidiData, const int sampleNumber)</arglist>
    </member>
    <member kind="function">
      <name>addEvents</name>
      <anchor>abb582d92c097c941c4a84a2476406143</anchor>
      <arglist>(const MidiBuffer &amp;otherBuffer, const int startSample, const int numSamples, const int sampleDeltaToAdd)</arglist>
    </member>
    <member kind="function">
      <name>getFirstEventTime</name>
      <anchor>a2efdb2342886642916f414a9d401aef8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLastEventTime</name>
      <anchor>af88f7986666d0412fc829aab6bd3b23a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>swapWith</name>
      <anchor>a701ae6b9ba4adb8e0d4ef84322957d97</anchor>
      <arglist>(MidiBuffer &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>ensureSize</name>
      <anchor>aab971f45d6443204a4ac10fc79439467</anchor>
      <arglist>(size_t minimumNumBytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiBuffer::Iterator</name>
    <filename>classMidiBuffer_1_1Iterator.html</filename>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>a6c629571b73157394618bcf40ed1ae9e</anchor>
      <arglist>(const MidiBuffer &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::~Iterator</name>
      <anchor>a4b2808218770edf9b0ae092b1a2a8ffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::setNextSamplePosition</name>
      <anchor>a510cd29649d8d231081f19c00e897de6</anchor>
      <arglist>(const int samplePosition)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::getNextEvent</name>
      <anchor>a9b60e84b6f2b53d6688cee100d756851</anchor>
      <arglist>(MidiMessage &amp;result, int &amp;samplePosition)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::getNextEvent</name>
      <anchor>a4d1625274ef238011f03284fb6b51dff</anchor>
      <arglist>(const uint8 *&amp;midiData, int &amp;numBytesOfMidiData, int &amp;samplePosition)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiFile</name>
    <filename>classMidiFile.html</filename>
    <member kind="function">
      <name>MidiFile</name>
      <anchor>a989fec6d479c0ebf68ef72224e58e894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~MidiFile</name>
      <anchor>a8d14e6df12f54918a8caf500f03fd78e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumTracks</name>
      <anchor>adb74013941e72218322e721f36fe9081</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTrack</name>
      <anchor>aff8151e3456666605188ab065a7b978c</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>addTrack</name>
      <anchor>a9ff930286a6fa4531df163480b22a313</anchor>
      <arglist>(const MidiMessageSequence &amp;trackSequence)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>ab676af68f56e7cc8b2e0a4afdaf52d20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTimeFormat</name>
      <anchor>a21affa343161faa505ff1222a48efff9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setTicksPerQuarterNote</name>
      <anchor>a22bbe586d1b57e56b9fb0ac740bc928b</anchor>
      <arglist>(const int ticksPerQuarterNote)</arglist>
    </member>
    <member kind="function">
      <name>setSmpteTimeFormat</name>
      <anchor>a9cac433666adbacafcb9a27a754a7d82</anchor>
      <arglist>(const int framesPerSecond, const int subframeResolution)</arglist>
    </member>
    <member kind="function">
      <name>findAllTempoEvents</name>
      <anchor>aab69b7b893078ffe67bc810f2685492d</anchor>
      <arglist>(MidiMessageSequence &amp;tempoChangeEvents) const </arglist>
    </member>
    <member kind="function">
      <name>findAllTimeSigEvents</name>
      <anchor>adc010123e7ae3e80c33645a977fade24</anchor>
      <arglist>(MidiMessageSequence &amp;timeSigEvents) const </arglist>
    </member>
    <member kind="function">
      <name>getLastTimestamp</name>
      <anchor>a122b40184ad0593df7d08e7691a604a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>readFrom</name>
      <anchor>a541d03108b4bcbaf2124eee401b2d92f</anchor>
      <arglist>(InputStream &amp;sourceStream)</arglist>
    </member>
    <member kind="function">
      <name>writeTo</name>
      <anchor>a11f01512fda204cfe2e99cafc0b9179a</anchor>
      <arglist>(OutputStream &amp;destStream)</arglist>
    </member>
    <member kind="function">
      <name>convertTimestampTicksToSeconds</name>
      <anchor>af66c3497ec6109a9c7c1cf1f474c8b95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>compareElements</name>
      <anchor>ade3b632ae1fdf111d190e7f474d8cd79</anchor>
      <arglist>(const MidiMessageSequence::MidiEventHolder *const first, const MidiMessageSequence::MidiEventHolder *const second)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiInput</name>
    <filename>classMidiInput.html</filename>
    <member kind="function">
      <name>~MidiInput</name>
      <anchor>a96b5565483632d06d8fdcc268bbfce79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MidiInput</name>
      <anchor>a309cf3495398ff178358df1f3a7d552e</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <name>getDevices</name>
      <anchor>ad8ec96da9f636c771bce24d2bb63b71a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDefaultDeviceIndex</name>
      <anchor>a2c14fc7803134015ea3718f79d4e2d55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>openDevice</name>
      <anchor>ae7bb7e3f91dfe6bda7bce3e13a3efa8e</anchor>
      <arglist>(int deviceIndex, MidiInputCallback *callback)</arglist>
    </member>
    <member kind="function">
      <name>createNewDevice</name>
      <anchor>af6053fd48f64d92cb2efb54c266d10c5</anchor>
      <arglist>(const String &amp;deviceName, MidiInputCallback *callback)</arglist>
    </member>
    <member kind="function">
      <name>getName</name>
      <anchor>a3ee62b9a443a764c17c59f9f01f201c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setName</name>
      <anchor>a118903d36b5390315a59f9362809fe74</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>acecb4462174423673ffb4b4dfd5b3676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>a5f59f07a81bbc31a4a0fefffc3978d25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>ac6cd3d83df95bc0e07f3a062d42972a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>internal</name>
      <anchor>a2dafd2f0852e544ae9ea2f2a34c90762</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiInputCallback</name>
    <filename>classMidiInputCallback.html</filename>
    <member kind="function">
      <name>~MidiInputCallback</name>
      <anchor>a5636d6d55f23b03b3d443ed42609f566</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleIncomingMidiMessage</name>
      <anchor>acdf6d7e27b96a50fe06922737f0d082e</anchor>
      <arglist>(MidiInput *source, const MidiMessage &amp;message)=0</arglist>
    </member>
    <member kind="function">
      <name>handlePartialSysexMessage</name>
      <anchor>a0c7e16b3fd06deebf7a79ae0ee0eed3f</anchor>
      <arglist>(MidiInput *source, const uint8 *messageData, const int numBytesSoFar, const double timestamp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiKeyboardComponent</name>
    <base>Component</base>
    <base>MidiKeyboardStateListener</base>
    <base>ChangeBroadcaster</base>
    <base>Timer</base>
    <base>AsyncUpdater</base>
    <filename>classMidiKeyboardComponent.html</filename>
    <member kind="function">
      <name>Orientation</name>
      <anchor>a6f6844672df93f8f631fa7e22cf0cdaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>orizontalKeyboard</name>
      <anchor>a6f6844672df93f8f631fa7e22cf0cdafa0b62143bbab080673411400a14d6abd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>erticalKeyboardFacingLeft</name>
      <anchor>a6f6844672df93f8f631fa7e22cf0cdafa9c90bd6998f744646d80f46f7dfa80a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>erticalKeyboardFacingRight</name>
      <anchor>a6f6844672df93f8f631fa7e22cf0cdafae068b9f8ab1fd8850cdd7e3f26f8eb1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a75cb05395efc61c447dc93e8873ab05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>hiteNoteColourId</name>
      <anchor>a75cb05395efc61c447dc93e8873ab05eabb77b95502c3687ed23bcda22e4c416d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lackNoteColourId</name>
      <anchor>a75cb05395efc61c447dc93e8873ab05eadaf19e83bcd2d13a33a2e84d982b3506</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eySeparatorLineColourId</name>
      <anchor>a75cb05395efc61c447dc93e8873ab05ea945be9fe34d15aea642b2ab53e2ac30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ouseOverKeyOverlayColourId</name>
      <anchor>a75cb05395efc61c447dc93e8873ab05ead204f469f2f66e619d2c8778ed83a5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eyDownOverlayColourId</name>
      <anchor>a75cb05395efc61c447dc93e8873ab05eaca2ce853f7e9341311ff237d17f5485f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extLabelColourId</name>
      <anchor>a75cb05395efc61c447dc93e8873ab05ead3e09ed20f7c6c46a687e2c2e4f90fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pDownButtonBackgroundColourId</name>
      <anchor>a75cb05395efc61c447dc93e8873ab05ea613cf60467dce390a9fe44ebed5e69fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pDownButtonArrowColourId</name>
      <anchor>a75cb05395efc61c447dc93e8873ab05ea8d0d8a7ad3b1a2dd479172cad20839a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MidiKeyboardComponent</name>
      <anchor>a8272936e0d5efbd6b756cfb7028597ea</anchor>
      <arglist>(MidiKeyboardState &amp;state, Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <name>~MidiKeyboardComponent</name>
      <anchor>abf2634c9e691e2174f86b77cf9998797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setVelocity</name>
      <anchor>a3e321405b2fa424dfe9679a23408fda3</anchor>
      <arglist>(float velocity, bool useMousePositionForVelocity)</arglist>
    </member>
    <member kind="function">
      <name>setMidiChannel</name>
      <anchor>a65d5ec3c781f5963c7b974c12d6aa8a2</anchor>
      <arglist>(int midiChannelNumber)</arglist>
    </member>
    <member kind="function">
      <name>getMidiChannel</name>
      <anchor>a7e8ba86fb702c5c4bcd2837a7b591472</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setMidiChannelsToDisplay</name>
      <anchor>a7c9b21f928db6a8a72b7e323169bad6b</anchor>
      <arglist>(int midiChannelMask)</arglist>
    </member>
    <member kind="function">
      <name>getMidiChannelsToDisplay</name>
      <anchor>a5aa6fc7ab9e3e06149531d530337c844</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setKeyWidth</name>
      <anchor>a177b5c93b812c35498e6eeeefcb1de16</anchor>
      <arglist>(float widthInPixels)</arglist>
    </member>
    <member kind="function">
      <name>getKeyWidth</name>
      <anchor>aa6dabeee381636d9ac4a6572bf2f84ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setOrientation</name>
      <anchor>a9d57fd0840c352b1db80c258b5d54fdf</anchor>
      <arglist>(Orientation newOrientation)</arglist>
    </member>
    <member kind="function">
      <name>getOrientation</name>
      <anchor>aa77d9aa1b5ed9a1fd8ea12dd5aa9930a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setAvailableRange</name>
      <anchor>a8628c695cf83b8bea146722f653d12d9</anchor>
      <arglist>(int lowestNote, int highestNote)</arglist>
    </member>
    <member kind="function">
      <name>getRangeStart</name>
      <anchor>a5438035d08ceb439080cad9167c7f527</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRangeEnd</name>
      <anchor>abb0418d0a2c41fdfad9041c284e64a04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setLowestVisibleKey</name>
      <anchor>ac9cb4b2afee773e1d29d3a39fb79de8e</anchor>
      <arglist>(int noteNumber)</arglist>
    </member>
    <member kind="function">
      <name>getLowestVisibleKey</name>
      <anchor>ae307ad394c7b8d383f5fe504fda9c3ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBlackNoteLength</name>
      <anchor>ad407ef16bdf30b8f972e3fb99650a11c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setScrollButtonsVisible</name>
      <anchor>a209f55725a073395da946d8cb4652f0d</anchor>
      <arglist>(bool canScroll)</arglist>
    </member>
    <member kind="function">
      <name>getKeyStartPosition</name>
      <anchor>a54acd6b8ddd5354a23944557102c916d</anchor>
      <arglist>(const int midiNoteNumber) const </arglist>
    </member>
    <member kind="function">
      <name>clearKeyMappings</name>
      <anchor>a24880c249ce33326d3bc1636b2b116a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setKeyPressForNote</name>
      <anchor>ac72e50288986458d0f288f723edf9f69</anchor>
      <arglist>(const KeyPress &amp;key, int midiNoteOffsetFromC)</arglist>
    </member>
    <member kind="function">
      <name>removeKeyPressForNote</name>
      <anchor>a142da1db9d85ebdd107986d1725041e6</anchor>
      <arglist>(int midiNoteOffsetFromC)</arglist>
    </member>
    <member kind="function">
      <name>setKeyPressBaseOctave</name>
      <anchor>ad79211e120662c2ce6079e78f724209f</anchor>
      <arglist>(int newOctaveNumber)</arglist>
    </member>
    <member kind="function">
      <name>setOctaveForMiddleC</name>
      <anchor>a0fa0517007dae385e61b92a938e5a030</anchor>
      <arglist>(int octaveNumForMiddleC)</arglist>
    </member>
    <member kind="function">
      <name>getOctaveForMiddleC</name>
      <anchor>a5c7b981757d9c267cba430ba963bdc20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a0d38fe8a5e5a5594e3907fe1789e61a1</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a33e7b19eb98f1f8235a670df0d4fc5dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseMove</name>
      <anchor>ae22eba2a99902782c802363786a45f10</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>ab8609357e62b414986f25f71170736ab</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a057057e2a9e7cb3a7a3e128d52ecea42</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>a9ff7f43c78277b2409f55ee00fbeb110</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseEnter</name>
      <anchor>a83d78f7de3ff68618e923a8229751a79</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseExit</name>
      <anchor>a34a61af0f3ecf9e455b2648524f7dbf4</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseWheelMove</name>
      <anchor>a0f6ecd0fb967788b91275bf9966eaf1a</anchor>
      <arglist>(const MouseEvent &amp;e, float wheelIncrementX, float wheelIncrementY)</arglist>
    </member>
    <member kind="function">
      <name>timerCallback</name>
      <anchor>a989b56c676e3b536353c49f5ceeda894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyStateChanged</name>
      <anchor>a5dd8ebe7b03af18e8a4a32e506ea8814</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function">
      <name>focusLost</name>
      <anchor>a12f7ecd61798533b2fd7522c79b51670</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <name>handleNoteOn</name>
      <anchor>a5522d181345cb0c721479eb0008cb9e5</anchor>
      <arglist>(MidiKeyboardState *source, int midiChannel, int midiNoteNumber, float velocity)</arglist>
    </member>
    <member kind="function">
      <name>handleNoteOff</name>
      <anchor>a3c02fb2cfc0c7944422af5b07454e746</anchor>
      <arglist>(MidiKeyboardState *source, int midiChannel, int midiNoteNumber)</arglist>
    </member>
    <member kind="function">
      <name>handleAsyncUpdate</name>
      <anchor>aaf98a909d011fc9cbfd1298ae4535042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>a671b0fa9103f6b2920bda5b7975a5bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawWhiteNote</name>
      <anchor>a4ea196a5f3da8336e7c7f6b3dbeae3e5</anchor>
      <arglist>(int midiNoteNumber, Graphics &amp;g, int x, int y, int w, int h, bool isDown, bool isOver, const Colour &amp;lineColour, const Colour &amp;textColour)</arglist>
    </member>
    <member kind="function">
      <name>drawBlackNote</name>
      <anchor>a5c8caf074328689d7d8d32885979d2ef</anchor>
      <arglist>(int midiNoteNumber, Graphics &amp;g, int x, int y, int w, int h, bool isDown, bool isOver, const Colour &amp;noteFillColour)</arglist>
    </member>
    <member kind="function">
      <name>getWhiteNoteText</name>
      <anchor>a2fc055c6b99cb19bb3ff2e6ef6f8288f</anchor>
      <arglist>(const int midiNoteNumber)</arglist>
    </member>
    <member kind="function">
      <name>drawUpDownButton</name>
      <anchor>a1bcc397745486d1576b8b1440533cbd5</anchor>
      <arglist>(Graphics &amp;g, int w, int h, const bool isMouseOver, const bool isButtonPressed, const bool movesOctavesUp)</arglist>
    </member>
    <member kind="function">
      <name>mouseDownOnKey</name>
      <anchor>ae89f77de00ce176aa9196009bd58755c</anchor>
      <arglist>(int midiNoteNumber, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDraggedToKey</name>
      <anchor>ad9ca06baaf1f9def867598e0f9ab0fff</anchor>
      <arglist>(int midiNoteNumber, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>getKeyPosition</name>
      <anchor>ad08b809c0e82d9f8de186fa96c72c60d</anchor>
      <arglist>(int midiNoteNumber, float keyWidth, int &amp;x, int &amp;w) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiKeyboardState</name>
    <filename>classMidiKeyboardState.html</filename>
    <member kind="function">
      <name>MidiKeyboardState</name>
      <anchor>a73da349edfd89275f5b26d20c9176238</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~MidiKeyboardState</name>
      <anchor>af2b02fd4e51714be242331000e8f3e11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>a32ba944d0ca8e29347abb96f24e56bf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNoteOn</name>
      <anchor>a584f307ee98c00e882e39c5a5019585a</anchor>
      <arglist>(const int midiChannel, const int midiNoteNumber) const </arglist>
    </member>
    <member kind="function">
      <name>isNoteOnForChannels</name>
      <anchor>a188537edfa01c7862ca0021cf45e30e6</anchor>
      <arglist>(const int midiChannelMask, const int midiNoteNumber) const </arglist>
    </member>
    <member kind="function">
      <name>noteOn</name>
      <anchor>ac78d905fb1e0c50202be1292f2b7817e</anchor>
      <arglist>(const int midiChannel, const int midiNoteNumber, const float velocity)</arglist>
    </member>
    <member kind="function">
      <name>noteOff</name>
      <anchor>a34179c53165151ae8aea7f737bb76300</anchor>
      <arglist>(const int midiChannel, const int midiNoteNumber)</arglist>
    </member>
    <member kind="function">
      <name>allNotesOff</name>
      <anchor>aea27720d3cf3ee2c9c59bc71ab98ad3e</anchor>
      <arglist>(const int midiChannel)</arglist>
    </member>
    <member kind="function">
      <name>processNextMidiEvent</name>
      <anchor>a537775e3c3b13bbd6b3195c928aae5c4</anchor>
      <arglist>(const MidiMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <name>processNextMidiBuffer</name>
      <anchor>a8d296226f97aed61c7d8da8c552692a7</anchor>
      <arglist>(MidiBuffer &amp;buffer, const int startSample, const int numSamples, const bool injectIndirectEvents)</arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>aa096845aeb620c4c8bd76f4cb389b03a</anchor>
      <arglist>(MidiKeyboardStateListener *const listener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>a5e048deb6e9399b9c19745ae1df72e0c</anchor>
      <arglist>(MidiKeyboardStateListener *const listener)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiKeyboardStateListener</name>
    <filename>classMidiKeyboardStateListener.html</filename>
    <member kind="function">
      <name>MidiKeyboardStateListener</name>
      <anchor>a7fc59c5cc25c13e3a50486e16bd0c4a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~MidiKeyboardStateListener</name>
      <anchor>afe4605c8d15e17cf8327078b6bcd2130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleNoteOn</name>
      <anchor>a0f4b54bd89239c0e184f155060a4397a</anchor>
      <arglist>(MidiKeyboardState *source, int midiChannel, int midiNoteNumber, float velocity)=0</arglist>
    </member>
    <member kind="function">
      <name>handleNoteOff</name>
      <anchor>a7af47d0a4de9ee82f545fef3bdfe8094</anchor>
      <arglist>(MidiKeyboardState *source, int midiChannel, int midiNoteNumber)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiMessage</name>
    <filename>classMidiMessage.html</filename>
    <member kind="function">
      <name>SmpteTimecodeType</name>
      <anchor>a0e86db4d1186af858ad9f80d6abe96ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ps24</name>
      <anchor>a0e86db4d1186af858ad9f80d6abe96abade7bcfdca717ecd009d2a10c41e77485</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ps25</name>
      <anchor>a0e86db4d1186af858ad9f80d6abe96abab4a72d4e94a2431828188c3dd05df35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ps30drop</name>
      <anchor>a0e86db4d1186af858ad9f80d6abe96aba16b56e3f81f4265ffc0d553e763f6a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ps30</name>
      <anchor>a0e86db4d1186af858ad9f80d6abe96aba91e489a4210c9f5cbe2a47c4d3e26194</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MidiMachineControlCommand</name>
      <anchor>aa95b060274257522d1af40794ad1631d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mc_stop</name>
      <anchor>aa95b060274257522d1af40794ad1631da155f2d18fc89378f6cc9c4982db67bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mc_play</name>
      <anchor>aa95b060274257522d1af40794ad1631da852c994c93716c792fd33ef2882174bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mc_deferredplay</name>
      <anchor>aa95b060274257522d1af40794ad1631da07a0c0e0cc4d8a4e03b420bcdeb5e555</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mc_fastforward</name>
      <anchor>aa95b060274257522d1af40794ad1631da2d6a145a51bd9090e99040cd90241318</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mc_rewind</name>
      <anchor>aa95b060274257522d1af40794ad1631da8ab7de3ea5e060435d0d420630cdd40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mc_recordStart</name>
      <anchor>aa95b060274257522d1af40794ad1631da4f684774d0aa585b94f9e8aa447ce1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mc_recordStop</name>
      <anchor>aa95b060274257522d1af40794ad1631da2dde82123f4aba81c023d5a07e6732cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mc_pause</name>
      <anchor>aa95b060274257522d1af40794ad1631daea66d5cf7abc74b30cf5d529057ff301</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MidiMessage</name>
      <anchor>a29e4b9d6fc41e8369aa54048b54eac3b</anchor>
      <arglist>(int byte1, int byte2, int byte3, double timeStamp=0)</arglist>
    </member>
    <member kind="function">
      <name>MidiMessage</name>
      <anchor>ad1f62752b5acefd588b92395715547ee</anchor>
      <arglist>(int byte1, int byte2, double timeStamp=0)</arglist>
    </member>
    <member kind="function">
      <name>MidiMessage</name>
      <anchor>a80d5804a025220e67011b7ea00f13772</anchor>
      <arglist>(int byte1, double timeStamp=0)</arglist>
    </member>
    <member kind="function">
      <name>MidiMessage</name>
      <anchor>a6adcb5182a0e1446f5b9d77c9e08c7b3</anchor>
      <arglist>(const void *data, int numBytes, double timeStamp=0)</arglist>
    </member>
    <member kind="function">
      <name>MidiMessage</name>
      <anchor>a93361ca01f624ea67769474d15cceca9</anchor>
      <arglist>(const void *data, int maxBytesToUse, int &amp;numBytesUsed, uint8 lastStatusByte, double timeStamp=0)</arglist>
    </member>
    <member kind="function">
      <name>MidiMessage</name>
      <anchor>a9e2108bbef1d0d22a6c3b7f85d765b36</anchor>
      <arglist>(const MidiMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>MidiMessage</name>
      <anchor>a514b3e4c76271d34c74fd83e9e82f1a2</anchor>
      <arglist>(const MidiMessage &amp;other, double newTimeStamp)</arglist>
    </member>
    <member kind="function">
      <name>~MidiMessage</name>
      <anchor>a483a17987c54fd61b1e4d74fd8564357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a3ae9ac3c147ca7a1f66f15905e37412a</anchor>
      <arglist>(const MidiMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>getRawData</name>
      <anchor>a066a25af01955f2df9bc1cb8db65ff07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRawDataSize</name>
      <anchor>ab57d9b4130f919a999f72a76f752e627</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTimeStamp</name>
      <anchor>afbb49d5de60ca9ff39482a97e88d7268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setTimeStamp</name>
      <anchor>ab2fdbfa687e99448d3beab7fd867bc3e</anchor>
      <arglist>(double newTimestamp)</arglist>
    </member>
    <member kind="function">
      <name>addToTimeStamp</name>
      <anchor>a0f0c621098e364a933d39327e26585d4</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <name>getChannel</name>
      <anchor>abd8f82d8999418c35f2dc80f2d76f086</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isForChannel</name>
      <anchor>a0ca7a2986e61a9fc703c21e277f4e634</anchor>
      <arglist>(int channelNumber) const </arglist>
    </member>
    <member kind="function">
      <name>setChannel</name>
      <anchor>a14f75ad071142fd331b2ad1b302a63a4</anchor>
      <arglist>(int newChannelNumber)</arglist>
    </member>
    <member kind="function">
      <name>isSysEx</name>
      <anchor>aa9a5ebc46539f16c06d97deb6b1efc6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSysExData</name>
      <anchor>a638c93fd93e920db0bbf33188dd56e06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSysExDataSize</name>
      <anchor>a93a52340869c7eef6f45461030a8665e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isNoteOn</name>
      <anchor>a02e0e7f4c73d58d362d51bb89c817ca6</anchor>
      <arglist>(bool returnTrueForVelocity0=false) const </arglist>
    </member>
    <member kind="function">
      <name>noteOn</name>
      <anchor>a2965212e3a7320cf40f3725e06e7c298</anchor>
      <arglist>(int channel, int noteNumber, float velocity)</arglist>
    </member>
    <member kind="function">
      <name>noteOn</name>
      <anchor>a2e114868c0a8c3d3e4070ea8a107dd66</anchor>
      <arglist>(int channel, int noteNumber, uint8 velocity)</arglist>
    </member>
    <member kind="function">
      <name>isNoteOff</name>
      <anchor>a0f4cfe671ef8c058072193d66a59f472</anchor>
      <arglist>(bool returnTrueForNoteOnVelocity0=true) const </arglist>
    </member>
    <member kind="function">
      <name>noteOff</name>
      <anchor>a8529cc2ca43a7b3cc8785d6014981739</anchor>
      <arglist>(int channel, int noteNumber)</arglist>
    </member>
    <member kind="function">
      <name>isNoteOnOrOff</name>
      <anchor>af6ab4d526d05b5c174c2f41d59db9b94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNoteNumber</name>
      <anchor>aaa1abb63bf72e03e5c6e675cdc861cc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setNoteNumber</name>
      <anchor>a93b4cf268e850342e105b7c41a46fe88</anchor>
      <arglist>(int newNoteNumber)</arglist>
    </member>
    <member kind="function">
      <name>getVelocity</name>
      <anchor>a3c5a0ea182063aebe74619301c0083e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFloatVelocity</name>
      <anchor>ac378ba932ec0102797779d4bfa4c769a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setVelocity</name>
      <anchor>ac934007013fcbc45de48d261b4505481</anchor>
      <arglist>(float newVelocity)</arglist>
    </member>
    <member kind="function">
      <name>multiplyVelocity</name>
      <anchor>a050da253d1622cf22003133931110591</anchor>
      <arglist>(float scaleFactor)</arglist>
    </member>
    <member kind="function">
      <name>isProgramChange</name>
      <anchor>a794a42a677ebf70a9692163f3922542a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getProgramChangeNumber</name>
      <anchor>afb4a763375ee0fd01c1048e58fd4ca58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>programChange</name>
      <anchor>a0159886a2ec21a3fdfb77c42f7e8c10e</anchor>
      <arglist>(int channel, int programNumber)</arglist>
    </member>
    <member kind="function">
      <name>isPitchWheel</name>
      <anchor>a99f76936aae9c34088be6edb4052f79e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getPitchWheelValue</name>
      <anchor>aeaf4db111b0033204d0d9959639d9807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>pitchWheel</name>
      <anchor>a769bf92d2f789c02e5c7d5651e04878f</anchor>
      <arglist>(int channel, int position)</arglist>
    </member>
    <member kind="function">
      <name>isAftertouch</name>
      <anchor>a5b3fbca87e2fb100cf7acff0890f857b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAfterTouchValue</name>
      <anchor>a26987e7715148e764c823e5f7d39f50f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>aftertouchChange</name>
      <anchor>ad4f2b0193b202f6f062b0c8d7c65d76e</anchor>
      <arglist>(int channel, int noteNumber, int aftertouchAmount)</arglist>
    </member>
    <member kind="function">
      <name>isChannelPressure</name>
      <anchor>a3690b49c911e81b491b701db03999c63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getChannelPressureValue</name>
      <anchor>a945f8efbfbcf055cdd651085e32cbfe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>channelPressureChange</name>
      <anchor>abc64c31b1086d50d8b307c4c291ed34e</anchor>
      <arglist>(int channel, int pressure)</arglist>
    </member>
    <member kind="function">
      <name>isController</name>
      <anchor>a296b3ba7a37b98704e3c71c9b0a57461</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getControllerNumber</name>
      <anchor>aef6d0e9ff6ff330b6b08c8948edc0c56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getControllerValue</name>
      <anchor>aea957153626d3dd1297eb30b8188f548</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>controllerEvent</name>
      <anchor>acf99c7549e8414bb3aac073bb0a186c0</anchor>
      <arglist>(int channel, int controllerType, int value)</arglist>
    </member>
    <member kind="function">
      <name>isAllNotesOff</name>
      <anchor>af260bc976f82b85b11f9a9e59b25de8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isAllSoundOff</name>
      <anchor>a6c8d84412e7e904a61c1cc2bbec7745e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>allNotesOff</name>
      <anchor>a3ae444ee401d9e601a16a4022f1d516f</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function">
      <name>allSoundOff</name>
      <anchor>a5c2c484130eb98ab60940af701ad6d10</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function">
      <name>allControllersOff</name>
      <anchor>abc89005f04cb3c9b2c6e4e9b4af6d9ed</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function">
      <name>isMetaEvent</name>
      <anchor>ab0061b1374359dd2cd0e1689a237c5ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMetaEventType</name>
      <anchor>a83c60844a534199bb4e88d92b578286c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMetaEventData</name>
      <anchor>ace9370ea0f0b13ebec09fb561031385b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMetaEventLength</name>
      <anchor>a5ebc90ca8a633f9b4477a9c8941f1177</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isTrackMetaEvent</name>
      <anchor>a7e6f419707b94f468896519aca8b419b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isEndOfTrackMetaEvent</name>
      <anchor>a5438ac8093ea89d273f32248a7afaefc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>endOfTrack</name>
      <anchor>a6df0e478d7e673ae3be0b6d5c73683d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isTrackNameEvent</name>
      <anchor>a1ed6725593aa3493c728f70d621a24eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isTextMetaEvent</name>
      <anchor>a15e013e26b5706d8dafb09938ba2b053</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTextFromTextMetaEvent</name>
      <anchor>aed16f016363804125a50c371797ce4a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isTempoMetaEvent</name>
      <anchor>aac3a10d1ff7c03a1a6de9ccf711e99ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTempoMetaEventTickLength</name>
      <anchor>a2e342195954c05b9cc7a5d660ba04c39</anchor>
      <arglist>(short timeFormat) const </arglist>
    </member>
    <member kind="function">
      <name>getTempoSecondsPerQuarterNote</name>
      <anchor>a6f90eb14f38dec50c696fa45cc875e53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>tempoMetaEvent</name>
      <anchor>a22b0bebbf23070c9f7df6727f04cabcd</anchor>
      <arglist>(int microsecondsPerQuarterNote)</arglist>
    </member>
    <member kind="function">
      <name>isTimeSignatureMetaEvent</name>
      <anchor>ab40f2a60e8be12726fe379c71abc60ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTimeSignatureInfo</name>
      <anchor>aea8fbe1842568c641f879d0224125989</anchor>
      <arglist>(int &amp;numerator, int &amp;denominator) const </arglist>
    </member>
    <member kind="function">
      <name>timeSignatureMetaEvent</name>
      <anchor>ad748f306fee21c8433abaf4aff9fa48e</anchor>
      <arglist>(int numerator, int denominator)</arglist>
    </member>
    <member kind="function">
      <name>isKeySignatureMetaEvent</name>
      <anchor>a38be9c4a34dd87b7eb2c0f8566ce3ee4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getKeySignatureNumberOfSharpsOrFlats</name>
      <anchor>a281d925b53b9330048ba1000db0c1bfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isMidiChannelMetaEvent</name>
      <anchor>ae2e34b25480f1de1b2aee1a1b26ba75d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMidiChannelMetaEventChannel</name>
      <anchor>a36296245e11062b900bf45526136a921</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>midiChannelMetaEvent</name>
      <anchor>a815f33bd6f27ad5e4d1ab82a049a595a</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function">
      <name>isActiveSense</name>
      <anchor>a9e9189f018b468e6f9012120ecd228d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isMidiStart</name>
      <anchor>afd4ee58faa33d3a84c24a70b5e2b9731</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>midiStart</name>
      <anchor>ad1968ba3d110a7a00a9de2f818fb1a3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isMidiContinue</name>
      <anchor>ad12c7fe997801eface870ebac8cb801e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>midiContinue</name>
      <anchor>a653d99b6aa4d629b952bb15e9eb404f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isMidiStop</name>
      <anchor>a76f3a8e149963acfae4d8555eeb5b34c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>midiStop</name>
      <anchor>a10c41d6dfd53a7e0c9d93d15ad1f749e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isMidiClock</name>
      <anchor>a731e2b56029c198eaf6cf6586c8103b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>midiClock</name>
      <anchor>a71da71f6d6d51ee5240c5751771c3e6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSongPositionPointer</name>
      <anchor>ab6cdb78def38034514a05dbc3c26f8f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSongPositionPointerMidiBeat</name>
      <anchor>abb359e31611b2569f0b3873539923e71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>songPositionPointer</name>
      <anchor>a8c7f983ebfc370b7beab90eab45db21d</anchor>
      <arglist>(int positionInMidiBeats)</arglist>
    </member>
    <member kind="function">
      <name>isQuarterFrame</name>
      <anchor>a45df208d56c2695bd6232aefa6f60da9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getQuarterFrameSequenceNumber</name>
      <anchor>a2077429b8499dc2111e1b81fab2a3409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getQuarterFrameValue</name>
      <anchor>a8f24e900423b725025e0c79edb690d94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>quarterFrame</name>
      <anchor>a7b052711b746cf1dcbd47dc7a341b02c</anchor>
      <arglist>(int sequenceNumber, int value)</arglist>
    </member>
    <member kind="function">
      <name>isFullFrame</name>
      <anchor>a02a375899dd44dabe563caca5a7f9b87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFullFrameParameters</name>
      <anchor>af1d64e91b650507db24732f152413cc3</anchor>
      <arglist>(int &amp;hours, int &amp;minutes, int &amp;seconds, int &amp;frames, SmpteTimecodeType &amp;timecodeType) const </arglist>
    </member>
    <member kind="function">
      <name>fullFrame</name>
      <anchor>a5ff2ccceea6c482a8b23a4736632922a</anchor>
      <arglist>(int hours, int minutes, int seconds, int frames, SmpteTimecodeType timecodeType)</arglist>
    </member>
    <member kind="function">
      <name>isMidiMachineControlMessage</name>
      <anchor>a3c31c9273facc2635b94e60ea19bb376</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMidiMachineControlCommand</name>
      <anchor>a8467845204f0c921ab2829415e502c9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>midiMachineControlCommand</name>
      <anchor>a5116c04b73016a0393c0d871fc989bbe</anchor>
      <arglist>(MidiMachineControlCommand command)</arglist>
    </member>
    <member kind="function">
      <name>isMidiMachineControlGoto</name>
      <anchor>afc1da142a549694cb46ecd4fd0385442</anchor>
      <arglist>(int &amp;hours, int &amp;minutes, int &amp;seconds, int &amp;frames) const </arglist>
    </member>
    <member kind="function">
      <name>midiMachineControlGoto</name>
      <anchor>a6157076d58196ac2d1d115b1ded01032</anchor>
      <arglist>(int hours, int minutes, int seconds, int frames)</arglist>
    </member>
    <member kind="function">
      <name>masterVolume</name>
      <anchor>ad5d39805c6de446536f0dc9ccf019183</anchor>
      <arglist>(float volume)</arglist>
    </member>
    <member kind="function">
      <name>createSysExMessage</name>
      <anchor>a60bc7dd5f79631b38d116b76dd3eea82</anchor>
      <arglist>(const uint8 *sysexData, int dataSize)</arglist>
    </member>
    <member kind="function">
      <name>readVariableLengthVal</name>
      <anchor>af7c6eff849a1c0c86e49714223902935</anchor>
      <arglist>(const uint8 *data, int &amp;numBytesUsed)</arglist>
    </member>
    <member kind="function">
      <name>getMessageLengthFromFirstByte</name>
      <anchor>af206a5cc31be7b99ae3a8cf8f00260b5</anchor>
      <arglist>(const uint8 firstByte)</arglist>
    </member>
    <member kind="function">
      <name>getMidiNoteName</name>
      <anchor>a2abf19a36742927e0c22c85bef4a6fbb</anchor>
      <arglist>(int noteNumber, bool useSharps, bool includeOctaveNumber, int octaveNumForMiddleC)</arglist>
    </member>
    <member kind="function">
      <name>getMidiNoteInHertz</name>
      <anchor>aa4a9067727a9f3eb4eb50906928ca96c</anchor>
      <arglist>(int noteNumber)</arglist>
    </member>
    <member kind="function">
      <name>getGMInstrumentName</name>
      <anchor>a2b9d0a063e8c4ce7beb7e1978de70a3f</anchor>
      <arglist>(int midiInstrumentNumber)</arglist>
    </member>
    <member kind="function">
      <name>getGMInstrumentBankName</name>
      <anchor>ad11b7a31e814462005cb853ce3b38e14</anchor>
      <arglist>(int midiBankNumber)</arglist>
    </member>
    <member kind="function">
      <name>getRhythmInstrumentName</name>
      <anchor>a968491afa13d768861c998b35a5de640</anchor>
      <arglist>(int midiNoteNumber)</arglist>
    </member>
    <member kind="function">
      <name>getControllerName</name>
      <anchor>a669930e48aeb6da7d9c9578936a2f639</anchor>
      <arglist>(int controllerNumber)</arglist>
    </member>
    <member kind="function">
      <name>asBytes</name>
      <anchor>ae9d650bc0649c1da4e173d4b5e11368d</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="function">
      <name>asInt32</name>
      <anchor>a2f70ca23d8e3d061070b42abd4c0ee0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiMessageCollector</name>
    <base>MidiKeyboardStateListener</base>
    <base>MidiInputCallback</base>
    <filename>classMidiMessageCollector.html</filename>
    <member kind="function">
      <name>MidiMessageCollector</name>
      <anchor>a81989229e6c29b6f3835a961195278d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~MidiMessageCollector</name>
      <anchor>a2a3b28e921806211ad3d0109f09fd8a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>ab9f16c8ff3d5d1b45ec409a6fb297b51</anchor>
      <arglist>(double sampleRate)</arglist>
    </member>
    <member kind="function">
      <name>addMessageToQueue</name>
      <anchor>ad1d42045ccbc9bbc4256d08a632a8fe2</anchor>
      <arglist>(const MidiMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <name>removeNextBlockOfMessages</name>
      <anchor>ac72b6cf4965e63b90d1a2402b73b1798</anchor>
      <arglist>(MidiBuffer &amp;destBuffer, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>handleNoteOn</name>
      <anchor>a6a3f7ed60eaf1a05335d1284afa34713</anchor>
      <arglist>(MidiKeyboardState *source, int midiChannel, int midiNoteNumber, float velocity)</arglist>
    </member>
    <member kind="function">
      <name>handleNoteOff</name>
      <anchor>af954c579fd0f0b7487d8cf1e91478b8c</anchor>
      <arglist>(MidiKeyboardState *source, int midiChannel, int midiNoteNumber)</arglist>
    </member>
    <member kind="function">
      <name>handleIncomingMidiMessage</name>
      <anchor>ada171e18b04834d1ec4ce61d99a8ceea</anchor>
      <arglist>(MidiInput *source, const MidiMessage &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiMessageSequence</name>
    <filename>classMidiMessageSequence.html</filename>
    <member kind="function">
      <name>MidiMessageSequence</name>
      <anchor>a29929e2219c0e52cc7da1d0d9cef2c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MidiMessageSequence</name>
      <anchor>af2e3263d3feb5d6108038a31438e7ff7</anchor>
      <arglist>(const MidiMessageSequence &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~MidiMessageSequence</name>
      <anchor>a072fd14cf8b73d09cdb54373f74f294a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a2af719316dd49b52c772d574ef4932dc</anchor>
      <arglist>(const MidiMessageSequence &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a9bf65342afa0261969d2d55834798763</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumEvents</name>
      <anchor>ad127ce46ad9f2729ac65be6122413613</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getEventPointer</name>
      <anchor>a5daa49759026952c73df867b75f9696e</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getTimeOfMatchingKeyUp</name>
      <anchor>a807f23052e3ea93c614aebcbf9ee25d0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getIndexOfMatchingKeyUp</name>
      <anchor>af8769441eb34e726e74619fd4c5a6e56</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getIndexOf</name>
      <anchor>a89598c42957bfc28fdb23f6fcb923e40</anchor>
      <arglist>(MidiEventHolder *event) const </arglist>
    </member>
    <member kind="function">
      <name>getNextIndexAtTime</name>
      <anchor>a032d8eeebcfbec3a364a6c594e465110</anchor>
      <arglist>(double timeStamp) const </arglist>
    </member>
    <member kind="function">
      <name>getStartTime</name>
      <anchor>a41860f8baaa3bac06aea74c9f66ba2d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getEndTime</name>
      <anchor>a9d431f06444ae322df2556c89f4ddb9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getEventTime</name>
      <anchor>a1d40da64c5a9fd61c7350346ca8c8144</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>addEvent</name>
      <anchor>af9e3703649aad8017926c32b64eb6c3d</anchor>
      <arglist>(const MidiMessage &amp;newMessage, double timeAdjustment=0)</arglist>
    </member>
    <member kind="function">
      <name>deleteEvent</name>
      <anchor>a67b6db1465ea07fb7493909409d89a44</anchor>
      <arglist>(int index, bool deleteMatchingNoteUp)</arglist>
    </member>
    <member kind="function">
      <name>addSequence</name>
      <anchor>a287c649d4618e657fe2fe3c54d16473a</anchor>
      <arglist>(const MidiMessageSequence &amp;other, double timeAdjustmentDelta, double firstAllowableDestTime, double endOfAllowableDestTimes)</arglist>
    </member>
    <member kind="function">
      <name>updateMatchedPairs</name>
      <anchor>a00ec5acfb0da6ce7cf402163f634ac54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>extractMidiChannelMessages</name>
      <anchor>aef3f5fde8115f9fd4b46603f54076038</anchor>
      <arglist>(int channelNumberToExtract, MidiMessageSequence &amp;destSequence, bool alsoIncludeMetaEvents) const </arglist>
    </member>
    <member kind="function">
      <name>extractSysExMessages</name>
      <anchor>abf6f7bd5e449976caf1541a880d185b0</anchor>
      <arglist>(MidiMessageSequence &amp;destSequence) const </arglist>
    </member>
    <member kind="function">
      <name>deleteMidiChannelMessages</name>
      <anchor>a47466395fc2296b724defd56076cd5ed</anchor>
      <arglist>(int channelNumberToRemove)</arglist>
    </member>
    <member kind="function">
      <name>deleteSysExMessages</name>
      <anchor>a9654788bd88928d6853d260d4e323e01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addTimeToMessages</name>
      <anchor>a699a94796541c3935c40c93e11e29f6a</anchor>
      <arglist>(double deltaTime)</arglist>
    </member>
    <member kind="function">
      <name>createControllerUpdatesForTime</name>
      <anchor>a29ab386ec48fe06f957711a3e59f9675</anchor>
      <arglist>(int channelNumber, double time, OwnedArray&lt; MidiMessage &gt; &amp;resultMessages)</arglist>
    </member>
    <member kind="function">
      <name>swapWith</name>
      <anchor>a9b48c7ba8e594ea2eca6c96e2d2ab44f</anchor>
      <arglist>(MidiMessageSequence &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>compareElements</name>
      <anchor>a4917a909d17324273678146afd2c629c</anchor>
      <arglist>(const MidiMessageSequence::MidiEventHolder *first, const MidiMessageSequence::MidiEventHolder *second)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiMessageSequence::MidiEventHolder</name>
    <filename>classMidiMessageSequence_1_1MidiEventHolder.html</filename>
    <member kind="function">
      <name>MidiEventHolder::~MidiEventHolder</name>
      <anchor>acd4dbc9ad72a8c2d114a4e3488d103a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MidiEventHolder::message</name>
      <anchor>a4d9cf307bd15a6abb4e98cfe03f8f580</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MidiEventHolder::noteOffObject</name>
      <anchor>abd0fc0f7b71616c7a9f6f70b2a499de5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiOutput</name>
    <base>Thread</base>
    <filename>classMidiOutput.html</filename>
    <member kind="function">
      <name>~MidiOutput</name>
      <anchor>a16d9a275e984ebaa7e87f56234d0d9fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MidiOutput</name>
      <anchor>ac16764b0d7153689f406d2d38cf332b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDevices</name>
      <anchor>a41b3fdfcc31123ecd10f857452efcf5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDefaultDeviceIndex</name>
      <anchor>a5459a18d9b1b9a5fe27e95e6e9e06a87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>openDevice</name>
      <anchor>add5366efd74e5c5ee665af4592c6b15e</anchor>
      <arglist>(int deviceIndex)</arglist>
    </member>
    <member kind="function">
      <name>createNewDevice</name>
      <anchor>a04169caa4a0c533c57a55357f2e13cc8</anchor>
      <arglist>(const String &amp;deviceName)</arglist>
    </member>
    <member kind="function">
      <name>sendMessageNow</name>
      <anchor>ac2f80c5930a244636efad59e6ba0f7b5</anchor>
      <arglist>(const MidiMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>aabdfe94e0d911dfd29008abdf026898a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getVolume</name>
      <anchor>ad4d16254006d1f10dc42b46944cb4615</anchor>
      <arglist>(float &amp;leftVol, float &amp;rightVol)</arglist>
    </member>
    <member kind="function">
      <name>setVolume</name>
      <anchor>a012459c3e2243103fae42c77b5a645a2</anchor>
      <arglist>(float leftVol, float rightVol)</arglist>
    </member>
    <member kind="function">
      <name>sendBlockOfMessages</name>
      <anchor>a023c7c703b5231048767a2ab1d24193d</anchor>
      <arglist>(const MidiBuffer &amp;buffer, double millisecondCounterToStartAt, double samplesPerSecondForBuffer)</arglist>
    </member>
    <member kind="function">
      <name>clearAllPendingMessages</name>
      <anchor>a964ebc950ee7c10f4f024f29a75ef1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startBackgroundThread</name>
      <anchor>aa8313c8ebdfc4c8425c7919643ce0085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stopBackgroundThread</name>
      <anchor>adc5bad6deaa1df0c842155990434f68b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>run</name>
      <anchor>ad11ece96fe621b940d02aaa39cd74095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>internal</name>
      <anchor>a0910f2de4bc5576874b5c6716d336c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lock</name>
      <anchor>af0ebae21888c365aa2fadc2aa8eb27c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>firstMessage</name>
      <anchor>aafd2e65a8fcdc67749eca25f63c0883c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MixerAudioSource</name>
    <base>AudioSource</base>
    <filename>classMixerAudioSource.html</filename>
    <member kind="function">
      <name>MixerAudioSource</name>
      <anchor>aaca222da99166a5eaf439bdfd338dfca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~MixerAudioSource</name>
      <anchor>acecfacbc1ce17d659e96ae4c39ac6f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addInputSource</name>
      <anchor>ab65815ce98a0fcbf27f634ff848d35f3</anchor>
      <arglist>(AudioSource *newInput, const bool deleteWhenRemoved)</arglist>
    </member>
    <member kind="function">
      <name>removeInputSource</name>
      <anchor>abe27f0f0eafdff1f1b82ba2a0438c06e</anchor>
      <arglist>(AudioSource *input, const bool deleteSource)</arglist>
    </member>
    <member kind="function">
      <name>removeAllInputs</name>
      <anchor>ac2a2baaa8b0e941ae8ffe55d37cea176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prepareToPlay</name>
      <anchor>a454858132e7f87c842c01363951c0345</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <name>releaseResources</name>
      <anchor>af8eda7ec97cfaf49589b7b1ec231c697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNextAudioBlock</name>
      <anchor>a8e8c513e0669d92f7e42e470f0502609</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModifierKeys</name>
    <filename>classModifierKeys.html</filename>
    <member kind="function">
      <name>Flags</name>
      <anchor>acdd2a85defa6a705d74e1a63d193678b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>hiftModifier</name>
      <anchor>acdd2a85defa6a705d74e1a63d193678baafc1c1b745213b6915f1932ecf0ea042</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>trlModifier</name>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba1328b9c57c54ec51dbbfacb537cc737b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ltModifier</name>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba06a1a39ebe788d01c5d421f8f472347d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eftButtonModifier</name>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba0248a87157fdf267a857b723d30f5c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightButtonModifier</name>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba4676310fa50ddb14bb81722e1dd3bdd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>iddleButtonModifier</name>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba332cb354a7b1cb322e97c6678d94ee22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ommandModifier</name>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba5e28f0dd247a86d9a21bdcabd644d058</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>opupMenuClickModifier</name>
      <anchor>acdd2a85defa6a705d74e1a63d193678ba95a2100e9a4b1a5786b253c065936627</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>llKeyboardModifiers</name>
      <anchor>acdd2a85defa6a705d74e1a63d193678bad234b97b656e78e1b0c500bff2618126</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>llMouseButtonModifiers</name>
      <anchor>acdd2a85defa6a705d74e1a63d193678bac6eb27985ac385d33aa8c8ea9a261dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ModifierKeys</name>
      <anchor>a4c843b22ebd38dac204364a867c992e4</anchor>
      <arglist>(int flags=0)</arglist>
    </member>
    <member kind="function">
      <name>ModifierKeys</name>
      <anchor>ab3a26a4e66bdfa0b7af246f6cf6ad099</anchor>
      <arglist>(const ModifierKeys &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a7509b920ff2a7fa95c7cbeb106dba591</anchor>
      <arglist>(const ModifierKeys &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>isCommandDown</name>
      <anchor>a543596ad8761b23cd0761ce5831c66a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isPopupMenu</name>
      <anchor>ae7a5360a2b5c599e4dea947a4f005057</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isLeftButtonDown</name>
      <anchor>a3c1de397ad18dea2525604574805cc17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isRightButtonDown</name>
      <anchor>a6b79a9ff621e96ff875b217f7c699f64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isMiddleButtonDown</name>
      <anchor>a27b289dd4735279848008eb9f67967d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isAnyMouseButtonDown</name>
      <anchor>a4f9ef77dfca05d5baefdbd577e4b9f01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isAnyModifierKeyDown</name>
      <anchor>a6a793636a357386e6af1f463a4a5598f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isShiftDown</name>
      <anchor>a46b5af205e41df86664d27bfb94f415c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isCtrlDown</name>
      <anchor>a38263597113b84b86ff944f01d529143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isAltDown</name>
      <anchor>a07e1979eabecc2eb2b2832fc6a5b98bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>withOnlyMouseButtons</name>
      <anchor>a51eddafde667b743e5e01ed590c73252</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>withoutMouseButtons</name>
      <anchor>a871ccbd7197a14c496816dee62706e13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>acc404a8a502a94cc46739b473602a50e</anchor>
      <arglist>(const ModifierKeys &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a9b9cd5b378fd9b8946117abc9cd10b4f</anchor>
      <arglist>(const ModifierKeys &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>getRawFlags</name>
      <anchor>a7922e200e5b06087ea26fae53c13ab99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>withoutFlags</name>
      <anchor>a5d7e1e5d1a85fae177a9ed45abb123c6</anchor>
      <arglist>(int rawFlagsToClear) const </arglist>
    </member>
    <member kind="function">
      <name>withFlags</name>
      <anchor>ac329a1cd2b81f035bc7edc37ef5c42cf</anchor>
      <arglist>(int rawFlagsToSet) const </arglist>
    </member>
    <member kind="function">
      <name>testFlags</name>
      <anchor>a02377b156d3ab939701a73ba8df7cbb9</anchor>
      <arglist>(const int flagsToTest) const </arglist>
    </member>
    <member kind="function">
      <name>getNumMouseButtonsDown</name>
      <anchor>a763c707a5d549eeaa49abc98b91946e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentModifiers</name>
      <anchor>adec2dbb2e303985024e03abf17b7425d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCurrentModifiersRealtime</name>
      <anchor>ad55521bd431ce7341be9ca90982cc764</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseCursor</name>
    <filename>classMouseCursor.html</filename>
    <member kind="function">
      <name>StandardCursorType</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a765994c253a794c44b2a919f39738917</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ormalCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97aa05a8960e2a3e32bfad68fdcb31a1511</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>aitCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a42461326b47b05238177df410c2245f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BeamCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97ab6611ff9b703b9a53c45745936c66393</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rosshairCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97add4ed956814986c922cdeae70fdad9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>opyingCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97abe0154531e3b7b07ea1241be32850c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ointingHandCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a8d9a75ed7f8d15943c53fe50d584c250</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>raggingHandCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a95198e14e2dede840964e9bd4c785770</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eftRightResizeCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a17de630b8e7ac48222b7d4a47e80bbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pDownResizeCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a74809dadde8902b777944cf0f9bf1eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pDownLeftRightResizeCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a70324887aed0e0010031ef5eeea795f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>opEdgeResizeCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a715ab886dadb13d14a738c2b2709c118</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ottomEdgeResizeCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97ad5aac7a930b9b99cbd426166e9f51060</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eftEdgeResizeCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a5c9f991872485b4ffc337a7f8d61df34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightEdgeResizeCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a9c5b17c307e6d6d996f09621940cabd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>opLeftCornerResizeCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97aa0d19a1c9571c4e7ecced0c47c3227e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>opRightCornerResizeCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a675f05cc9819fc54c59ec30a59454321</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ottomLeftCornerResizeCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97a9c0dfbb89b147f494350fd8b21558d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ottomRightCornerResizeCursor</name>
      <anchor>a5de22a8c3eb06827ac11352e76eb9a97aa1bc9fcfb9b9e0f39e513ca1fcb8392b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MouseCursor</name>
      <anchor>ae117c650dd31b67b0a0530c6a9299782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MouseCursor</name>
      <anchor>adf26703e6d1e9a26fd7cc2d745f67d73</anchor>
      <arglist>(StandardCursorType type)</arglist>
    </member>
    <member kind="function">
      <name>MouseCursor</name>
      <anchor>ab5a0c9110724b59af28e8c2cbb888b5a</anchor>
      <arglist>(const Image &amp;image, int hotSpotX, int hotSpotY)</arglist>
    </member>
    <member kind="function">
      <name>MouseCursor</name>
      <anchor>aac0e05bc1aa9304ec96f7b19acfcae7b</anchor>
      <arglist>(const MouseCursor &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~MouseCursor</name>
      <anchor>a7ceae294b75ec60291604f81efd1509d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a74fd0a90bf6e742c58fbbd51a04ea8d7</anchor>
      <arglist>(const MouseCursor &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a6caec68457a7b9786c82f5e56bc11bed</anchor>
      <arglist>(const MouseCursor &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a7269f5a2eb2a59e30e3b6f810c121406</anchor>
      <arglist>(const MouseCursor &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>showWaitCursor</name>
      <anchor>a29d3a192ded584323597869f975faab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hideWaitCursor</name>
      <anchor>a4671d39f6abcc1ca73fd8d95cf1e4355</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseEvent</name>
    <filename>classMouseEvent.html</filename>
    <member kind="function">
      <name>MouseEvent</name>
      <anchor>ae1ba99a43188d2f2bd61e04ea2f3736d</anchor>
      <arglist>(MouseInputSource &amp;source, const Point&lt; int &gt; &amp;position, const ModifierKeys &amp;modifiers, Component *originator, const Time &amp;eventTime, const Point&lt; int &gt; mouseDownPos, const Time &amp;mouseDownTime, int numberOfClicks, bool mouseWasDragged)</arglist>
    </member>
    <member kind="function">
      <name>~MouseEvent</name>
      <anchor>a964b5fc17ddbe6c98884c375d8f982b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getMouseDownX</name>
      <anchor>a0c9e48dffe627a0f06d2a9111cfb6315</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMouseDownY</name>
      <anchor>a385f4f870f91fa3f7d3fef7ebec648fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMouseDownPosition</name>
      <anchor>af0ac21dce5c8f7e702db43cdca697bac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDistanceFromDragStart</name>
      <anchor>a6597e78f67943660b4ad0bd0197bf393</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDistanceFromDragStartX</name>
      <anchor>a494dc3b604d83d8cb3beb823ad794892</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDistanceFromDragStartY</name>
      <anchor>a0002c82b507f88aeaeb2817651731dd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getOffsetFromDragStart</name>
      <anchor>acd3787981abe0c92880b3a70f5f0e957</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>mouseWasClicked</name>
      <anchor>ab35e49022b9212ad027217ce7eb258eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumberOfClicks</name>
      <anchor>a205e9812115187f39ab277f2f6d0c2c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLengthOfMousePress</name>
      <anchor>a70a30b4cb151dfb29de533574f3a1bf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>ae7e9cbdcc193cf6dc6d54896ad3e5a95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getScreenX</name>
      <anchor>ad6125254b5a45897e2559dc56f9f1370</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getScreenY</name>
      <anchor>a545ee04124637ad0ad9e428ac3d97035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getScreenPosition</name>
      <anchor>a559c142c58ccd14244c990dbe296fe90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMouseDownScreenX</name>
      <anchor>a459acd7877f6300971f8fed0d399615a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMouseDownScreenY</name>
      <anchor>a31eeda4bb4c5940e762110434428ba13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMouseDownScreenPosition</name>
      <anchor>ae1ae5322a3cf7c0547b8861b5175c9ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getEventRelativeTo</name>
      <anchor>a57d2a457eb73a69ad4c48c6df7a5c8d9</anchor>
      <arglist>(Component *otherComponent) const </arglist>
    </member>
    <member kind="function">
      <name>withNewPosition</name>
      <anchor>ab926d9b21cc99ca6d3adf821ec646a04</anchor>
      <arglist>(const Point&lt; int &gt; &amp;newPosition) const </arglist>
    </member>
    <member kind="function">
      <name>setDoubleClickTimeout</name>
      <anchor>ab218ca251ed4961600c09ceecdee04b3</anchor>
      <arglist>(int timeOutMilliseconds)</arglist>
    </member>
    <member kind="function">
      <name>getDoubleClickTimeout</name>
      <anchor>afbaeed9d3819c2ef04b8019129feeb29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>af3127333fe067df8158c9bb3da36ec84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>ad5c3872ed713f0d237898aa7307ece23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mods</name>
      <anchor>aaabc365b704e243b193b41113d4e50de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eventComponent</name>
      <anchor>a33c37dc970ab4c24e9e5b2c33e568d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>originalComponent</name>
      <anchor>abe6b50fe43981f161200d99e6d235953</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eventTime</name>
      <anchor>ad2980025e848cebfad0d6ad43f61c648</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>source</name>
      <anchor>a173d0c09a756adab9d82ebffa78df628</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseHoverDetector</name>
    <filename>classMouseHoverDetector.html</filename>
    <member kind="function">
      <name>MouseHoverDetector</name>
      <anchor>a35f80a86d2b6a015ba4165ae67ee7a3a</anchor>
      <arglist>(const int hoverTimeMillisecs=400)</arglist>
    </member>
    <member kind="function">
      <name>~MouseHoverDetector</name>
      <anchor>a53787894be6c403c23c409243ec69319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setHoverTimeMillisecs</name>
      <anchor>a4176d11354557800f7c950c0a7a53657</anchor>
      <arglist>(const int newTimeInMillisecs)</arglist>
    </member>
    <member kind="function">
      <name>setHoverComponent</name>
      <anchor>a2116329ab1a1a28b489a53d0781648e1</anchor>
      <arglist>(Component *const newSourceComponent)</arglist>
    </member>
    <member kind="function">
      <name>mouseHovered</name>
      <anchor>a5cd09ca3e4371085d4ff670286b7aa20</anchor>
      <arglist>(int mouseX, int mouseY)=0</arglist>
    </member>
    <member kind="function">
      <name>mouseMovedAfterHover</name>
      <anchor>adfa69badcc142356532effa97c0514ea</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseInputSource</name>
    <filename>classMouseInputSource.html</filename>
    <member kind="function">
      <name>MouseInputSource</name>
      <anchor>a47ef93676191649ffdc9a8b6d31b20f3</anchor>
      <arglist>(int index, bool isMouseDevice)</arglist>
    </member>
    <member kind="function">
      <name>~MouseInputSource</name>
      <anchor>a739e599b83e531d0576e7de581066939</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isMouse</name>
      <anchor>a4f3f5416c8ab8b0cdb88b0e6aadae306</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isTouch</name>
      <anchor>ab0418b41ec98a2958bd61774df4f9bbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>canHover</name>
      <anchor>adc671e46803c3067fb8c07c375e417a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hasMouseWheel</name>
      <anchor>a53cae84bba54e2533e00dec6a1789b92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getIndex</name>
      <anchor>ad75daa5396d854a0fa6ec7e2b698e482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isDragging</name>
      <anchor>aa5a7aa0c25b57d17eec69b2cb375c3e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getScreenPosition</name>
      <anchor>ae8071ea95e9935f5160fb5048f4ffa82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentModifiers</name>
      <anchor>a85f312417643cf1eb85974d79610ab12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getComponentUnderMouse</name>
      <anchor>abda8731023c5f8697a0771c5e60f91c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>triggerFakeMove</name>
      <anchor>a14cec6bb08eab4074ef660db8d65ffbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumberOfMultipleClicks</name>
      <anchor>abee44ed5898425a922a16ed921a1e9dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLastMouseDownTime</name>
      <anchor>a5051054ff8af597b13c4d8b58fd9859d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLastMouseDownPosition</name>
      <anchor>a2e81bb10e4365291b2e4edf44f866e38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hasMouseMovedSignificantlySincePressed</name>
      <anchor>a43519f282a79e12763c7a7a9ca100f6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hasMouseCursor</name>
      <anchor>a4c29b685870fb1fc84b5f327f1eb3ee8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>showMouseCursor</name>
      <anchor>acd385b3a829ec2d6a5aabb5ecedfcbce</anchor>
      <arglist>(const MouseCursor &amp;cursor)</arglist>
    </member>
    <member kind="function">
      <name>hideCursor</name>
      <anchor>a61bc07273b91b328bcff92e721a2461e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>revealCursor</name>
      <anchor>ade2da3233cdfaab0e8b6baf5671682bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>forceMouseCursorUpdate</name>
      <anchor>abb9ef3b672be6570b2345ad12fa93e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canDoUnboundedMovement</name>
      <anchor>a11846f8faf8338ab888a8f25e9a503f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>enableUnboundedMouseMovement</name>
      <anchor>a8289b45acc8783feb0d83898885a70b3</anchor>
      <arglist>(bool isEnabled, bool keepCursorVisibleUntilOffscreen=false)</arglist>
    </member>
    <member kind="function">
      <name>handleEvent</name>
      <anchor>a694bb0bdfed0614811ff85cacdf20612</anchor>
      <arglist>(ComponentPeer *peer, const Point&lt; int &gt; &amp;positionWithinPeer, int64 time, const ModifierKeys &amp;mods)</arglist>
    </member>
    <member kind="function">
      <name>handleWheel</name>
      <anchor>a2e84d58ffe52b35e7b7463fa0aad4e04</anchor>
      <arglist>(ComponentPeer *peer, const Point&lt; int &gt; &amp;positionWithinPeer, int64 time, float x, float y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MouseListener</name>
    <filename>classMouseListener.html</filename>
    <member kind="function">
      <name>~MouseListener</name>
      <anchor>a9d4fc9354c8e4109c9b8f0d4b50dd440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseMove</name>
      <anchor>a5af5dddc7b15eaa991fbe8f4a30cf235</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseEnter</name>
      <anchor>a6d250de3ccf4ccf26af904a85203cbd8</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseExit</name>
      <anchor>aa1c9018920b604a62adac28f7ca5ae11</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>ae56dc075911c89c9017d6e1d4875cc94</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>a430b14f5f0bca06ad90822b65cb71bc4</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>a70a1f594783006abdf87fd58f843a2f5</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDoubleClick</name>
      <anchor>a3ba9f9034d3f9eaf400b5506f353ff45</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseWheelMove</name>
      <anchor>a2c89fbc79ffa07fa3fb48f7e1a0640e3</anchor>
      <arglist>(const MouseEvent &amp;e, float wheelIncrementX, float wheelIncrementY)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDocumentPanel</name>
    <base>Component</base>
    <base>ComponentListener</base>
    <filename>classMultiDocumentPanel.html</filename>
    <member kind="function">
      <name>LayoutMode</name>
      <anchor>a493599178acb0ddea50f7059faa4f8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>loatingWindows</name>
      <anchor>a493599178acb0ddea50f7059faa4f8f3aa9d0aa1885d047c950adf06e10b47014</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>aximisedWindowsWithTabs</name>
      <anchor>a493599178acb0ddea50f7059faa4f8f3abefd8f86bfe674ec6c95337947d3754c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MultiDocumentPanel</name>
      <anchor>a2a3d7d745dd5cd11709ecee4102fa154</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~MultiDocumentPanel</name>
      <anchor>af17382f4a96ca832de343b158c59b1a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeAllDocuments</name>
      <anchor>acb21e02cfd0dcc0ecc9f34e85f8f4d0c</anchor>
      <arglist>(bool checkItsOkToCloseFirst)</arglist>
    </member>
    <member kind="function">
      <name>addDocument</name>
      <anchor>a3e395d369af51814e5f8598605594883</anchor>
      <arglist>(Component *component, const Colour &amp;backgroundColour, bool deleteWhenRemoved)</arglist>
    </member>
    <member kind="function">
      <name>closeDocument</name>
      <anchor>adedf8a2aa07d2a92788e22ab8fa6cae4</anchor>
      <arglist>(Component *component, bool checkItsOkToCloseFirst)</arglist>
    </member>
    <member kind="function">
      <name>getNumDocuments</name>
      <anchor>aa3627aef1e962f7426822c23361b9e18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDocument</name>
      <anchor>a8cd8fc13a6aabfd34ebc1b5103a967ad</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getActiveDocument</name>
      <anchor>a4a6711b33be5714a4152a7db7c1650bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setActiveDocument</name>
      <anchor>a561e26068d11c7f2fedf147bec78ff53</anchor>
      <arglist>(Component *component)</arglist>
    </member>
    <member kind="function">
      <name>activeDocumentChanged</name>
      <anchor>a3359aed8eb9e6711da33f0fb032aa1b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMaximumNumDocuments</name>
      <anchor>a60485a3e9af742aed9dcd8b93879459e</anchor>
      <arglist>(int maximumNumDocuments)</arglist>
    </member>
    <member kind="function">
      <name>useFullscreenWhenOneDocument</name>
      <anchor>aae57bc01df58759446d1ad745b1dd0ee</anchor>
      <arglist>(bool shouldUseTabs)</arglist>
    </member>
    <member kind="function">
      <name>isFullscreenWhenOneDocument</name>
      <anchor>a6f02802bf864eb67514d6bd444b4d5c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setLayoutMode</name>
      <anchor>aacc7913164527f666fbc8e9f06d279fb</anchor>
      <arglist>(LayoutMode newLayoutMode)</arglist>
    </member>
    <member kind="function">
      <name>getLayoutMode</name>
      <anchor>ad3520a7e57d7c9f58fe1a0e41ad338c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setBackgroundColour</name>
      <anchor>a4fe91bf898e98c5f29846310184855da</anchor>
      <arglist>(const Colour &amp;newBackgroundColour)</arglist>
    </member>
    <member kind="function">
      <name>getBackgroundColour</name>
      <anchor>ad70b0762af9e7bdddecadb8a58f948bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>tryToCloseDocument</name>
      <anchor>abc45cc74d6985f3df5afb907d731d4a7</anchor>
      <arglist>(Component *component)=0</arglist>
    </member>
    <member kind="function">
      <name>createNewDocumentWindow</name>
      <anchor>a4044246d06a86634830051c1ae93ea14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>af43d92974fd62ce6d2e37e365a4c2e59</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a3d7634287983cd7edd1fec1b068084bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>componentNameChanged</name>
      <anchor>af10b150bc19bd74c0dd9a2e29436e3ca</anchor>
      <arglist>(Component &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDocumentPanelWindow</name>
    <base>DocumentWindow</base>
    <filename>classMultiDocumentPanelWindow.html</filename>
    <member kind="function">
      <name>MultiDocumentPanelWindow</name>
      <anchor>a498c18de5829f4206b6a5ba878a5da52</anchor>
      <arglist>(const Colour &amp;backgroundColour)</arglist>
    </member>
    <member kind="function">
      <name>~MultiDocumentPanelWindow</name>
      <anchor>aa0f4c2871d1877ec636e6def20226e1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maximiseButtonPressed</name>
      <anchor>a037c11b196c6b58af19823ade8004f0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeButtonPressed</name>
      <anchor>ab4b5a80fa095fcf5418af5743f5a63a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activeWindowStatusChanged</name>
      <anchor>ac0fe0ec780604ce71dc5e02642ca1726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>broughtToFront</name>
      <anchor>a9f12031fd8551e5945b045075ec82db6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiTimer</name>
    <filename>classMultiTimer.html</filename>
    <member kind="function">
      <name>MultiTimer</name>
      <anchor>a6eb9bb3ed69c3897efcb70d97a48ff64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MultiTimer</name>
      <anchor>a8aac3020e5d57dfc2996cd7cdfab12c2</anchor>
      <arglist>(const MultiTimer &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~MultiTimer</name>
      <anchor>a6b839b0a693cfaf5e42d8274450b9a9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>timerCallback</name>
      <anchor>a19947d3dbdb91dfef027fe566e24f6c9</anchor>
      <arglist>(int timerId)=0</arglist>
    </member>
    <member kind="function">
      <name>startTimer</name>
      <anchor>ac0c40e75a2513d612ed502f7cc5c2d11</anchor>
      <arglist>(int timerId, int intervalInMilliseconds)</arglist>
    </member>
    <member kind="function">
      <name>stopTimer</name>
      <anchor>a815c8e8e9730e83c3b62483ae6378547</anchor>
      <arglist>(int timerId)</arglist>
    </member>
    <member kind="function">
      <name>isTimerRunning</name>
      <anchor>aaceb234205d06864a8b99427952276a4</anchor>
      <arglist>(int timerId) const </arglist>
    </member>
    <member kind="function">
      <name>getTimerInterval</name>
      <anchor>af1f29ce577a076b68aa4ffe359a5f9b2</anchor>
      <arglist>(int timerId) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamedPipe</name>
    <filename>classNamedPipe.html</filename>
    <member kind="function">
      <name>NamedPipe</name>
      <anchor>a81946cbcb2a7d0c979f5f7e1b565b4ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~NamedPipe</name>
      <anchor>a24ff787de22c7abe0ad7b556296d3b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>openExisting</name>
      <anchor>a7fb5d29a7fcb0ab8dada0948c5d3e536</anchor>
      <arglist>(const String &amp;pipeName)</arglist>
    </member>
    <member kind="function">
      <name>createNewPipe</name>
      <anchor>a015797c3a8cecb5012289bece1dfe9fe</anchor>
      <arglist>(const String &amp;pipeName)</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>ae6b7c1b0efe76f82ca1eb90383391cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isOpen</name>
      <anchor>aa9226f1d0b9da26f505b9bce3a4967b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getName</name>
      <anchor>aa18e73c53e57d62cc775df39dbad6b35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>a8b81c89f81044602748c81fc073c9ac3</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead, int timeOutMilliseconds=5000)</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>a5f46a13f1bf91790ff4d063220e312b5</anchor>
      <arglist>(const void *sourceBuffer, int numBytesToWrite, int timeOutMilliseconds=2000)</arglist>
    </member>
    <member kind="function">
      <name>cancelPendingReads</name>
      <anchor>a4521d38b599081da3f02e1468dac6445</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamedValueSet</name>
    <filename>classNamedValueSet.html</filename>
    <member kind="function">
      <name>NamedValueSet</name>
      <anchor>a349aa649efdf260ef2ae06afc7490dbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>NamedValueSet</name>
      <anchor>a7336357ad76cf764e20876ca430cc7f9</anchor>
      <arglist>(const NamedValueSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~NamedValueSet</name>
      <anchor>a927f2cf592dfd32511bdfae167d8bac1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a140bdc23733578508f19f033a531865a</anchor>
      <arglist>(const NamedValueSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>a85e152deb8de42b3e3427a82146f3fb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>af4b9555eae4ff43f967eec5ead73c63c</anchor>
      <arglist>(const var::identifier &amp;name) const </arglist>
    </member>
    <member kind="function">
      <name>getWithDefault</name>
      <anchor>a0918f4bd0b0b45725ea3e7df2c6b1c14</anchor>
      <arglist>(const var::identifier &amp;name, const var &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <name>getItem</name>
      <anchor>ac73b82ee96219f59deafbb944a44f89a</anchor>
      <arglist>(const var::identifier &amp;name) const </arglist>
    </member>
    <member kind="function">
      <name>set</name>
      <anchor>a939341700a110d41e20ff19b1c8875f7</anchor>
      <arglist>(const var::identifier &amp;name, const var &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>abf229e0a72fd68f9e885bcce365cd64f</anchor>
      <arglist>(const var::identifier &amp;name) const </arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>a7686b9a3e8bcab66ae6165f5f8ae152f</anchor>
      <arglist>(const var::identifier &amp;name)</arglist>
    </member>
    <member kind="function">
      <name>getName</name>
      <anchor>a65a89cb0872c3441742e3edf009f4f58</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>ae879588edbc9473e4185f03b4882f0c5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NSViewComponent</name>
    <base>Component</base>
    <filename>classNSViewComponent.html</filename>
    <member kind="function">
      <name>NSViewComponent</name>
      <anchor>a47f7a2b57ee9175115e1d8c5206e191f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~NSViewComponent</name>
      <anchor>a8b7861229080258227eba895b5925bac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setView</name>
      <anchor>a8768c07d38bf12419b1a77cd42625e8e</anchor>
      <arglist>(void *nsView)</arglist>
    </member>
    <member kind="function">
      <name>getView</name>
      <anchor>a45bc5a9f0a80c60342bd0fd93814feb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>aa0aa6e02e2b9fe5979c33b04079daec0</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OggVorbisAudioFormat</name>
    <base>AudioFormat</base>
    <filename>classOggVorbisAudioFormat.html</filename>
    <member kind="function">
      <name>OggVorbisAudioFormat</name>
      <anchor>a069365393c5a09e13e0042f4660d8cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~OggVorbisAudioFormat</name>
      <anchor>a0aa819bec4c3a8187581859a2d104f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPossibleSampleRates</name>
      <anchor>ab6e79265f715864a01b184de0bad9627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPossibleBitDepths</name>
      <anchor>a08bd12fa9f7954bf27c1c78da8ec1c40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canDoStereo</name>
      <anchor>a37803a62de64e1e66fd7dd46779a87b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canDoMono</name>
      <anchor>a0175b820d411c525193092b624f500ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isCompressed</name>
      <anchor>a436e1078eeef3c51cc79821687265bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getQualityOptions</name>
      <anchor>a3121f7fdfd5c61ebd4a6b041784fd21a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>estimateOggFileQuality</name>
      <anchor>aa9f91556cc01ecd9583c85d398d43ccb</anchor>
      <arglist>(const File &amp;source)</arglist>
    </member>
    <member kind="function">
      <name>createReaderFor</name>
      <anchor>a1f367c9a17b02867e122e72f46da3cff</anchor>
      <arglist>(InputStream *sourceStream, const bool deleteStreamIfOpeningFails)</arglist>
    </member>
    <member kind="function">
      <name>createWriterFor</name>
      <anchor>a87b8c15723851a409183055e9b21871f</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OldSchoolLookAndFeel</name>
    <base>LookAndFeel</base>
    <filename>classOldSchoolLookAndFeel.html</filename>
    <member kind="function">
      <name>OldSchoolLookAndFeel</name>
      <anchor>a932c5dd22c37bafac5c0d37efcb36e4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~OldSchoolLookAndFeel</name>
      <anchor>a26c5c0f7c91dcef50cf71f99717f8131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawButtonBackground</name>
      <anchor>a6a4222a184f07b37370e186cc9a47b7b</anchor>
      <arglist>(Graphics &amp;g, Button &amp;button, const Colour &amp;backgroundColour, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>drawToggleButton</name>
      <anchor>a046e825e7f86e11ed92d9e4f78cec30d</anchor>
      <arglist>(Graphics &amp;g, ToggleButton &amp;button, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>drawTickBox</name>
      <anchor>a4982b967305de6030149daa290489004</anchor>
      <arglist>(Graphics &amp;g, Component &amp;component, float x, float y, float w, float h, bool ticked, bool isEnabled, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>drawProgressBar</name>
      <anchor>a2dfcc7dc9af86a66cfbbcd4b32fc9657</anchor>
      <arglist>(Graphics &amp;g, ProgressBar &amp;progressBar, int width, int height, double progress, const String &amp;textToShow)</arglist>
    </member>
    <member kind="function">
      <name>drawScrollbarButton</name>
      <anchor>a28db27368dccce5514eda05d0776a7df</anchor>
      <arglist>(Graphics &amp;g, ScrollBar &amp;scrollbar, int width, int height, int buttonDirection, bool isScrollbarVertical, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>drawScrollbar</name>
      <anchor>ac4d100fc1a7b55d9a4b90637dde9c670</anchor>
      <arglist>(Graphics &amp;g, ScrollBar &amp;scrollbar, int x, int y, int width, int height, bool isScrollbarVertical, int thumbStartPosition, int thumbSize, bool isMouseOver, bool isMouseDown)</arglist>
    </member>
    <member kind="function">
      <name>getScrollbarEffect</name>
      <anchor>a78ecb06a6b72a19498ba0219dd82aff1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawTextEditorOutline</name>
      <anchor>a68fcc1b9b94ac20326ce3b431c41f310</anchor>
      <arglist>(Graphics &amp;g, int width, int height, TextEditor &amp;textEditor)</arglist>
    </member>
    <member kind="function">
      <name>drawPopupMenuBackground</name>
      <anchor>aea8ed31c8ca9a471305202100e4c0eb4</anchor>
      <arglist>(Graphics &amp;g, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>drawMenuBarBackground</name>
      <anchor>aa700a92577590a67ebaa0b367b3bb155</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isMouseOverBar, MenuBarComponent &amp;menuBar)</arglist>
    </member>
    <member kind="function">
      <name>drawComboBox</name>
      <anchor>ade7d4f86e3f891a150f1d08d04ef6999</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isButtonDown, int buttonX, int buttonY, int buttonW, int buttonH, ComboBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>getComboBoxFont</name>
      <anchor>af59ba53c408b3ed008cd8ae5fe767137</anchor>
      <arglist>(ComboBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>drawLinearSlider</name>
      <anchor>aed94be7dc3dd3ace3a591c3832f2ecb4</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int width, int height, float sliderPos, float minSliderPos, float maxSliderPos, const Slider::SliderStyle style, Slider &amp;slider)</arglist>
    </member>
    <member kind="function">
      <name>getSliderThumbRadius</name>
      <anchor>a2512848fd19630b5fb7879ca6488d8e9</anchor>
      <arglist>(Slider &amp;slider)</arglist>
    </member>
    <member kind="function">
      <name>createSliderButton</name>
      <anchor>ac748dec1d571490be5b37cf60589a8e7</anchor>
      <arglist>(bool isIncrement)</arglist>
    </member>
    <member kind="function">
      <name>getSliderEffect</name>
      <anchor>a4abcefc57ac29ec5c0491ff7bb6d8672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawCornerResizer</name>
      <anchor>a1c403174e2d8e1f43536095e3affe1eb</anchor>
      <arglist>(Graphics &amp;g, int w, int h, bool isMouseOver, bool isMouseDragging)</arglist>
    </member>
    <member kind="function">
      <name>createDocumentWindowButton</name>
      <anchor>a5965e67f47fa425476658a68a0f64a07</anchor>
      <arglist>(int buttonType)</arglist>
    </member>
    <member kind="function">
      <name>positionDocumentWindowButtons</name>
      <anchor>a5d72da56e91ad876d6189370684f3f51</anchor>
      <arglist>(DocumentWindow &amp;window, int titleBarX, int titleBarY, int titleBarW, int titleBarH, Button *minimiseButton, Button *maximiseButton, Button *closeButton, bool positionTitleBarButtonsOnLeft)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLComponent</name>
    <base>Component</base>
    <filename>classOpenGLComponent.html</filename>
    <member kind="function">
      <name>OpenGLType</name>
      <anchor>a7840abdaa75e25dc7bdd067ed46fcda3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>penGLDefault</name>
      <anchor>a7840abdaa75e25dc7bdd067ed46fcda3a9419f91d630b883a33851af8933daf2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>OpenGLComponent</name>
      <anchor>a3239d4fe7a20e0d403e4fea37d3953d7</anchor>
      <arglist>(OpenGLType type=openGLDefault)</arglist>
    </member>
    <member kind="function">
      <name>~OpenGLComponent</name>
      <anchor>a143acb3033922144d7e4ee5e6fb73d23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPixelFormat</name>
      <anchor>a174b9ea35a81112719d806a8fb56fa38</anchor>
      <arglist>(const OpenGLPixelFormat &amp;formatToUse)</arglist>
    </member>
    <member kind="function">
      <name>getPixelFormat</name>
      <anchor>aecc0682028253ffe837a1c67c82a9558</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>shareWith</name>
      <anchor>a1e85498b115b003d4dc31e5adc5a421b</anchor>
      <arglist>(OpenGLContext *contextToShareListsWith)</arglist>
    </member>
    <member kind="function">
      <name>getShareContext</name>
      <anchor>a353a89a90d9a75e0b1b7436465024759</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>swapBuffers</name>
      <anchor>acef8297d52826d53ff5dc66e54f29986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>renderOpenGL</name>
      <anchor>af4a7f6374b6b0c2dc486101ddac65fe6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>newOpenGLContextCreated</name>
      <anchor>a920f30444772db0feb7f4c2f5f26357a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getCurrentContext</name>
      <anchor>a55092f5f7b39e8ab3be5228ce6e3396c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>makeCurrentContextActive</name>
      <anchor>a2c89868dfdc88007da5b844ebb75e185</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>makeCurrentContextInactive</name>
      <anchor>a2cca942e0e64317327c9e8757bd4a6f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isActiveContext</name>
      <anchor>a0356e7d26761ac73198aaadcb12464a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>renderAndSwapBuffers</name>
      <anchor>aa5811130f558dca5d5f03aaf3b4bf438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getContextLock</name>
      <anchor>af6f9dc3d0a41df5f7c841fa7ef350219</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a431d6fca745b16ad70a7782efb85220a</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>getNativeWindowHandle</name>
      <anchor>ab9b8f193685d5a0ce4c7b26991fc6e16</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLContext</name>
    <filename>classOpenGLContext.html</filename>
    <member kind="function">
      <name>~OpenGLContext</name>
      <anchor>aa7f7686e0d9ef164df7063e88085c7ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OpenGLContext</name>
      <anchor>a9be23e3642f28848a26cd00669f0b4d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>makeActive</name>
      <anchor>a8657f176eda13d36ce2cf2ababe9e7a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>makeInactive</name>
      <anchor>a32a436a6dce9cb8767ddec7069b4b525</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>isActive</name>
      <anchor>a2ea51341d02cfac59290cddbd27ac831</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>swapBuffers</name>
      <anchor>aeb2e29e76ac37a957b5bf2777135a5d3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>setSwapInterval</name>
      <anchor>aba68922585080f1c8f0daf470f21554d</anchor>
      <arglist>(int numFramesPerSwap)=0</arglist>
    </member>
    <member kind="function">
      <name>getSwapInterval</name>
      <anchor>a0ac5a84944dc80d60c5bfdda824c261a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>getPixelFormat</name>
      <anchor>a455e553186b5e95dc152e28486dab89c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>updateWindowPosition</name>
      <anchor>a98a0adc68b7ac57d8b2311bbd768d255</anchor>
      <arglist>(int x, int y, int w, int h, int outerWindowHeight)=0</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>a4f00fed7ed5b36fa22a009b362a6fbb1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getRawContext</name>
      <anchor>a1fbea2345d8474d8c40d4b2ae34f8f6e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>getCurrentContext</name>
      <anchor>af7e84e07e6f1228a865915ca21500f7a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenGLPixelFormat</name>
    <filename>classOpenGLPixelFormat.html</filename>
    <member kind="function">
      <name>OpenGLPixelFormat</name>
      <anchor>a0e16d1d70d7f9e73389230d26d209b97</anchor>
      <arglist>(int bitsPerRGBComponent=8, int alphaBits=8, int depthBufferBits=16, int stencilBufferBits=0)</arglist>
    </member>
    <member kind="function">
      <name>OpenGLPixelFormat</name>
      <anchor>afd49317ece26e020304e83db84dcf80a</anchor>
      <arglist>(const OpenGLPixelFormat &amp;)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a517e7f2c94d70591d36621a2006ff920</anchor>
      <arglist>(const OpenGLPixelFormat &amp;)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a867cdabf94148671cfc4cc40c56c0bbb</anchor>
      <arglist>(const OpenGLPixelFormat &amp;) const </arglist>
    </member>
    <member kind="function">
      <name>getAvailablePixelFormats</name>
      <anchor>a5a9ebb37504bd2510c4c530d6541fc0b</anchor>
      <arglist>(Component *component, OwnedArray&lt; OpenGLPixelFormat &gt; &amp;results)</arglist>
    </member>
    <member kind="function">
      <name>redBits</name>
      <anchor>ae35395197ac66ebfed1a94d1748a20b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>greenBits</name>
      <anchor>a75cc537f0d7ad936b3353426735515dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>blueBits</name>
      <anchor>a309d74a66aa876591508d76573597a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>alphaBits</name>
      <anchor>a4d947e7a9831d9158f2a0b519d7d3497</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>depthBufferBits</name>
      <anchor>a9783fd7c1c9d5ade28eac2eb7c710be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>stencilBufferBits</name>
      <anchor>aa94f3f667e41465ea29b6f259d9abf8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>accumulationBufferRedBits</name>
      <anchor>a1b07ee8f12cbb9c8b4671fa29c326490</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>accumulationBufferGreenBits</name>
      <anchor>a473582e91fe1a2c9c1585185ee57e03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>accumulationBufferBlueBits</name>
      <anchor>abc38758c1e8b54f5002a0518c78c328d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>accumulationBufferAlphaBits</name>
      <anchor>aa3bfc867775483eed692c117c44c4da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>fullSceneAntiAliasingNumSamples</name>
      <anchor>adf3d2ec73b46d85195306a6603999ffa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OutputStream</name>
    <filename>classOutputStream.html</filename>
    <member kind="function">
      <name>OutputStream</name>
      <anchor>a1159b7032e052493fdec603a3deeff70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~OutputStream</name>
      <anchor>a3c3286bd6c6c8fb6b16ce7f88745075b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>flush</name>
      <anchor>a2b731aef87084c3779bea292f85e800d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>ae95d7b4edfe5eac6a0913b079684572a</anchor>
      <arglist>(int64 newPosition)=0</arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>a84ec99ccacf0326e79070d34f178e3d3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>ad9fac7874915c3b059f057b6a680f3d8</anchor>
      <arglist>(const void *dataToWrite, int howManyBytes)=0</arglist>
    </member>
    <member kind="function">
      <name>writeByte</name>
      <anchor>af6e56ede656380fcf5c626cf7e2ab53e</anchor>
      <arglist>(char byte)</arglist>
    </member>
    <member kind="function">
      <name>writeBool</name>
      <anchor>a44a60476e253aa1c09672ed44345f67a</anchor>
      <arglist>(bool boolValue)</arglist>
    </member>
    <member kind="function">
      <name>writeShort</name>
      <anchor>a7a717c783d754a41476010d2d6d3ecce</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function">
      <name>writeShortBigEndian</name>
      <anchor>a2a4b014cd119b55b31a35f1f36bb11ef</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function">
      <name>writeInt</name>
      <anchor>a9d610fb0f6ef5ad5a6f5378ff2fed680</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <name>writeIntBigEndian</name>
      <anchor>abbc6cb41c28adc80a397a81b8fac7376</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <name>writeInt64</name>
      <anchor>a29dd180c396618746b61ac4cc107f85e</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <name>writeInt64BigEndian</name>
      <anchor>a346aaac04d10b2fc263633ef9400f8dd</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <name>writeFloat</name>
      <anchor>ae5253c705bf7f6c8ae241a5a33c4fcd8</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <name>writeFloatBigEndian</name>
      <anchor>aa64f2fbd1cec9af26ead7b9eb02e6d2a</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <name>writeDouble</name>
      <anchor>ab74ebfcb8ad65c0001353e9ddfb31633</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <name>writeDoubleBigEndian</name>
      <anchor>ac620a6cf19e9a61192b87ba538d236cf</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <name>writeCompressedInt</name>
      <anchor>ada214fdc1ba772b581d7870d922d5ef8</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <name>writeString</name>
      <anchor>a2f984842a154af3fe119cb40e1bb6c66</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>writeText</name>
      <anchor>a1e60dd52787f7b3e9d32619286452cbb</anchor>
      <arglist>(const String &amp;text, bool asUnicode, bool writeUnicodeHeaderBytes)</arglist>
    </member>
    <member kind="function">
      <name>writeFromInputStream</name>
      <anchor>a48eab6600be7d46c77b1db0d21fa3d4c</anchor>
      <arglist>(InputStream &amp;source, int maxNumBytesToWrite)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OwnedArray</name>
    <filename>classOwnedArray.html</filename>
    <member kind="function">
      <name>ScopedLockType</name>
      <anchor>a3a6262c77a9ca75c746c3d98410ce356</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>OwnedArray</name>
      <anchor>a61bee29ed003fc8cfc392ab5850a080c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~OwnedArray</name>
      <anchor>aab8ed18b03ab56e465433b32f84c9e59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>ae4c109b75802bbab97d861b182346dc8</anchor>
      <arglist>(const bool deleteObjects=true)</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>ace9d969a971337f548417323e13fe9f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>aff6fda7e3aca6c250529e0c40ac0693d</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>getUnchecked</name>
      <anchor>a15047a1780280c9e0bc18bd9ea92ae49</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>getFirst</name>
      <anchor>a5452f74ba7334321311d9300c2f3c8b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLast</name>
      <anchor>ad9558cc58ae86c3ecf3b9ea726d82376</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>a8f0339a4d2b8213edbaa436096fab4b9</anchor>
      <arglist>(const ObjectClass *const objectToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>a3aec1081e69f8df6f7fe78445f5efdc9</anchor>
      <arglist>(const ObjectClass *const objectToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>ad31ce7941fdfa7240f72aadec08eb802</anchor>
      <arglist>(const ObjectClass *const newObject)</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>ac278175aa3cee4add5e1b34bd3645c6c</anchor>
      <arglist>(int indexToInsertAt, const ObjectClass *const newObject)</arglist>
    </member>
    <member kind="function">
      <name>addIfNotAlreadyThere</name>
      <anchor>a04f8fcf24a9b732ad3b302eda02d2644</anchor>
      <arglist>(const ObjectClass *const newObject)</arglist>
    </member>
    <member kind="function">
      <name>set</name>
      <anchor>a78294c9352069dc6ac0ed41ac03f19d5</anchor>
      <arglist>(const int indexToChange, const ObjectClass *const newObject, const bool deleteOldElement=true)</arglist>
    </member>
    <member kind="function">
      <name>addArray</name>
      <anchor>a074b165414713ee4e53eb09689628d45</anchor>
      <arglist>(const OtherArrayType &amp;arrayToAddFrom, int startIndex=0, int numElementsToAdd=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>addSorted</name>
      <anchor>ae68c470174d24679d0b6bb876139b5f6</anchor>
      <arglist>(ElementComparator &amp;comparator, ObjectClass *const newObject)</arglist>
    </member>
    <member kind="function">
      <name>indexOfSorted</name>
      <anchor>acd6e5ceb441044bde9c370e262b0e9c0</anchor>
      <arglist>(ElementComparator &amp;comparator, const ObjectClass *const objectToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>aa5868e53b5a1b21b0c13970e41012531</anchor>
      <arglist>(const int indexToRemove, const bool deleteObject=true)</arglist>
    </member>
    <member kind="function">
      <name>removeObject</name>
      <anchor>a4674b4f25da43f8fde80c487a673d6b6</anchor>
      <arglist>(const ObjectClass *const objectToRemove, const bool deleteObject=true)</arglist>
    </member>
    <member kind="function">
      <name>removeRange</name>
      <anchor>ad75c0c6727ebca3e2866c78d967c9ca1</anchor>
      <arglist>(int startIndex, const int numberToRemove, const bool deleteObjects=true)</arglist>
    </member>
    <member kind="function">
      <name>removeLast</name>
      <anchor>ad1350744bcaedfd9dd2b054dac7946fa</anchor>
      <arglist>(int howManyToRemove=1, const bool deleteObjects=true)</arglist>
    </member>
    <member kind="function">
      <name>swap</name>
      <anchor>acfdcac765a7db8d62867fdef665d0af6</anchor>
      <arglist>(const int index1, const int index2)</arglist>
    </member>
    <member kind="function">
      <name>move</name>
      <anchor>aaf640f50ec288ef13396bb1dba8c7d1a</anchor>
      <arglist>(const int currentIndex, int newIndex)</arglist>
    </member>
    <member kind="function">
      <name>swapWithArray</name>
      <anchor>ab8e1b7abb76ecee98e43f5802a8a9d02</anchor>
      <arglist>(OwnedArray &amp;otherArray)</arglist>
    </member>
    <member kind="function">
      <name>minimiseStorageOverheads</name>
      <anchor>acae7e1707d0e8538fd4924dcb9e27177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ensureStorageAllocated</name>
      <anchor>a122abc772d68ed839558e867a9013800</anchor>
      <arglist>(const int minNumElements)</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>abe5e530517cd06ed2590ecf8ac9b17a8</anchor>
      <arglist>(ElementComparator &amp;comparator, const bool retainOrderOfEquivalentItems=false) const </arglist>
    </member>
    <member kind="function">
      <name>getLock</name>
      <anchor>a195e741ac6b177b253a7bb9c88ec1604</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Path</name>
    <filename>classPath.html</filename>
    <member kind="function">
      <name>Path</name>
      <anchor>af26cfab021ddf49af73da3b2beca85ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Path</name>
      <anchor>a0208ff3549e5de3be8d906d774cea709</anchor>
      <arglist>(const Path &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~Path</name>
      <anchor>a141da9ff89c85e0ba410b5a73864c267</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a7748d88f32531336ad5f8dac8057ea6b</anchor>
      <arglist>(const Path &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>a46e72725b12d1956545af54e3d42df76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBounds</name>
      <anchor>ab40221fa2604dad8c236de96553b8b72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBoundsTransformed</name>
      <anchor>a0026f2e72b33b67c429c59949221014e</anchor>
      <arglist>(const AffineTransform &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>ad2df33569a3ec679bcb89a095f1db947</anchor>
      <arglist>(float x, float y, float tolerence=10.0f) const </arglist>
    </member>
    <member kind="function">
      <name>intersectsLine</name>
      <anchor>a58e674f6f471a9e3c5e14938543b894d</anchor>
      <arglist>(float x1, float y1, float x2, float y2, float tolerence=10.0f)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a3e94fc24f7c713442f3d52478d0772fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startNewSubPath</name>
      <anchor>a9c24222b2226b0e082069dbf789dca07</anchor>
      <arglist>(float startX, float startY)</arglist>
    </member>
    <member kind="function">
      <name>closeSubPath</name>
      <anchor>a3fb7879fd6e09ce7657260c7b2934162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineTo</name>
      <anchor>a6cfdf1dea900089ffee8eea61385062e</anchor>
      <arglist>(float endX, float endY)</arglist>
    </member>
    <member kind="function">
      <name>quadraticTo</name>
      <anchor>ab50510cf385b9ea3fe64fef6be45f85b</anchor>
      <arglist>(float controlPointX, float controlPointY, float endPointX, float endPointY)</arglist>
    </member>
    <member kind="function">
      <name>cubicTo</name>
      <anchor>a654df5afb3c113c0f6c5391a88d21811</anchor>
      <arglist>(float controlPoint1X, float controlPoint1Y, float controlPoint2X, float controlPoint2Y, float endPointX, float endPointY)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentPosition</name>
      <anchor>ae6ad9180d6306b5fc8596e08bd3e9113</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>addRectangle</name>
      <anchor>af63b8419acedc43ced5c79578be0f0ea</anchor>
      <arglist>(float x, float y, float width, float height)</arglist>
    </member>
    <member kind="function">
      <name>addRectangle</name>
      <anchor>af5f714ff841fc689f4098c201e6dee4e</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangle)</arglist>
    </member>
    <member kind="function">
      <name>addRoundedRectangle</name>
      <anchor>a501f83b0e323fe86d33c047f83451065</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSize)</arglist>
    </member>
    <member kind="function">
      <name>addRoundedRectangle</name>
      <anchor>a4f06d92e26aa83cca9e96110711ffa6a</anchor>
      <arglist>(float x, float y, float width, float height, float cornerSizeX, float cornerSizeY)</arglist>
    </member>
    <member kind="function">
      <name>addTriangle</name>
      <anchor>a1508e0d3dd2048dc5304721bee6ee2c1</anchor>
      <arglist>(float x1, float y1, float x2, float y2, float x3, float y3)</arglist>
    </member>
    <member kind="function">
      <name>addQuadrilateral</name>
      <anchor>aced2dafcb8a12f73fcffe032def577be</anchor>
      <arglist>(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)</arglist>
    </member>
    <member kind="function">
      <name>addEllipse</name>
      <anchor>a7514c5eaa928b64121490a7f0ce3088c</anchor>
      <arglist>(float x, float y, float width, float height)</arglist>
    </member>
    <member kind="function">
      <name>addArc</name>
      <anchor>a1486b650a586f1be84e2decc47bcc844</anchor>
      <arglist>(float x, float y, float width, float height, float fromRadians, float toRadians, bool startAsNewSubPath=false)</arglist>
    </member>
    <member kind="function">
      <name>addCentredArc</name>
      <anchor>ad72e6b6e7a058d521f26443bbddca420</anchor>
      <arglist>(float centreX, float centreY, float radiusX, float radiusY, float rotationOfEllipse, float fromRadians, float toRadians, bool startAsNewSubPath=false)</arglist>
    </member>
    <member kind="function">
      <name>addPieSegment</name>
      <anchor>a6c09cddf0316e722af69129c6738be34</anchor>
      <arglist>(float x, float y, float width, float height, float fromRadians, float toRadians, float innerCircleProportionalSize)</arglist>
    </member>
    <member kind="function">
      <name>addLineSegment</name>
      <anchor>ae5d11b3974add6a9e93780b6f1716bfa</anchor>
      <arglist>(float startX, float startY, float endX, float endY, float lineThickness)</arglist>
    </member>
    <member kind="function">
      <name>addArrow</name>
      <anchor>a8630c775aae8536671362e0a5700172e</anchor>
      <arglist>(float startX, float startY, float endX, float endY, float lineThickness, float arrowheadWidth, float arrowheadLength)</arglist>
    </member>
    <member kind="function">
      <name>addStar</name>
      <anchor>ad0c23b2ed0ceaa6187f8ec1143203c17</anchor>
      <arglist>(float centreX, float centreY, int numberOfPoints, float innerRadius, float outerRadius, float startAngle=0.0f)</arglist>
    </member>
    <member kind="function">
      <name>addBubble</name>
      <anchor>a2f04d8b05aad78f8624fe2d1a470d7d5</anchor>
      <arglist>(float bodyX, float bodyY, float bodyW, float bodyH, float cornerSize, float arrowTipX, float arrowTipY, int whichSide, float arrowPositionAlongEdgeProportional, float arrowWidth)</arglist>
    </member>
    <member kind="function">
      <name>addPath</name>
      <anchor>ad2d6833a36f348ab33a83309e3956c00</anchor>
      <arglist>(const Path &amp;pathToAppend)</arglist>
    </member>
    <member kind="function">
      <name>addPath</name>
      <anchor>a12aa38ff3ea67622b43bac7791257865</anchor>
      <arglist>(const Path &amp;pathToAppend, const AffineTransform &amp;transformToApply)</arglist>
    </member>
    <member kind="function">
      <name>swapWithPath</name>
      <anchor>a4f54972773ddf46775abd7df40428b73</anchor>
      <arglist>(Path &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>applyTransform</name>
      <anchor>a63dccd5481eeee71be29b08f1d95b2c1</anchor>
      <arglist>(const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>scaleToFit</name>
      <anchor>ab35a455a6d29c8769e930f2cf8d4c9e1</anchor>
      <arglist>(float x, float y, float width, float height, bool preserveProportions)</arglist>
    </member>
    <member kind="function">
      <name>getTransformToScaleToFit</name>
      <anchor>a90e0d68c56dc258a35805bc81ec0ae09</anchor>
      <arglist>(float x, float y, float width, float height, bool preserveProportions, const Justification &amp;justificationType=Justification::centred) const </arglist>
    </member>
    <member kind="function">
      <name>createPathWithRoundedCorners</name>
      <anchor>a44a80c3f74c4fbf3b59ebbf1e373133d</anchor>
      <arglist>(float cornerRadius) const </arglist>
    </member>
    <member kind="function">
      <name>setUsingNonZeroWinding</name>
      <anchor>a4b9f2b2e2ac2f22ce118346f098d8c8b</anchor>
      <arglist>(bool isNonZeroWinding)</arglist>
    </member>
    <member kind="function">
      <name>isUsingNonZeroWinding</name>
      <anchor>ab820b1a4efce998fe33b3959e985f0be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>loadPathFromStream</name>
      <anchor>a00e0e38020c035feb29e498a0ab93433</anchor>
      <arglist>(InputStream &amp;source)</arglist>
    </member>
    <member kind="function">
      <name>loadPathFromData</name>
      <anchor>a1fd0c131384c251b9ad4cde2cf4de708</anchor>
      <arglist>(const void *data, int numberOfBytes)</arglist>
    </member>
    <member kind="function">
      <name>writePathToStream</name>
      <anchor>aba2eb076252eb29a04205182d6384726</anchor>
      <arglist>(OutputStream &amp;destination) const </arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>a194f420232b49421065c1dbb43a6d268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>restoreFromString</name>
      <anchor>a3eed3ba259fd44165c2fe9360f8c3f5e</anchor>
      <arglist>(const String &amp;stringVersion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Path::Iterator</name>
    <filename>classPath_1_1Iterator.html</filename>
    <member kind="function">
      <name>Iterator::PathElementType</name>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tartNewSubPath</name>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfdaebfff5dcac5415d6c7274ad2ef633215</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ineTo</name>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfdabbd031b257d50abb77ee0c755f31b8e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uadraticTo</name>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfda3a092657aa2dec64c33926a6528c9f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ubicTo</name>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfda564006cee15d99bd97abe4a506231d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>losePath</name>
      <anchor>a62b1a329e3fdbcbdad78bb6c90c7bcfda38a8ed95a6ef321e0a558c3807bac952</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>a53108f853b4af5f975d870f24ad79f83</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::~Iterator</name>
      <anchor>a35875e3d45947d7815da4a769a0a44c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::next</name>
      <anchor>a1100558e4ab2610789a95606a116fbbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::elementType</name>
      <anchor>a3b33636d181ff130a4c0e475da2824db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator::x1</name>
      <anchor>a0041a7b85083e9083c570b8b46a96d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator::y1</name>
      <anchor>a38ababca84bdd463b75eadb408406c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator::x2</name>
      <anchor>a2f5da180f00bd2e9356d65b2c241d52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator::y2</name>
      <anchor>a84aee9a5927e034627c1fb4366ee9aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator::x3</name>
      <anchor>afb477336904d08b7869a536444071df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator::y3</name>
      <anchor>a3981516b86cfb813b61d4a737be307ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PathFlatteningIterator</name>
    <filename>classPathFlatteningIterator.html</filename>
    <member kind="function">
      <name>PathFlatteningIterator</name>
      <anchor>a88e7479fa9ac0f947c49eaadaf69060d</anchor>
      <arglist>(const Path &amp;path, const AffineTransform &amp;transform=AffineTransform::identity, float tolerence=6.0f)</arglist>
    </member>
    <member kind="function">
      <name>~PathFlatteningIterator</name>
      <anchor>a907158adef4ad38fd4899142b237106f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>a39a62cacf05fae6d38a0df4f250e5538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isLastInSubpath</name>
      <anchor>a2b010ad445034618d4a7b2a534c8e9fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>x1</name>
      <anchor>aeb4902696a4f694a69eb7c48b274b2ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y1</name>
      <anchor>a6c4a3280b8b9504e38bc1cb739ab07e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>x2</name>
      <anchor>a88aeb6be633806b5b6e2e8cc7172e1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y2</name>
      <anchor>ad2ae4ff40b30bcc1c4704542d2c93003</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>closesSubPath</name>
      <anchor>ac102af0a5ac3dfd026488c1efea1b8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>subPathIndex</name>
      <anchor>a96ac386608cfe18dde7de5a433aac417</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PathStrokeType</name>
    <filename>classPathStrokeType.html</filename>
    <member kind="function">
      <name>JointStyle</name>
      <anchor>af1cf21018ccb9aa84572c1da4ae513b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>itered</name>
      <anchor>af1cf21018ccb9aa84572c1da4ae513b8ae51af2220424cff8ab85409c4f7659b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>urved</name>
      <anchor>af1cf21018ccb9aa84572c1da4ae513b8aa0e50e387cbe6533b830061006cb3747</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eveled</name>
      <anchor>af1cf21018ccb9aa84572c1da4ae513b8a957c356587532b49af11000b024bd38b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>EndCapStyle</name>
      <anchor>a9050e37133047ab699b44b704e4f96cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utt</name>
      <anchor>a9050e37133047ab699b44b704e4f96cfa05f422ecf6a99eb2eed32a6d67795b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>quare</name>
      <anchor>a9050e37133047ab699b44b704e4f96cfabed6afb274b3942d54f510ba65281cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ounded</name>
      <anchor>a9050e37133047ab699b44b704e4f96cfa6b01d7b3e9809f0b62dcb151d552a96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PathStrokeType</name>
      <anchor>a9cfa136f0fcae60ef7b33d5155162bd7</anchor>
      <arglist>(float strokeThickness, JointStyle jointStyle=mitered, EndCapStyle endStyle=butt)</arglist>
    </member>
    <member kind="function">
      <name>PathStrokeType</name>
      <anchor>a8ea7cb9050b76ff1ba472de1d24972e6</anchor>
      <arglist>(const PathStrokeType &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~PathStrokeType</name>
      <anchor>a72a5d5d3ac35582b2475d4d1890103b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a9a99c9fdf554a76c3360fb4baf91c2a0</anchor>
      <arglist>(const PathStrokeType &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>createStrokedPath</name>
      <anchor>ab5439d64b3a032356e234c1aaead4f3c</anchor>
      <arglist>(Path &amp;destPath, const Path &amp;sourcePath, const AffineTransform &amp;transform=AffineTransform::identity, float extraAccuracy=1.0f) const </arglist>
    </member>
    <member kind="function">
      <name>createDashedStroke</name>
      <anchor>a4eca56bfcdc41f774fcde1c8e34b70af</anchor>
      <arglist>(Path &amp;destPath, const Path &amp;sourcePath, const float *dashLengths, int numDashLengths, const AffineTransform &amp;transform=AffineTransform::identity, float extraAccuracy=1.0f) const </arglist>
    </member>
    <member kind="function">
      <name>getStrokeThickness</name>
      <anchor>a1154fff09e5e02f187ca00b6b1d4324f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getJointStyle</name>
      <anchor>af416079793d78122c7e11e214ff54199</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getEndStyle</name>
      <anchor>a84b93618fe32f3a62bc06d6b811178ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a710def853cf8e6ed4877214a6d5b50e8</anchor>
      <arglist>(const PathStrokeType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a5a7102c64d0b553135141a7afdef57ab</anchor>
      <arglist>(const PathStrokeType &amp;other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PerformanceCounter</name>
    <filename>classPerformanceCounter.html</filename>
    <member kind="function">
      <name>PerformanceCounter</name>
      <anchor>ac0232ef8c716c685bca97f0ac99002e8</anchor>
      <arglist>(const String &amp;counterName, int runsPerPrintout=100, const File &amp;loggingFile=File::nonexistent)</arglist>
    </member>
    <member kind="function">
      <name>~PerformanceCounter</name>
      <anchor>a6f6a2cf85ae09a5e61c7ed7bb9027b4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>a68620a2f6e6c3d54c950c939862f0294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>ade8d5b5b9f4b8187bccfd9b6b1f76b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>printStatistics</name>
      <anchor>a4be98835cd71c8b7bdd6bf93f9b83000</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PixelAlpha</name>
    <filename>classPixelAlpha.html</filename>
    <member kind="function">
      <name>@10</name>
      <anchor>a890de282dcb881090e46c379e15e63b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ndexA</name>
      <anchor>a890de282dcb881090e46c379e15e63b2a31d54b036f46396c28eb848b84ee6ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PixelAlpha</name>
      <anchor>a6a7128581b2e37cc43ba62eada9f758e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~PixelAlpha</name>
      <anchor>a2520dd555685f53677790bf3dfec251f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PixelAlpha</name>
      <anchor>a762a0310dbb2f3a668287e6553c913ec</anchor>
      <arglist>(const uint32 argb)</arglist>
    </member>
    <member kind="function">
      <name>getARGB</name>
      <anchor>a6823a6174ff0056f4e20af1868c90b14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRB</name>
      <anchor>ab9571af5da0c856040cb6220dcc9a6ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAG</name>
      <anchor>adce1fd51ad3d5dc5b79c31c6b69e1405</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAlpha</name>
      <anchor>a3edaea7c21d8fcbade2ca89acfab52cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRed</name>
      <anchor>ab906b0926709de3cb6d3f284063df22c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getGreen</name>
      <anchor>a53058bc5294996addd06ee18967ae788</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBlue</name>
      <anchor>ac263dabf854f6f1862ea35cacc572d42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>blend</name>
      <anchor>aaab7fbc3945de81c619bf26a907c4207</anchor>
      <arglist>(const Pixel &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>blend</name>
      <anchor>a2d62bb583c3c9bc78482d8078109f543</anchor>
      <arglist>(const Pixel &amp;src, uint32 extraAlpha)</arglist>
    </member>
    <member kind="function">
      <name>tween</name>
      <anchor>a0c5044c5d5c8b131b606d9fe06939898</anchor>
      <arglist>(const Pixel &amp;src, const uint32 amount)</arglist>
    </member>
    <member kind="function">
      <name>set</name>
      <anchor>a5d5aa64e424b33fdc06dcf6422b3a3b2</anchor>
      <arglist>(const Pixel &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>setAlpha</name>
      <anchor>ac6bd4785b39a414becde05572f6eaeab</anchor>
      <arglist>(const uint8 newAlpha)</arglist>
    </member>
    <member kind="function">
      <name>multiplyAlpha</name>
      <anchor>accbb79a0fce95b6d2501976c82f2289b</anchor>
      <arglist>(int multiplier)</arglist>
    </member>
    <member kind="function">
      <name>multiplyAlpha</name>
      <anchor>ab22ea6de353812ecdaa0b58adea48fe3</anchor>
      <arglist>(const float multiplier)</arglist>
    </member>
    <member kind="function">
      <name>setARGB</name>
      <anchor>af3b4bdc0be0cb5c91cb66ff1ed3f0533</anchor>
      <arglist>(const uint8 a_, const uint8, const uint8, const uint8)</arglist>
    </member>
    <member kind="function">
      <name>premultiply</name>
      <anchor>af3df262733d4e65a04666a0f555c9603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unpremultiply</name>
      <anchor>abd32ab2dbc82afa0c5ed7ff4d5fedb0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>desaturate</name>
      <anchor>a839f2ab178c58e045eec5aba379c0ab7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PixelARGB</name>
    <filename>classPixelARGB.html</filename>
    <member kind="function">
      <name>@5</name>
      <anchor>a32df89efd0b16112ab12217ef5dfe5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ndexA</name>
      <anchor>a32df89efd0b16112ab12217ef5dfe5fbae2c758a6eebfdf52dde60687f68a68ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ndexR</name>
      <anchor>a32df89efd0b16112ab12217ef5dfe5fba5d38bdd8f5ffaa9917b6fff622ddb23f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ndexG</name>
      <anchor>a32df89efd0b16112ab12217ef5dfe5fba9f00e7f7cddc8b6d27053806abb1630a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ndexB</name>
      <anchor>a32df89efd0b16112ab12217ef5dfe5fba7eab5933695a1fcdfee5a25cb5ef60ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PixelARGB</name>
      <anchor>ad3c1fa4dee8bc6fcc6041e6edc8adf80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~PixelARGB</name>
      <anchor>a07e1c59b5175ffd144ca20c0c1f4d2ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PixelARGB</name>
      <anchor>a0d991427927ea84e5fa92e1be6b33bdc</anchor>
      <arglist>(const uint32 argb_)</arglist>
    </member>
    <member kind="function">
      <name>getARGB</name>
      <anchor>a526b3ae46cccfa0694b83cd40597a4d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRB</name>
      <anchor>a3c562f9c67db22e3d1b2a788bfdd6d28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAG</name>
      <anchor>a34a2b3ea700ec444b2fc7506df45269c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAlpha</name>
      <anchor>ade504640856ed51701358072e13bd01b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRed</name>
      <anchor>a6edeb48c7cf7dbfbdd6849a27db6536f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getGreen</name>
      <anchor>ab9bd61436a767471c00446445f47c3ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBlue</name>
      <anchor>ac90a8e7decf40b27854e2343747efdbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>blend</name>
      <anchor>a3844a58c574af8101d429081be5372f7</anchor>
      <arglist>(const PixelARGB &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>blend</name>
      <anchor>ab600789b0b37e0c3bd677393197afc7d</anchor>
      <arglist>(const PixelAlpha &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>blend</name>
      <anchor>a6a96177431888094cfc36c4c4d2b101e</anchor>
      <arglist>(const PixelRGB &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>blend</name>
      <anchor>aa9ee3b66c0b37821cbf77962c062e516</anchor>
      <arglist>(const Pixel &amp;src, uint32 extraAlpha)</arglist>
    </member>
    <member kind="function">
      <name>tween</name>
      <anchor>ad9a5653add4599cb9447b02145dd36c8</anchor>
      <arglist>(const Pixel &amp;src, const uint32 amount)</arglist>
    </member>
    <member kind="function">
      <name>set</name>
      <anchor>a934da163afaa831c481deb1cfa8c3442</anchor>
      <arglist>(const Pixel &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>setAlpha</name>
      <anchor>aa388206de8b205c784499570635caadf</anchor>
      <arglist>(const uint8 newAlpha)</arglist>
    </member>
    <member kind="function">
      <name>multiplyAlpha</name>
      <anchor>ac4e76fe2721ed92217e734ea271d8296</anchor>
      <arglist>(int multiplier)</arglist>
    </member>
    <member kind="function">
      <name>multiplyAlpha</name>
      <anchor>a33f4e93b20627501f5983007a4b0285f</anchor>
      <arglist>(const float multiplier)</arglist>
    </member>
    <member kind="function">
      <name>setARGB</name>
      <anchor>a8860515b019ee3b24feaaa56da5268c8</anchor>
      <arglist>(const uint8 a, const uint8 r, const uint8 g, const uint8 b)</arglist>
    </member>
    <member kind="function">
      <name>premultiply</name>
      <anchor>a0dfcf1ad909156882b2fe353c4b740af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unpremultiply</name>
      <anchor>a99a6c148110b1129231b88cf19185f28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>desaturate</name>
      <anchor>a7662fccce339dd18c00022b2ae3c9616</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>argb</name>
      <anchor>ac9d2f6638200b9edec4f50f23ecaabdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>b</name>
      <anchor>ae9aa8132ff77179f1a533ba0329c512e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>g</name>
      <anchor>ac4ee5a151c69412f761f3b2f06a1b47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>r</name>
      <anchor>a3f668be28d770417ac88e65223f4aa23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>a</name>
      <anchor>a3308bd4c22fa4efdbe525c6328eab662</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>components</name>
      <anchor>a6b4e9994e1a5061f5879fa9de947461f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PixelRGB</name>
    <filename>classPixelRGB.html</filename>
    <member kind="function">
      <name>@9</name>
      <anchor>a9a48e245f98306471df3cf47997c9648</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ndexR</name>
      <anchor>a9a48e245f98306471df3cf47997c9648a2725faa86a75bea4242137ab8b9fb128</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ndexG</name>
      <anchor>a9a48e245f98306471df3cf47997c9648ae889bdfe358ad3b6395e1bf584e198f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ndexB</name>
      <anchor>a9a48e245f98306471df3cf47997c9648a59222359427902da4ec4353ee7d7c431</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PixelRGB</name>
      <anchor>a4c2de35e3961d96c324d41db43a83111</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~PixelRGB</name>
      <anchor>ab6079ff44d0d5303a8aa363f4a1c0609</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PixelRGB</name>
      <anchor>a2fa90c4ea41502b8b481619e607c32bc</anchor>
      <arglist>(const uint32 argb)</arglist>
    </member>
    <member kind="function">
      <name>getARGB</name>
      <anchor>a115b6ac4f4507a48105ccdff427e9596</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRB</name>
      <anchor>a467141539341d191730e14806563689f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAG</name>
      <anchor>aaffdb5836ef97ed81e570e70eef7a2da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAlpha</name>
      <anchor>ae97f34953b9a72507c3ece26d732bda0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRed</name>
      <anchor>a4dcaeb244f743f82e4a99de3233a3272</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getGreen</name>
      <anchor>ae5432d457aaf5ff6114a6293befec2b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBlue</name>
      <anchor>a70e627856b7eb41e406fa2b557f95c6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>blend</name>
      <anchor>af70b60d68d633688c7da978952f08214</anchor>
      <arglist>(const PixelARGB &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>blend</name>
      <anchor>a109b130b736321415d2dbcda7a71ad89</anchor>
      <arglist>(const PixelRGB &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>blend</name>
      <anchor>a79b4479b4e262ade8d39ca2cf672b57e</anchor>
      <arglist>(const PixelAlpha &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>blend</name>
      <anchor>a92c8729ee2df462e8449ed42c5421b90</anchor>
      <arglist>(const Pixel &amp;src, uint32 extraAlpha)</arglist>
    </member>
    <member kind="function">
      <name>tween</name>
      <anchor>a1826fe45d04725a53d64a8503a325491</anchor>
      <arglist>(const Pixel &amp;src, const uint32 amount)</arglist>
    </member>
    <member kind="function">
      <name>set</name>
      <anchor>ac06b5deedbd1597794de4f07d67fc732</anchor>
      <arglist>(const Pixel &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>setAlpha</name>
      <anchor>ad38923843367711f582eafe55533d1e7</anchor>
      <arglist>(const uint8)</arglist>
    </member>
    <member kind="function">
      <name>multiplyAlpha</name>
      <anchor>ad83c24711f9ce73a9be00a5516c6adcf</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>setARGB</name>
      <anchor>a94a2b846768f7ec25ff3ea4f4a3685cf</anchor>
      <arglist>(const uint8, const uint8 r_, const uint8 g_, const uint8 b_)</arglist>
    </member>
    <member kind="function">
      <name>premultiply</name>
      <anchor>a93b460b71ca5aa248698de08959b1c34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unpremultiply</name>
      <anchor>a13813ca76b06e15ebbc3f9f34e6255d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>desaturate</name>
      <anchor>aa72c872a3fc9887341b13c162fffc399</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlatformUtilities</name>
    <filename>classPlatformUtilities.html</filename>
    <member kind="function">
      <name>beep</name>
      <anchor>a527e0e3d88fbe4cc32348176789fa9f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>launchEmailWithAttachments</name>
      <anchor>a8707030453aa5a20fabdb8d43dc6297c</anchor>
      <arglist>(const String &amp;targetEmailAddress, const String &amp;emailSubject, const String &amp;bodyText, const StringArray &amp;filesToAttach)</arglist>
    </member>
    <member kind="function">
      <name>cfStringToJuceString</name>
      <anchor>afd9284f5c3f0bf37d50444ae59cac76b</anchor>
      <arglist>(CFStringRef cfString)</arglist>
    </member>
    <member kind="function">
      <name>juceStringToCFString</name>
      <anchor>aaf21fbf1726f467b220e2c841f9da07d</anchor>
      <arglist>(const String &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>makeFSRefFromPath</name>
      <anchor>a52ec12b627a8d92bf7fa0786e5b08a68</anchor>
      <arglist>(FSRef *destFSRef, const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <name>makePathFromFSRef</name>
      <anchor>a502292a04758cce5fc9b1d20a1ff52a4</anchor>
      <arglist>(FSRef *file)</arglist>
    </member>
    <member kind="function">
      <name>convertToPrecomposedUnicode</name>
      <anchor>ac18f626548680775f7ccb127d3c81d18</anchor>
      <arglist>(const String &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>getTypeOfFile</name>
      <anchor>abdb20fcc2c2b66059c9534f4f57d6b10</anchor>
      <arglist>(const String &amp;filename)</arglist>
    </member>
    <member kind="function">
      <name>isBundle</name>
      <anchor>adc201d2f3dc968a4d46ae37b186ff51b</anchor>
      <arglist>(const String &amp;filename)</arglist>
    </member>
    <member kind="function">
      <name>addItemToDock</name>
      <anchor>a199875af60494ba1d34433b34dfc43e5</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <name>getOSXMinorVersionNumber</name>
      <anchor>a5ed9d091599b08d5085809fe126a47ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getRegistryValue</name>
      <anchor>a779f01f68d0855974699106ec5d2da91</anchor>
      <arglist>(const String &amp;regValuePath, const String &amp;defaultValue=String::empty)</arglist>
    </member>
    <member kind="function">
      <name>setRegistryValue</name>
      <anchor>a9a9afaf9a77bb186061403088be3c89d</anchor>
      <arglist>(const String &amp;regValuePath, const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>registryValueExists</name>
      <anchor>ab8cffc0fd9bf0a10c75720aa404466be</anchor>
      <arglist>(const String &amp;regValuePath)</arglist>
    </member>
    <member kind="function">
      <name>deleteRegistryValue</name>
      <anchor>a511264cbf0b4ae74434b7aa087190150</anchor>
      <arglist>(const String &amp;regValuePath)</arglist>
    </member>
    <member kind="function">
      <name>deleteRegistryKey</name>
      <anchor>a5504c024254c92410564bd28eedfe2bd</anchor>
      <arglist>(const String &amp;regKeyPath)</arglist>
    </member>
    <member kind="function">
      <name>registerFileAssociation</name>
      <anchor>a3acfa61bba24bf91af3f1c8863527032</anchor>
      <arglist>(const String &amp;fileExtension, const String &amp;symbolicDescription, const String &amp;fullDescription, const File &amp;targetExecutable, int iconResourceNumber)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentModuleInstanceHandle</name>
      <anchor>a6b83df10d6ce101360909834da96f566</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCurrentModuleInstanceHandle</name>
      <anchor>af9d704fdeb9e3851f978988242ea5046</anchor>
      <arglist>(void *newHandle)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentCommandLineParams</name>
      <anchor>ad17529aebcf910fef45a483f4a3330b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fpuReset</name>
      <anchor>a4790482d96aca51bc0d6a2d419398bcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>loadDynamicLibrary</name>
      <anchor>aa7c28324e1604c2c8e3e3e6306c367bc</anchor>
      <arglist>(const String &amp;pathOrFilename)</arglist>
    </member>
    <member kind="function">
      <name>freeDynamicLibrary</name>
      <anchor>afbeb9927a7ac8840485aec56c722a14e</anchor>
      <arglist>(void *libraryHandle)</arglist>
    </member>
    <member kind="function">
      <name>getProcedureEntryPoint</name>
      <anchor>af78f743dc78b6da1b7e41e4478e591b6</anchor>
      <arglist>(void *libraryHandle, const String &amp;procedureName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginDescription</name>
    <filename>classPluginDescription.html</filename>
    <member kind="function">
      <name>PluginDescription</name>
      <anchor>a494fe1c041359c47d40f8211ae7c9729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PluginDescription</name>
      <anchor>a11a5a158654b97b3606c1e103af113fe</anchor>
      <arglist>(const PluginDescription &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~PluginDescription</name>
      <anchor>a730e10660aab4aa5ec0ca483180db481</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a982fea38b2787923c696556c3d5cdc2a</anchor>
      <arglist>(const PluginDescription &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>isDuplicateOf</name>
      <anchor>ad92a173ac6878934071fe6e9a9ad1d03</anchor>
      <arglist>(const PluginDescription &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>createIdentifierString</name>
      <anchor>a05a6e4eaeac9a967a16d391e29ff1a56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createXml</name>
      <anchor>a4e23eb3d5d991893aec610dbf2b1072b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>loadFromXml</name>
      <anchor>a5fae3bea93cc8398b3c114dfd52bfd42</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>aea9757db9385b9398598bb65f07667fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pluginFormatName</name>
      <anchor>a619a03af08e3904725e0255a28388a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>category</name>
      <anchor>a744b7d9bd85c5b670905ce6c411fa815</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>manufacturerName</name>
      <anchor>aa8c02c784dc999a1043877b29795fff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>version</name>
      <anchor>ad5d55de3c1ad1646e5cc49d04e5c41e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>fileOrIdentifier</name>
      <anchor>a067e44c64faac07ff146f65b375cec22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lastFileModTime</name>
      <anchor>aa7143b1df0c657008ab9f3f196e63471</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uid</name>
      <anchor>a6bddaeaf4147bb0827c18724cbc7bd4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>isInstrument</name>
      <anchor>ada0d12fe7d191f7cd315721f7b965720</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numInputChannels</name>
      <anchor>aae10fb65ec4fcbfcf35aed5d46b98932</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numOutputChannels</name>
      <anchor>a3b04bfe9e7ede6557b7de388c70a8888</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginDirectoryScanner</name>
    <filename>classPluginDirectoryScanner.html</filename>
    <member kind="function">
      <name>PluginDirectoryScanner</name>
      <anchor>af945acd58828079d587de38019064d51</anchor>
      <arglist>(KnownPluginList &amp;listToAddResultsTo, AudioPluginFormat &amp;formatToLookFor, FileSearchPath directoriesToSearch, bool searchRecursively, const File &amp;deadMansPedalFile)</arglist>
    </member>
    <member kind="function">
      <name>~PluginDirectoryScanner</name>
      <anchor>af3132c1ed58ed03d255dde0e649f8be7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scanNextFile</name>
      <anchor>a15cc1a5bc08f4f30f56b8ac1f4dc383f</anchor>
      <arglist>(bool dontRescanIfAlreadyInList)</arglist>
    </member>
    <member kind="function">
      <name>getNextPluginFileThatWillBeScanned</name>
      <anchor>a30ca8a1a58c6a646aa61f3322b17406f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getProgress</name>
      <anchor>a21d26809a8f97109c1107557f7a43f24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFailedFiles</name>
      <anchor>a95c9b1955f9e8ff3862cb2372217501a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginListComponent</name>
    <base>Component</base>
    <base>ListBoxModel</base>
    <base>ChangeListener</base>
    <base>ButtonListener</base>
    <base>Timer</base>
    <filename>classPluginListComponent.html</filename>
    <member kind="function">
      <name>PluginListComponent</name>
      <anchor>a7c2a7e42374dad1122f10b846e0c0300</anchor>
      <arglist>(KnownPluginList &amp;listToRepresent, const File &amp;deadMansPedalFile, PropertiesFile *propertiesToUse)</arglist>
    </member>
    <member kind="function">
      <name>~PluginListComponent</name>
      <anchor>aef6c55ec27a6ab86d2d769ea5ce00b3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a661a3dd07efb9576e96ea0dc78a41103</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isInterestedInFileDrag</name>
      <anchor>ac71068b8820cdbd48baa8e7e9e60a28d</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function">
      <name>filesDropped</name>
      <anchor>a005665523248feee49ab88762b088845</anchor>
      <arglist>(const StringArray &amp;files, int, int)</arglist>
    </member>
    <member kind="function">
      <name>getNumRows</name>
      <anchor>a8a3b252f0a937a869f3e8af44a5f732d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintListBoxItem</name>
      <anchor>ae2f31b0437c719f4c221ba8f8f80635a</anchor>
      <arglist>(int row, Graphics &amp;g, int width, int height, bool rowIsSelected)</arglist>
    </member>
    <member kind="function">
      <name>deleteKeyPressed</name>
      <anchor>abbeef0c29cb282137f45c7d43380fc39</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>a551b949b5105889a5176ed8a9330b8d7</anchor>
      <arglist>(Button *b)</arglist>
    </member>
    <member kind="function">
      <name>changeListenerCallback</name>
      <anchor>afaec431be5508694aa766f0fd654f8db</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <name>timerCallback</name>
      <anchor>a1998e5422916377d2c19c13627c60d85</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PNGImageFormat</name>
    <base>ImageFileFormat</base>
    <filename>classPNGImageFormat.html</filename>
    <member kind="function">
      <name>PNGImageFormat</name>
      <anchor>a4db2e108ed60a66f02dee961912772ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~PNGImageFormat</name>
      <anchor>a00158061cea93fadc82821591bba8d8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFormatName</name>
      <anchor>a72b4e3db5791d957d34227464a6c0a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canUnderstand</name>
      <anchor>a898aeff02c886e2a26ddfffe2dbe7eee</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <name>decodeImage</name>
      <anchor>afe89b863d6935fd12fe6c0125cb5835d</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <name>writeImageToStream</name>
      <anchor>ae2dcd3a90cf8d395e1d6cf43c0d09fdc</anchor>
      <arglist>(const Image &amp;sourceImage, OutputStream &amp;destStream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Point</name>
    <filename>classPoint.html</filename>
    <member kind="function">
      <name>Point</name>
      <anchor>a5d3a90d318972034b57d1ed22636abff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Point</name>
      <anchor>a3d946282518089277e7a1ba2ed195676</anchor>
      <arglist>(const Point &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Point</name>
      <anchor>a47a02538378be7ac587e14655c606d16</anchor>
      <arglist>(const ValueType initialX, const ValueType initialY)</arglist>
    </member>
    <member kind="function">
      <name>~Point</name>
      <anchor>a8b60b380271322e57d4f3963f35b4d4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>acf9b907a5b2374505b15d514efbfcb8a</anchor>
      <arglist>(const Point &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>getX</name>
      <anchor>a6bd45a9e85f40509f60419877e07c0aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getY</name>
      <anchor>a2f2178628ce73a259b336cfa0d2df28a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>adcfa81231dd61df35e0b0b7b7eef9849</anchor>
      <arglist>(const Point &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>afdee0bbd88a00690bee6d66fbe4a58f6</anchor>
      <arglist>(const Point &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>isOrigin</name>
      <anchor>a73505edfac68759b007d100e214cb8eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setXY</name>
      <anchor>a64b087bb543024e454d889ed8e924ecc</anchor>
      <arglist>(const ValueType newX, const ValueType newY)</arglist>
    </member>
    <member kind="function">
      <name>addXY</name>
      <anchor>aa7d803188a84867f67faca7d3616afbe</anchor>
      <arglist>(const ValueType xToAdd, const ValueType yToAdd)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>a6fe576d69d8ac8d12ae9d8c56c41a113</anchor>
      <arglist>(const Point &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>a8c17ec78ae942df75d48569f511ee12f</anchor>
      <arglist>(const Point &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;</name>
      <anchor>a8202e805e7a139eee3b66327daf32727</anchor>
      <arglist>(const Point &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;=</name>
      <anchor>a5162de7850f6258589354a09d28973a3</anchor>
      <arglist>(const Point &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;</name>
      <anchor>a89cdccfd4ec38f9857078b4cb8c11d1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDistanceFrom</name>
      <anchor>a58ffd1fb0159cd546f11b7a2061d8a93</anchor>
      <arglist>(const Point &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>applyTransform</name>
      <anchor>a961bddd7a3712abd804e467014afdfe1</anchor>
      <arglist>(const AffineTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>aaa27747b1b92c81184766a43191062bc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PopupMenu</name>
    <filename>classPopupMenu.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a0888091ddab0f599bb9d2fab28153f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>a0888091ddab0f599bb9d2fab28153f6baf598840a9e3f2137df45179367323b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>a0888091ddab0f599bb9d2fab28153f6ba00636235348246a1bd2bad0cb66f307a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eaderTextColourId</name>
      <anchor>a0888091ddab0f599bb9d2fab28153f6ba964cf665c7c5a26b63866e537e9bfed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ighlightedBackgroundColourId</name>
      <anchor>a0888091ddab0f599bb9d2fab28153f6ba6a9ce95ec115c9def5903d25b5ed2f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ighlightedTextColourId</name>
      <anchor>a0888091ddab0f599bb9d2fab28153f6ba1ec81989e7186fa2dff6b57bb057f834</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PopupMenu</name>
      <anchor>a75f519bff4ab374bf2e00fe5d93f96f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PopupMenu</name>
      <anchor>ac5b1738cc16508249628b174e6827522</anchor>
      <arglist>(const PopupMenu &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~PopupMenu</name>
      <anchor>aabdf2cc11c5e3cb57049041c459082fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a89e61dea91a2f6e943cf7e4a2ae09bae</anchor>
      <arglist>(const PopupMenu &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>ab4af03082fd727b395481a64ad940654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>acb01b149ea7f7e9b1e732299c431d49f</anchor>
      <arglist>(int itemResultId, const String &amp;itemText, bool isActive=true, bool isTicked=false, const Image *iconToUse=0)</arglist>
    </member>
    <member kind="function">
      <name>addCommandItem</name>
      <anchor>a5b76a06d3eafc98921e99461d88b57ba</anchor>
      <arglist>(ApplicationCommandManager *commandManager, int commandID, const String &amp;displayName=String::empty)</arglist>
    </member>
    <member kind="function">
      <name>addColouredItem</name>
      <anchor>ad6663d0778ee1e73631bb71bbd5694cf</anchor>
      <arglist>(int itemResultId, const String &amp;itemText, const Colour &amp;itemTextColour, bool isActive=true, bool isTicked=false, const Image *iconToUse=0)</arglist>
    </member>
    <member kind="function">
      <name>addCustomItem</name>
      <anchor>a672a490a6e499e79218c921a1a918d7f</anchor>
      <arglist>(int itemResultId, PopupMenuCustomComponent *customComponent)</arglist>
    </member>
    <member kind="function">
      <name>addCustomItem</name>
      <anchor>aa46db86411df083f051bc0f16ff6c53b</anchor>
      <arglist>(int itemResultId, Component *customComponent, int idealWidth, int idealHeight, bool triggerMenuItemAutomaticallyWhenClicked)</arglist>
    </member>
    <member kind="function">
      <name>addSubMenu</name>
      <anchor>a87260c5bb1d5ce2c3e9ec0e18e17736a</anchor>
      <arglist>(const String &amp;subMenuName, const PopupMenu &amp;subMenu, bool isActive=true, Image *iconToUse=0, bool isTicked=false)</arglist>
    </member>
    <member kind="function">
      <name>addSeparator</name>
      <anchor>a9c411d5c29fe887e4e961a402dd43944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addSectionHeader</name>
      <anchor>ab41473f7b9ca9bb4a1e6ad13c5d24ec0</anchor>
      <arglist>(const String &amp;title)</arglist>
    </member>
    <member kind="function">
      <name>getNumItems</name>
      <anchor>a0d6750c0e46bbd3dfa83f06e229605cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>containsCommandItem</name>
      <anchor>a4f31eae38d8b51bb8ea6717e5e2a42ee</anchor>
      <arglist>(int commandID) const </arglist>
    </member>
    <member kind="function">
      <name>containsAnyActiveItems</name>
      <anchor>a23cc588cc7c01ceab879211a79929caf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>show</name>
      <anchor>a55e537276585145aa4b3ad0153b91019</anchor>
      <arglist>(int itemIdThatMustBeVisible=0, int minimumWidth=0, int maximumNumColumns=0, int standardItemHeight=0)</arglist>
    </member>
    <member kind="function">
      <name>showAt</name>
      <anchor>a25d98cc19f6e378e8c135b7667be89d0</anchor>
      <arglist>(int screenX, int screenY, int itemIdThatMustBeVisible=0, int minimumWidth=0, int maximumNumColumns=0, int standardItemHeight=0)</arglist>
    </member>
    <member kind="function">
      <name>showAt</name>
      <anchor>a5ce38bd675b1934bbd103c4d1004aaf5</anchor>
      <arglist>(Component *componentToAttachTo, int itemIdThatMustBeVisible=0, int minimumWidth=0, int maximumNumColumns=0, int standardItemHeight=0)</arglist>
    </member>
    <member kind="function">
      <name>dismissAllActiveMenus</name>
      <anchor>a80e3d7c9de2f55920f5b4a6eebe5d6e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setLookAndFeel</name>
      <anchor>a449653121fdc2a2b7f3e77d663266d00</anchor>
      <arglist>(LookAndFeel *newLookAndFeel)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PopupMenu::MenuItemIterator</name>
    <filename>classPopupMenu_1_1MenuItemIterator.html</filename>
    <member kind="function">
      <name>MenuItemIterator::MenuItemIterator</name>
      <anchor>a34b8540e94b2b0c91c08d6ae31c08feb</anchor>
      <arglist>(const PopupMenu &amp;menu)</arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::~MenuItemIterator</name>
      <anchor>afd9c761456a9b68530278866b5dffae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::next</name>
      <anchor>abac12feb2943d217501fc92d4a6009a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::itemName</name>
      <anchor>a75e8d47cfdf5781ff07a08b4838d15e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::subMenu</name>
      <anchor>afb6d899fe8d2ac3244c81df9c5f41868</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::itemId</name>
      <anchor>ab696747fd973bc5c35afe47906ed98c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::isSeparator</name>
      <anchor>a045bdc21c4ad9b8911e0ac2c421c1d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::isTicked</name>
      <anchor>a9e22397470a1baaf9834faad6738585a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::isEnabled</name>
      <anchor>aea11ebbb2a4b53e733a53364bf706270</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::isCustomComponent</name>
      <anchor>a01ff00f5ed747469652ab57f7baba10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::isSectionHeader</name>
      <anchor>adbb4b8e329bc0ab1836c4d9d2fadb915</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::customColour</name>
      <anchor>ab69ce90b18c954507602611d43bf9543</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::customImage</name>
      <anchor>a748ef8b508b9d3afd6020bded83ecc03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MenuItemIterator::commandManager</name>
      <anchor>aaef3a6f46c6e2986d8878d4f6dd799d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PopupMenuCustomComponent</name>
    <base>Component</base>
    <base>ReferenceCountedObject</base>
    <filename>classPopupMenuCustomComponent.html</filename>
    <member kind="function">
      <name>~PopupMenuCustomComponent</name>
      <anchor>a8e1d94a307a001a6cb96318575716664</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PopupMenuCustomComponent</name>
      <anchor>ab757c2a8f3623128d7ad6cbe22f88fff</anchor>
      <arglist>(bool isTriggeredAutomatically=true)</arglist>
    </member>
    <member kind="function">
      <name>getIdealSize</name>
      <anchor>a6b8dc31dfb2f06e86b3588de009b5bde</anchor>
      <arglist>(int &amp;idealWidth, int &amp;idealHeight)=0</arglist>
    </member>
    <member kind="function">
      <name>triggerMenuItem</name>
      <anchor>a2da65a36cb0e47a0f43b9f7f502fa7e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isItemHighlighted</name>
      <anchor>a9014a387d143cbd6bdb62f103c77502e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PositionableAudioSource</name>
    <base>AudioSource</base>
    <filename>classPositionableAudioSource.html</filename>
    <member kind="function">
      <name>PositionableAudioSource</name>
      <anchor>aaafb1cb5d247bcb42072e3b4cc1ab34d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~PositionableAudioSource</name>
      <anchor>aa81c6f032ae672549050b0985a665cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setNextReadPosition</name>
      <anchor>ad18b022d7cfc492317aae6471e7e513b</anchor>
      <arglist>(int newPosition)=0</arglist>
    </member>
    <member kind="function">
      <name>getNextReadPosition</name>
      <anchor>ab511fc078f6156bb84a80040147c0d1c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>getTotalLength</name>
      <anchor>aa256527f58a2d40542adf2ff29465996</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>isLooping</name>
      <anchor>a4e59a6b4cfcfb6e8afeea42c25379849</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PositionedGlyph</name>
    <filename>classPositionedGlyph.html</filename>
    <member kind="function">
      <name>getCharacter</name>
      <anchor>a55e3a1bb9f6055996aa60b8dd59ac73a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isWhitespace</name>
      <anchor>af5eafa4be29449bf3ab82f6a98028f11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLeft</name>
      <anchor>aa4e7eb336734164d77bac76cece6573c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRight</name>
      <anchor>ab63ce4ac679fb1389cfd7cfe12bffc10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBaselineY</name>
      <anchor>a06cc50a1b8a9e6efb6ef1cdf296fa0e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTop</name>
      <anchor>a9e15e717afc304cc88fb0235ca02ad70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBottom</name>
      <anchor>a9a29497b36fe35bc422acc57a3d292dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBounds</name>
      <anchor>ad826492d3fa5825b61e5b2a65e25facd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>moveBy</name>
      <anchor>a798015c7bca78e38eea27249e74ff1ca</anchor>
      <arglist>(float deltaX, float deltaY)</arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>a1654c29086fb4624b3fb2142cd435f89</anchor>
      <arglist>(const Graphics &amp;g) const </arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>a374c1e157eb015cc7f13c3fdbe8aaf09</anchor>
      <arglist>(const Graphics &amp;g, const AffineTransform &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <name>createPath</name>
      <anchor>ad4e15d194800b4448c0f176970d1a655</anchor>
      <arglist>(Path &amp;path) const </arglist>
    </member>
    <member kind="function">
      <name>hitTest</name>
      <anchor>ac9649bacb9137536e12ed2052d05ce49</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PositionedRectangle</name>
    <filename>classPositionedRectangle.html</filename>
    <member kind="function">
      <name>AnchorPoint</name>
      <anchor>a7a45055f21a535aa39ba598688ff18eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nchorAtLeftOrTop</name>
      <anchor>a7a45055f21a535aa39ba598688ff18eba08867959fac39b1c6268bdb6fa5e0cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nchorAtRightOrBottom</name>
      <anchor>a7a45055f21a535aa39ba598688ff18eba70de87089ea237d171f2c9f21c07b5ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nchorAtCentre</name>
      <anchor>a7a45055f21a535aa39ba598688ff18ebae35fddf6b2a49612fdecf5b86b6b1f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PositionMode</name>
      <anchor>ad3b8f48813d9784698fc7970e08f29aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bsoluteFromParentTopLeft</name>
      <anchor>ad3b8f48813d9784698fc7970e08f29aaa7d6694928988221d00a3a3afb5a8d792</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bsoluteFromParentBottomRight</name>
      <anchor>ad3b8f48813d9784698fc7970e08f29aaa904ca968013beca003806a2d959d4f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bsoluteFromParentCentre</name>
      <anchor>ad3b8f48813d9784698fc7970e08f29aaade04797017cd4faefaa89eabeeb749e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>roportionOfParentSize</name>
      <anchor>ad3b8f48813d9784698fc7970e08f29aaa4cff225eae44001d966dcf47fe08ebfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeMode</name>
      <anchor>aa9604ed66feece973e43d0fed468ec78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bsoluteSize</name>
      <anchor>aa9604ed66feece973e43d0fed468ec78a4846a4d89cd6de5c38f590124d8cf3a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>arentSizeMinusAbsolute</name>
      <anchor>aa9604ed66feece973e43d0fed468ec78a393bee4532adf9312f520a19d9220fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>roportionalSize</name>
      <anchor>aa9604ed66feece973e43d0fed468ec78a46ee52033582ab1528a784891d0f1ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PositionedRectangle</name>
      <anchor>a93fc8e41c493e3c2e39e943df160d9f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PositionedRectangle</name>
      <anchor>a2f027ed2e8ada12cf9d8f49bdb152080</anchor>
      <arglist>(const String &amp;stringVersion)</arglist>
    </member>
    <member kind="function">
      <name>PositionedRectangle</name>
      <anchor>a061b2cf795846ff8461bdb3370aac63e</anchor>
      <arglist>(const PositionedRectangle &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~PositionedRectangle</name>
      <anchor>a3af3cfe7b4c47e0a53e31aacdd5bb540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a85a0284b1534b81c88ead3f8918fdec5</anchor>
      <arglist>(const PositionedRectangle &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>aedfb5c029c837912fe87fe51a6c994d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRectangle</name>
      <anchor>adf4e1d127d99fa49c1a26a00883435cb</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;targetSpaceToBeRelativeTo) const </arglist>
    </member>
    <member kind="function">
      <name>getRectangleDouble</name>
      <anchor>ac66346a64aac311dc92e42925cde4a13</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;targetSpaceToBeRelativeTo, double &amp;x, double &amp;y, double &amp;width, double &amp;height) const </arglist>
    </member>
    <member kind="function">
      <name>applyToComponent</name>
      <anchor>ac471867bdc482f8da18027a5a20c680a</anchor>
      <arglist>(Component &amp;comp) const </arglist>
    </member>
    <member kind="function">
      <name>updateFrom</name>
      <anchor>a3969ad8b0a0800e7009ef89ce64b7836</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newPosition, const Rectangle&lt; int &gt; &amp;targetSpaceToBeRelativeTo)</arglist>
    </member>
    <member kind="function">
      <name>updateFromDouble</name>
      <anchor>a6ddc37a65c88fae96a179b21c96043e5</anchor>
      <arglist>(double x, double y, double width, double height, const Rectangle&lt; int &gt; &amp;targetSpaceToBeRelativeTo)</arglist>
    </member>
    <member kind="function">
      <name>updateFromComponent</name>
      <anchor>a58b7ddfbe02ae1a22ee68c04c374c810</anchor>
      <arglist>(const Component &amp;comp)</arglist>
    </member>
    <member kind="function">
      <name>setModes</name>
      <anchor>abce5984a392dff6a8205cb5c9f250c06</anchor>
      <arglist>(const AnchorPoint xAnchorMode, const PositionMode xPositionMode, const AnchorPoint yAnchorMode, const PositionMode yPositionMode, const SizeMode widthMode, const SizeMode heightMode, const Rectangle&lt; int &gt; &amp;targetSpaceToBeRelativeTo)</arglist>
    </member>
    <member kind="function">
      <name>getAnchorPointX</name>
      <anchor>a0ff25299e34d9eec7bd217348fcd03dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getPositionModeX</name>
      <anchor>a817fbacf95a75ae35a9ea3c8da86aa8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getX</name>
      <anchor>adb554f53b1963518c70dc4d880de9bdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setX</name>
      <anchor>ad0a43581a3813c865d6536a7ad22fdf4</anchor>
      <arglist>(const double newX)</arglist>
    </member>
    <member kind="function">
      <name>getAnchorPointY</name>
      <anchor>a81b258294b9011e48ce3717ad283a6c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getPositionModeY</name>
      <anchor>a54f9b05d20fcc2e72d1e5d595095db4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getY</name>
      <anchor>a6eeeab68550d48e83eb8038200770b39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setY</name>
      <anchor>a0cc1d3940cae5c888189dfa403a4d782</anchor>
      <arglist>(const double newY)</arglist>
    </member>
    <member kind="function">
      <name>getWidthMode</name>
      <anchor>af287eacbc6323b99c1de4a5f4743c987</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getWidth</name>
      <anchor>a23f6aa5d23370369e6cd4d134dbd0837</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>a99a689de014054a276bea53fa3a902d9</anchor>
      <arglist>(const double newWidth)</arglist>
    </member>
    <member kind="function">
      <name>getHeightMode</name>
      <anchor>aadef3c42e0eb2971d01e1ba8800b06de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHeight</name>
      <anchor>abe96c28abec6a1c1d837211973e5513a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setHeight</name>
      <anchor>a2b931dd4e73ce917226bdcc69cde3a5c</anchor>
      <arglist>(const double newHeight)</arglist>
    </member>
    <member kind="function">
      <name>isPositionAbsolute</name>
      <anchor>a5b3f19928df623002375417b5d8c2f7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a30a0ccd5a721d5bed0d76a311f9c2268</anchor>
      <arglist>(const PositionedRectangle &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a37f20dd3c36a302a9fb70c613c1678ad</anchor>
      <arglist>(const PositionedRectangle &amp;other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PreferencesPanel</name>
    <base>Component</base>
    <base>ButtonListener</base>
    <filename>classPreferencesPanel.html</filename>
    <member kind="function">
      <name>PreferencesPanel</name>
      <anchor>a06f7a3b4fb49f4ac96961cf8d23b5baf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~PreferencesPanel</name>
      <anchor>a8abacfd2931eecd7935f6160e6004a30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addSettingsPage</name>
      <anchor>ab01ab7aead6da192a57857ab89a381ad</anchor>
      <arglist>(const String &amp;pageTitle, const Drawable *normalIcon, const Drawable *overIcon, const Drawable *downIcon)</arglist>
    </member>
    <member kind="function">
      <name>addSettingsPage</name>
      <anchor>a911dba36cf079a8cc1e46c9c27c92fa4</anchor>
      <arglist>(const String &amp;pageTitle, const char *imageData, int imageDataSize)</arglist>
    </member>
    <member kind="function">
      <name>showInDialogBox</name>
      <anchor>afc699925e4e5cb4d92062ae9de80c998</anchor>
      <arglist>(const String &amp;dialogtitle, int dialogWidth, int dialogHeight, const Colour &amp;backgroundColour=Colours::white)</arglist>
    </member>
    <member kind="function">
      <name>createComponentForPage</name>
      <anchor>a8ab89869d859f9ef7493f5bdf10ee9aa</anchor>
      <arglist>(const String &amp;pageName)=0</arglist>
    </member>
    <member kind="function">
      <name>setCurrentPage</name>
      <anchor>ab29e97b5c691d7104831393fd81e9de1</anchor>
      <arglist>(const String &amp;pageName)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a6cf34a120677e1cf553843083dc42d51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>aeba5e31cfcdb8558639a3510a7fb8194</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>ac39141bc52cd0e632f03b60e799e2ce7</anchor>
      <arglist>(Button *button)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Primes</name>
    <filename>classPrimes.html</filename>
    <member kind="function">
      <name>createProbablePrime</name>
      <anchor>a4bec64e79354912be1bf32493303fe15</anchor>
      <arglist>(int bitLength, int certainty, const int *randomSeeds=0, int numRandomSeeds=0)</arglist>
    </member>
    <member kind="function">
      <name>isProbablyPrime</name>
      <anchor>a7c44c5417163632b7d207f9c94270c4e</anchor>
      <arglist>(const BigInteger &amp;number, int certainty)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Process</name>
    <filename>classProcess.html</filename>
    <member kind="function">
      <name>ProcessPriority</name>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>owPriority</name>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6efad7f3e46785b41d6d5db5e7afab065281</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ormalPriority</name>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6efab8355050d1e4ef5af4c057abc20259be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ighPriority</name>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6efaa72f09a6d0e30d394c6fe7095372a711</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ealtimePriority</name>
      <anchor>ad7b18ceb7a8c0a2b6b71856894feb6efa1ab071c1d49e25fc1df3c9663177927e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>setPriority</name>
      <anchor>a5df93ffa82753982119a033d8a0018b8</anchor>
      <arglist>(const ProcessPriority priority)</arglist>
    </member>
    <member kind="function">
      <name>terminate</name>
      <anchor>a3b22cbfbc52842975770de5d3e3d96e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isForegroundProcess</name>
      <anchor>aabc25470371b03373c7b3ca0704b545e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>raisePrivilege</name>
      <anchor>aaa4816a26a8c37b9a84e63c6e3d2415f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lowerPrivilege</name>
      <anchor>ac1c5bf1ab8c9b7b4cdd88203bdc10102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRunningUnderDebugger</name>
      <anchor>a7a58a2b37beda4343bc1da6a8744ae12</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProgressBar</name>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>Timer</base>
    <filename>classProgressBar.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a3486234bde4b1095a948fea269635d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>a3486234bde4b1095a948fea269635d42a9c73104f0198a1a6e33c1a0135b4d310</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oregroundColourId</name>
      <anchor>a3486234bde4b1095a948fea269635d42a92bc4a65179b4e85dff89b628f5a6e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ProgressBar</name>
      <anchor>afe06d2a756619d38e007f1c3bb408f7a</anchor>
      <arglist>(double &amp;progress)</arglist>
    </member>
    <member kind="function">
      <name>~ProgressBar</name>
      <anchor>aa0ced60c0ade467a4602c35443e7bc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPercentageDisplay</name>
      <anchor>ab440a7baac49f111081ac38cfe8fd3e7</anchor>
      <arglist>(const bool shouldDisplayPercentage)</arglist>
    </member>
    <member kind="function">
      <name>setTextToDisplay</name>
      <anchor>a3487f138651d8bc5a29a2586d4862b55</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a1dd7253a47213468105b035f640a5233</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>lookAndFeelChanged</name>
      <anchor>aaba558f0f79da898c6140cf5ca6d9c88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>visibilityChanged</name>
      <anchor>a433f03dd95119512d097dd32c5befade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>a7623834d2858ad8024ce1a528b513def</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertiesFile</name>
    <base>PropertySet</base>
    <base>ChangeBroadcaster</base>
    <base>Timer</base>
    <filename>classPropertiesFile.html</filename>
    <member kind="function">
      <name>FileFormatOptions</name>
      <anchor>a47d6ed9be8d727b1d6cfa7c8b1dd8dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>gnoreCaseOfKeyNames</name>
      <anchor>a47d6ed9be8d727b1d6cfa7c8b1dd8dfaa40bda816c190e9d24c5e8f711bab1d8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>toreAsBinary</name>
      <anchor>a47d6ed9be8d727b1d6cfa7c8b1dd8dfaadd1552fd266d926522dfa0e162de5328</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>toreAsCompressedBinary</name>
      <anchor>a47d6ed9be8d727b1d6cfa7c8b1dd8dfaab1ddcaf9fc8d45b4141749e325844f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>toreAsXML</name>
      <anchor>a47d6ed9be8d727b1d6cfa7c8b1dd8dfaab0145370e12c4174bd36dc6ac6ccc147</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PropertiesFile</name>
      <anchor>af7f41570584b4254b16d3c3ae5197769</anchor>
      <arglist>(const File &amp;file, int millisecondsBeforeSaving, int optionFlags, InterProcessLock *processLock=0)</arglist>
    </member>
    <member kind="function">
      <name>~PropertiesFile</name>
      <anchor>a449b6cc48f72e8d14c73dd4ac9964635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValidFile</name>
      <anchor>ab47aef69a7728c5129607dfea22e04f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>saveIfNeeded</name>
      <anchor>a61b439f35faf3f1add5cdfdd49a85d49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>ad0c24e1809b203c8347ee07cfb599250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>needsToBeSaved</name>
      <anchor>af9e77e3bde952ed5face05c19cd51ed4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setNeedsToBeSaved</name>
      <anchor>a205cb3e66cef5d064578dc22b8b205cb</anchor>
      <arglist>(bool needsToBeSaved)</arglist>
    </member>
    <member kind="function">
      <name>getFile</name>
      <anchor>a6c9f8af3b9dd4d3ff59ab96d5b571fd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createDefaultAppPropertiesFile</name>
      <anchor>a5d6c26d3ef20aea60d87068065f8b63c</anchor>
      <arglist>(const String &amp;applicationName, const String &amp;fileNameSuffix, const String &amp;folderName, bool commonToAllUsers, int millisecondsBeforeSaving, int propertiesFileOptions, InterProcessLock *processLock=0)</arglist>
    </member>
    <member kind="function">
      <name>getDefaultAppSettingsFile</name>
      <anchor>ac625ee111d5f5477fe0ddd263fe8ae57</anchor>
      <arglist>(const String &amp;applicationName, const String &amp;fileNameSuffix, const String &amp;folderName, bool commonToAllUsers)</arglist>
    </member>
    <member kind="function">
      <name>propertyChanged</name>
      <anchor>a2f54f9f82dbe5def4f0fc53c412979a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertyComponent</name>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <filename>classPropertyComponent.html</filename>
    <member kind="function">
      <name>PropertyComponent</name>
      <anchor>abcc554f33995e1b424ac1a0858198f21</anchor>
      <arglist>(const String &amp;propertyName, int preferredHeight=25)</arglist>
    </member>
    <member kind="function">
      <name>~PropertyComponent</name>
      <anchor>a34f299f31134464667b23ff94d5afd2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPreferredHeight</name>
      <anchor>aa3656300e91706424e2395cdfe7a6ec4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setPreferredHeight</name>
      <anchor>ad96c58fd9396e7e9057cd77e0ddbe40a</anchor>
      <arglist>(int newHeight)</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>a0ce62ead3836df49c63e253cf33f83c0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>add0bd23deef904e26b2cedb497c5a00c</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a223695b8e2bdf8bbf9b0e843d51a72ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enablementChanged</name>
      <anchor>a94e2ff9e536a12d68aa95f12b6f34e54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>preferredHeight</name>
      <anchor>ae912e7f6c12e76cf3dc2a9f0d210e4ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertyPanel</name>
    <base>Component</base>
    <filename>classPropertyPanel.html</filename>
    <member kind="function">
      <name>PropertyPanel</name>
      <anchor>a765b12e87a55fc10508a6ce1933a7951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~PropertyPanel</name>
      <anchor>a54f029a1fc11eebd39945592c021032c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>aaf4d011fa44b1c1ae69f3837df967c30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addProperties</name>
      <anchor>a304e2a044d426e027a3b98856f83fcde</anchor>
      <arglist>(const Array&lt; PropertyComponent * &gt; &amp;newPropertyComponents)</arglist>
    </member>
    <member kind="function">
      <name>addSection</name>
      <anchor>a55ed5f17f69921324a75c32c9540f4d8</anchor>
      <arglist>(const String &amp;sectionTitle, const Array&lt; PropertyComponent * &gt; &amp;newPropertyComponents, bool shouldSectionInitiallyBeOpen=true)</arglist>
    </member>
    <member kind="function">
      <name>refreshAll</name>
      <anchor>a4879227d607dc41ac4f767f27299570c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSectionNames</name>
      <anchor>a94557cb8651c0aea494c62a68c146c4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isSectionOpen</name>
      <anchor>a1e6203d3944d38363567f171e79eb4d7</anchor>
      <arglist>(int sectionIndex) const </arglist>
    </member>
    <member kind="function">
      <name>setSectionOpen</name>
      <anchor>ab16be3f10d266c39eb68eefff0c5d7c7</anchor>
      <arglist>(int sectionIndex, bool shouldBeOpen)</arglist>
    </member>
    <member kind="function">
      <name>setSectionEnabled</name>
      <anchor>a1fe2441419859069d012425dd137dc47</anchor>
      <arglist>(int sectionIndex, bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <name>getOpennessState</name>
      <anchor>a64d64045e5da843e3c4b159adec28420</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>restoreOpennessState</name>
      <anchor>aed72746ba6c25b392fa70dd3af4a60bd</anchor>
      <arglist>(const XmlElement &amp;newState)</arglist>
    </member>
    <member kind="function">
      <name>setMessageWhenEmpty</name>
      <anchor>a0f20bbec2111121821004b62634baf21</anchor>
      <arglist>(const String &amp;newMessage)</arglist>
    </member>
    <member kind="function">
      <name>getMessageWhenEmpty</name>
      <anchor>ae9189da1201b13604026aecf257e6f9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a870b8c8ff9857d80722ba0bb9a822b57</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a32fc62ba32120f2bc4d3d40aef701640</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertySet</name>
    <filename>classPropertySet.html</filename>
    <member kind="function">
      <name>PropertySet</name>
      <anchor>a9435f82c13a318f3cbfe01c4a460a31d</anchor>
      <arglist>(const bool ignoreCaseOfKeyNames=false)</arglist>
    </member>
    <member kind="function">
      <name>PropertySet</name>
      <anchor>a85f11257e712b1fc4074a9e2dbc24e71</anchor>
      <arglist>(const PropertySet &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~PropertySet</name>
      <anchor>a9243fb6fb5a71e6795f3bbda95f009e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a11163a300c9d6d483f073f9e004fe89b</anchor>
      <arglist>(const PropertySet &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>getValue</name>
      <anchor>a25cea4553e5ce3886c990d9b94f9421c</anchor>
      <arglist>(const String &amp;keyName, const String &amp;defaultReturnValue=String::empty) const </arglist>
    </member>
    <member kind="function">
      <name>getIntValue</name>
      <anchor>ac4edbc17d63a2fa81d52ebbf59e7ac8d</anchor>
      <arglist>(const String &amp;keyName, const int defaultReturnValue=0) const </arglist>
    </member>
    <member kind="function">
      <name>getDoubleValue</name>
      <anchor>a754ce2fb41227e40ae28a071beb89c72</anchor>
      <arglist>(const String &amp;keyName, const double defaultReturnValue=0.0) const </arglist>
    </member>
    <member kind="function">
      <name>getBoolValue</name>
      <anchor>acc98ad931ae9d457be09c3e0774b597b</anchor>
      <arglist>(const String &amp;keyName, const bool defaultReturnValue=false) const </arglist>
    </member>
    <member kind="function">
      <name>getXmlValue</name>
      <anchor>a9dbf8f8da046721e1a28e513b7c21004</anchor>
      <arglist>(const String &amp;keyName) const </arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>a353a46ca64ea6626b8233f64e2941b40</anchor>
      <arglist>(const String &amp;keyName, const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>a3367c1abb08b7c1aa741384d42e2409d</anchor>
      <arglist>(const String &amp;keyName, const int value)</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>a6a8dd29ed0ce907343395cb008a47038</anchor>
      <arglist>(const String &amp;keyName, const double value)</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>a3b615ce6ed61f6d64b565eaad704ecfc</anchor>
      <arglist>(const String &amp;keyName, const bool value)</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>a0ef3715e530a5ea2de3164dc05520b2d</anchor>
      <arglist>(const String &amp;keyName, const XmlElement *const xml)</arglist>
    </member>
    <member kind="function">
      <name>removeValue</name>
      <anchor>a98cfaa19583819e6fcae0dda8ff49ba8</anchor>
      <arglist>(const String &amp;keyName)</arglist>
    </member>
    <member kind="function">
      <name>containsKey</name>
      <anchor>adb394b8d30972623541994f6c54cec2c</anchor>
      <arglist>(const String &amp;keyName) const </arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a17bc35d7608a5dcce584d2eace3096d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getAllProperties</name>
      <anchor>a40d42d9f35bfd1751f990835f5f9b1b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getLock</name>
      <anchor>a83d364b79f42debe00a6dda2a6f900db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createXml</name>
      <anchor>ae2fa02a9f1a1d41c0b32fc5d0c4e31fb</anchor>
      <arglist>(const String &amp;nodeName) const </arglist>
    </member>
    <member kind="function">
      <name>restoreFromXml</name>
      <anchor>aeb4db0338ee4d9d121427990306d8101</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="function">
      <name>setFallbackPropertySet</name>
      <anchor>a196ae19dc67a7bf8dee0d94c1bb3fe4e</anchor>
      <arglist>(PropertySet *fallbackProperties)</arglist>
    </member>
    <member kind="function">
      <name>getFallbackPropertySet</name>
      <anchor>a7f183e0cdc39e1efcbec360586b682ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>propertyChanged</name>
      <anchor>a1f7586bf00529d3981f4576a44a6d4b0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuickTimeMovieComponent</name>
    <base>NSViewComponent</base>
    <filename>classQuickTimeMovieComponent.html</filename>
    <member kind="function">
      <name>QuickTimeMovieComponent</name>
      <anchor>affdb8f0235f6256d8330c4d336818ea7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~QuickTimeMovieComponent</name>
      <anchor>ad9544fe017c34bf3f8c57b8b17bcd5f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isQuickTimeAvailable</name>
      <anchor>a3a0a10c28da2389cc4bfdc6f74cbde74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>loadMovie</name>
      <anchor>af5ad86dd1c238eba1b350f849dddd297</anchor>
      <arglist>(const File &amp;movieFile, bool isControllerVisible)</arglist>
    </member>
    <member kind="function">
      <name>loadMovie</name>
      <anchor>a7d9e0e14943e239e941506b62e85b412</anchor>
      <arglist>(const URL &amp;movieURL, bool isControllerVisible)</arglist>
    </member>
    <member kind="function">
      <name>loadMovie</name>
      <anchor>ae322fa999f66f292cfdc820675cec6a1</anchor>
      <arglist>(InputStream *movieStream, bool isControllerVisible)</arglist>
    </member>
    <member kind="function">
      <name>closeMovie</name>
      <anchor>a2c5b3eb61e7b700e776f7751142404d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCurrentMovieFile</name>
      <anchor>ab314aaacd7955e1e0bc3ad0d35aa1481</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isMovieOpen</name>
      <anchor>a6c02b21654dfb79d4caa475a0cba2bf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMovieDuration</name>
      <anchor>ad0e80d03d8f81bc749c5fb2725b48df0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMovieNormalSize</name>
      <anchor>a48b1a2bca7e10f365096933eb392f25b</anchor>
      <arglist>(int &amp;width, int &amp;height) const </arglist>
    </member>
    <member kind="function">
      <name>setBoundsWithCorrectAspectRatio</name>
      <anchor>ad886c1052ff746bc1f906880b2280111</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;spaceToFitWithin, const RectanglePlacement &amp;placement)</arglist>
    </member>
    <member kind="function">
      <name>play</name>
      <anchor>a414a24a5fc5ceb0316a5f0a4db4949c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>a72c16a9fa545bfbb6f6a1b91aa42397b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isPlaying</name>
      <anchor>a5a4d08fb8a56f446ef12208f43bad432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>goToStart</name>
      <anchor>adc3f68a11f3443403a1b7ae33d0e9dc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>aa00c45eb934fc6606314039475742d2f</anchor>
      <arglist>(double seconds)</arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>a59488ced8277c90b53c0e66061ba9bb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setSpeed</name>
      <anchor>a270f3d77ddf38d0d913b00e5e01bd08f</anchor>
      <arglist>(float newSpeed)</arglist>
    </member>
    <member kind="function">
      <name>setMovieVolume</name>
      <anchor>a205e05453c0231a6c7cadfe543e8a634</anchor>
      <arglist>(float newVolume)</arglist>
    </member>
    <member kind="function">
      <name>getMovieVolume</name>
      <anchor>a3d6f4e0f46be3c4aad6812a075e7a140</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setLooping</name>
      <anchor>ae2f15e35b4bb67a08f6bb15531618dd1</anchor>
      <arglist>(bool shouldLoop)</arglist>
    </member>
    <member kind="function">
      <name>isLooping</name>
      <anchor>ae0045796fb46b2c8b771638274c37925</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isControllerVisible</name>
      <anchor>a9c03bfcb38de3e4aae653f0b9f193b9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a4008dc9d5480b7720d3118957eae44a1</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Random</name>
    <filename>classRandom.html</filename>
    <member kind="function">
      <name>Random</name>
      <anchor>a68ccdc4fc2d2e116be46744569ed79e5</anchor>
      <arglist>(int64 seedValue)</arglist>
    </member>
    <member kind="function">
      <name>~Random</name>
      <anchor>ac0d4eaf1f32df4600eb321cb8dbc0c55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextInt</name>
      <anchor>a9bfcc0f42641d00b19223b6606b222a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextInt</name>
      <anchor>a477cfdd1479236ad9cd200f5ba6712cd</anchor>
      <arglist>(int maxValue)</arglist>
    </member>
    <member kind="function">
      <name>nextInt64</name>
      <anchor>a2c297d1683df3e753d81f101254a31f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextFloat</name>
      <anchor>a77c91b72bbe093e047eb0a48293d4bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextDouble</name>
      <anchor>a6e166c55d24d29105e1aca6ebcf0ec2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextBool</name>
      <anchor>a678b4ac9afa50e6b5c22bba4d419c035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextLargeNumber</name>
      <anchor>ab603190f339b1991d9fbbdac168cb24a</anchor>
      <arglist>(const BigInteger &amp;maximumValue)</arglist>
    </member>
    <member kind="function">
      <name>fillBitsRandomly</name>
      <anchor>a212bf60fe480e13ea468ba4db1de3329</anchor>
      <arglist>(BigInteger &amp;arrayToChange, int startBit, int numBits)</arglist>
    </member>
    <member kind="function">
      <name>getSystemRandom</name>
      <anchor>a280dadfd6d0748da5916a1741623eb9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSeed</name>
      <anchor>a4258f688e3a0dfae3b06167887a48413</anchor>
      <arglist>(int64 newSeed)</arglist>
    </member>
    <member kind="function">
      <name>combineSeed</name>
      <anchor>a5d6369c2c8a272012819d3b0470ddca2</anchor>
      <arglist>(int64 seedValue)</arglist>
    </member>
    <member kind="function">
      <name>setSeedRandomly</name>
      <anchor>a2b697677bd4fef05082e7c036366289d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Range</name>
    <filename>classRange.html</filename>
    <member kind="function">
      <name>Range</name>
      <anchor>abbd2e891c41f7cb40c60ff5fcfa89c42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Range</name>
      <anchor>a1a289217572b8e72ceb480a307d0a02b</anchor>
      <arglist>(const ValueType start_, const ValueType end_)</arglist>
    </member>
    <member kind="function">
      <name>Range</name>
      <anchor>a3a802f8494c7193a3fe9e195958f8759</anchor>
      <arglist>(const Range &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~Range</name>
      <anchor>ae6e5e14082b4aea25b6387f431d699f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a5985a6be08f629ec936de00272e0fbd8</anchor>
      <arglist>(const Range &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>between</name>
      <anchor>ad27e3af4adc7a5294f535042e367285b</anchor>
      <arglist>(const ValueType position1, const ValueType position2)</arglist>
    </member>
    <member kind="function">
      <name>emptyRange</name>
      <anchor>a3f8963b2aa207a936b3e37b76b1e8780</anchor>
      <arglist>(const ValueType start)</arglist>
    </member>
    <member kind="function">
      <name>getStart</name>
      <anchor>a55050a2aed486dff5dbd99df4c31f9bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLength</name>
      <anchor>a274b44edd6a7e3970b5710698d960b30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getEnd</name>
      <anchor>ac96a996427e5f6dd54a4a66189dd0c01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>a52c6825bedfd16f439b0e77ef7530076</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setStart</name>
      <anchor>a8987f88672f35ca6dc85a3806e9e9897</anchor>
      <arglist>(const ValueType newStart)</arglist>
    </member>
    <member kind="function">
      <name>withStart</name>
      <anchor>a2c62d29747ed132948f1767dfb908ae9</anchor>
      <arglist>(const ValueType newStart) const </arglist>
    </member>
    <member kind="function">
      <name>movedToStartAt</name>
      <anchor>ae8ed4bdce84619805bd168f750b6432d</anchor>
      <arglist>(const ValueType newStart) const </arglist>
    </member>
    <member kind="function">
      <name>setEnd</name>
      <anchor>a6af99229272cb195bf6949b7b6a7a10b</anchor>
      <arglist>(const ValueType newEnd)</arglist>
    </member>
    <member kind="function">
      <name>withEnd</name>
      <anchor>a378f15ff3943351966d57ad589f37aa4</anchor>
      <arglist>(const ValueType newEnd) const </arglist>
    </member>
    <member kind="function">
      <name>movedToEndAt</name>
      <anchor>a049713fcde144c3b34e40f7665b48162</anchor>
      <arglist>(const ValueType newEnd) const </arglist>
    </member>
    <member kind="function">
      <name>setLength</name>
      <anchor>a554b2a7c334d5aadb467356070637872</anchor>
      <arglist>(const ValueType newLength)</arglist>
    </member>
    <member kind="function">
      <name>withLength</name>
      <anchor>ae6b848e24bfc5ef839d0a437981cdc34</anchor>
      <arglist>(const ValueType newLength) const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>a677d3c7a1ec886708f3eac66f71e9e80</anchor>
      <arglist>(const ValueType amountToAdd)</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;=</name>
      <anchor>a6ddd346d7c66187a1b74aacb2d8e40aa</anchor>
      <arglist>(const ValueType amountToSubtract)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>a069f9d0504366420dabea9060fe7cb78</anchor>
      <arglist>(const ValueType amountToAdd) const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;</name>
      <anchor>a15958d78c1c52a77660a6802c8929c3c</anchor>
      <arglist>(const ValueType amountToSubtract) const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a886ebc0ab129de293055dec747b8f5ad</anchor>
      <arglist>(const Range &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a506e5f362f1dec931ac577c5c27cfdf7</anchor>
      <arglist>(const Range &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>ab482c1755ffd52d0655abfe37b197fbf</anchor>
      <arglist>(const ValueType position) const </arglist>
    </member>
    <member kind="function">
      <name>clipValue</name>
      <anchor>ac938482fc56f2aedacc5336889bce6b7</anchor>
      <arglist>(const ValueType value) const </arglist>
    </member>
    <member kind="function">
      <name>intersects</name>
      <anchor>af79736950b70c223cccafda883b2faed</anchor>
      <arglist>(const Range &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>getIntersectionWith</name>
      <anchor>a0a51e40a637381cb9b3c945f4c046be2</anchor>
      <arglist>(const Range &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>getUnionWith</name>
      <anchor>a504113921b8a6adffe966abe0f42be85</anchor>
      <arglist>(const Range &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>constrainRange</name>
      <anchor>a6c50abbe7f40d9b6e1b791451b774f23</anchor>
      <arglist>(const Range &amp;rangeToConstrain) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadWriteLock</name>
    <filename>classReadWriteLock.html</filename>
    <member kind="function">
      <name>ReadWriteLock</name>
      <anchor>a6717282a541aca49a6c1df7968fef3de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ReadWriteLock</name>
      <anchor>a09a4e382675ac3d576a5f93393a7a6b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enterRead</name>
      <anchor>a48f3af8ac8639da0aff40a71acb04730</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>exitRead</name>
      <anchor>a1a284e5970b42851561bfc226fc1be9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>enterWrite</name>
      <anchor>a52a5bcec5ca7db9e009effe1c0de2e7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>tryEnterWrite</name>
      <anchor>a21571fdf3bff5d699f0510930a5b2ad0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>exitWrite</name>
      <anchor>ab6d07938a0b3cb613502efffc5364057</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RecentlyOpenedFilesList</name>
    <filename>classRecentlyOpenedFilesList.html</filename>
    <member kind="function">
      <name>RecentlyOpenedFilesList</name>
      <anchor>a1be25db49e1770f3f294121d7a407537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~RecentlyOpenedFilesList</name>
      <anchor>afdd6264636158fdecd942bc522336dd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMaxNumberOfItems</name>
      <anchor>aa022b3b01d6d0af7c9ef63ce543924d3</anchor>
      <arglist>(int newMaxNumber)</arglist>
    </member>
    <member kind="function">
      <name>getMaxNumberOfItems</name>
      <anchor>a2aaeb999f358e34f55f35a9052e2d0e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumFiles</name>
      <anchor>af8ee782e0440ed9c9ecb1c7f199268bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFile</name>
      <anchor>a9fe4e7db5d5967391b88e25e6be749f2</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getAllFilenames</name>
      <anchor>a0b2b2251a9722d82d6cce0aa3d64b411</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>aefd50d336abfb51a10ea37dc55362848</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addFile</name>
      <anchor>a06acf3ddf28eb9ac3bb71d66adfadc11</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <name>removeNonExistentFiles</name>
      <anchor>abd9dfb078ad5a95455c2db116b4d7c8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createPopupMenuItems</name>
      <anchor>a0543fe5a83ffbfc5f22ae2d0f3e06f4f</anchor>
      <arglist>(PopupMenu &amp;menuToAddItemsTo, int baseItemId, bool showFullPaths, bool dontAddNonExistentFiles, const File **filesToAvoid=0)</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>af04b9383628307a6c1ef0cad658cb68d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>restoreFromString</name>
      <anchor>ac1c8310d4a13cba8c0b7168b980e7e09</anchor>
      <arglist>(const String &amp;stringifiedVersion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Rectangle</name>
    <filename>classRectangle.html</filename>
    <member kind="function">
      <name>Rectangle</name>
      <anchor>af63194474316b1fc6f95784a207c86ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Rectangle</name>
      <anchor>a8ecf08f3d3ffc9301786bd6362d0918d</anchor>
      <arglist>(const Rectangle &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Rectangle</name>
      <anchor>a1319726f0423d027dbb83684599dedb0</anchor>
      <arglist>(const ValueType initialX, const ValueType initialY, const ValueType width, const ValueType height)</arglist>
    </member>
    <member kind="function">
      <name>Rectangle</name>
      <anchor>a54553fd1a60390e0280e6a2c2e126892</anchor>
      <arglist>(const ValueType width, const ValueType height)</arglist>
    </member>
    <member kind="function">
      <name>Rectangle</name>
      <anchor>a2df05b9a85ee7d9d10d0d3792d25e446</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;corner1, const Point&lt; ValueType &gt; &amp;corner2)</arglist>
    </member>
    <member kind="function">
      <name>~Rectangle</name>
      <anchor>a97c5ee8bc3c47d42bed7f10644e8c501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>aae337e76cfa071d58e4a2884c4823de9</anchor>
      <arglist>(const Rectangle &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>af754f64d2d291b502068c0e9a62f29a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getX</name>
      <anchor>ab987dea85a7cd58fab2aca14509cb1df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getY</name>
      <anchor>abdf0b214f1bff870e9e7948df57f1177</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getWidth</name>
      <anchor>ae71ede6e7396ced661df04a3c596570a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHeight</name>
      <anchor>afaff0ba9ca783fe77c6df0f19a18b18b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRight</name>
      <anchor>ab42dac2b4c4e3b616bd890fd64283864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBottom</name>
      <anchor>afbd6911e90e69e97788d7391291385fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCentreX</name>
      <anchor>a38117be625be4217475256c5f7ba8e0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCentreY</name>
      <anchor>a201d0cef5e323b5337e06a64dcb48ce9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCentre</name>
      <anchor>acc79f8e4a52402f592e2726b6dfaf6d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAspectRatio</name>
      <anchor>a1e0a081577bd08efd83cac85face0106</anchor>
      <arglist>(const bool widthOverHeight=true) const </arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>adc2f94042aea7efb55cf16f6d5e2524e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>a061788ceedb8852b62b602959f314424</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;newPos)</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>a1122627b2e0f137e97d7a7d433878d50</anchor>
      <arglist>(const ValueType newX, const ValueType newY)</arglist>
    </member>
    <member kind="function">
      <name>withPosition</name>
      <anchor>abca0daaabb78ea12b772dffa076ed375</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;newPos) const </arglist>
    </member>
    <member kind="function">
      <name>setSize</name>
      <anchor>a7b5ee24df585d288befcef728dd440bb</anchor>
      <arglist>(const ValueType newWidth, const ValueType newHeight)</arglist>
    </member>
    <member kind="function">
      <name>withSize</name>
      <anchor>aa767d694b1e8d8585f363a424faa38d8</anchor>
      <arglist>(const ValueType newWidth, const ValueType newHeight) const </arglist>
    </member>
    <member kind="function">
      <name>setBounds</name>
      <anchor>a53b8b00f30ae42aa6a4e941e1a3025a5</anchor>
      <arglist>(const ValueType newX, const ValueType newY, const ValueType newWidth, const ValueType newHeight)</arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>aa3a92738a847d79db08f4fdf58a876e1</anchor>
      <arglist>(const ValueType newWidth)</arglist>
    </member>
    <member kind="function">
      <name>setHeight</name>
      <anchor>a734eec7336db152a4e3ba1e15c82ae5a</anchor>
      <arglist>(const ValueType newHeight)</arglist>
    </member>
    <member kind="function">
      <name>setLeft</name>
      <anchor>ab14e5bd5e09672bc6245b708c898f9e9</anchor>
      <arglist>(const ValueType newLeft)</arglist>
    </member>
    <member kind="function">
      <name>setTop</name>
      <anchor>ab5e07ead596856fbb43f2a1f2a3461c9</anchor>
      <arglist>(const ValueType newTop)</arglist>
    </member>
    <member kind="function">
      <name>setRight</name>
      <anchor>a65e7e6acce382910793ceda3eb57f206</anchor>
      <arglist>(const ValueType newRight)</arglist>
    </member>
    <member kind="function">
      <name>setBottom</name>
      <anchor>af99ec7ec3f62e4d4eda07295cb39f9d0</anchor>
      <arglist>(const ValueType newBottom)</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>af8bfc23406927d075e56177446b803b0</anchor>
      <arglist>(const ValueType deltaX, const ValueType deltaY)</arglist>
    </member>
    <member kind="function">
      <name>translated</name>
      <anchor>aaf9a8e9028542700920e0e196bf0c976</anchor>
      <arglist>(const ValueType deltaX, const ValueType deltaY) const </arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>ae4992e72977a33eb499c4811633a32cb</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;deltaPosition) const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;</name>
      <anchor>aff719bf336ebb8c8d22ae5d22fc751a2</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;deltaPosition) const </arglist>
    </member>
    <member kind="function">
      <name>expand</name>
      <anchor>ab8a5d629c3c9a561c58857af7d61b5f7</anchor>
      <arglist>(const ValueType deltaX, const ValueType deltaY)</arglist>
    </member>
    <member kind="function">
      <name>expanded</name>
      <anchor>a89d0cc43a0e7d792fbe502766a830316</anchor>
      <arglist>(const ValueType deltaX, const ValueType deltaY) const </arglist>
    </member>
    <member kind="function">
      <name>reduce</name>
      <anchor>a2001a7487f78a90f5a69a4691a53f0a2</anchor>
      <arglist>(const ValueType deltaX, const ValueType deltaY)</arglist>
    </member>
    <member kind="function">
      <name>reduced</name>
      <anchor>a891f87a2e270640ce06c0d76980b0c18</anchor>
      <arglist>(const ValueType deltaX, const ValueType deltaY) const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a6786240f6e2f4e052ee42285b021e25e</anchor>
      <arglist>(const Rectangle &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>ac977c6847ce2b4d49b1c855061afd241</anchor>
      <arglist>(const Rectangle &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>a6331b8849440274e66942262e26bc792</anchor>
      <arglist>(const ValueType xCoord, const ValueType yCoord) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>a881059022230812d61fec3b46cb276c6</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;point) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>a31fc53fd683f076b94850ce1d51df7a8</anchor>
      <arglist>(const Rectangle &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>getConstrainedPoint</name>
      <anchor>aa8d07e5c27f853be3318c5cba06993e9</anchor>
      <arglist>(const Point&lt; ValueType &gt; &amp;point) const </arglist>
    </member>
    <member kind="function">
      <name>intersects</name>
      <anchor>ab5dedc55a34344bd5907e3e1b4bdff3a</anchor>
      <arglist>(const Rectangle &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>getIntersection</name>
      <anchor>a168634e1cd4e73ade93e7f033a6db50a</anchor>
      <arglist>(const Rectangle &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>intersectRectangle</name>
      <anchor>a93c230c0f19bfc5e3f5a49dbd42972af</anchor>
      <arglist>(ValueType &amp;otherX, ValueType &amp;otherY, ValueType &amp;otherW, ValueType &amp;otherH) const </arglist>
    </member>
    <member kind="function">
      <name>getUnion</name>
      <anchor>a456d82e1adee81dabeec162537ec8b2c</anchor>
      <arglist>(const Rectangle &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>enlargeIfAdjacent</name>
      <anchor>a29a3de84097d3eb6076b987422b8ff5d</anchor>
      <arglist>(const Rectangle &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>reduceIfPartlyContainedIn</name>
      <anchor>a676809eb937f4c0de96f75d556386d51</anchor>
      <arglist>(const Rectangle &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>transformed</name>
      <anchor>abfcf69e139e4a6c389a1d1075a71bb37</anchor>
      <arglist>(const AffineTransform &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <name>getSmallestIntegerContainer</name>
      <anchor>acc1cece3c9a4fb4ec67212fce88b74ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>toFloat</name>
      <anchor>acdee5717628e688baa2fc2d98495c93c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>intersectRectangles</name>
      <anchor>a10e686766a98380fd63525d9ca6ffe93</anchor>
      <arglist>(ValueType &amp;x1, ValueType &amp;y1, ValueType &amp;w1, ValueType &amp;h1, const ValueType x2, const ValueType y2, const ValueType w2, const ValueType h2)</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>afe301bdf5c6c757b7c54519ba6a2405d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>fromString</name>
      <anchor>a782cea7d0f1396939c2f62cd5a6fc856</anchor>
      <arglist>(const String &amp;stringVersion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleList</name>
    <filename>classRectangleList.html</filename>
    <member kind="function">
      <name>RectangleList</name>
      <anchor>aae15e040b6346ff4075db9e4eca91941</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RectangleList</name>
      <anchor>a0ae1a74271a47a5630210aebf873e899</anchor>
      <arglist>(const RectangleList &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>RectangleList</name>
      <anchor>a5719565ccdf8a5d6226b76c5db6d316b</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <name>~RectangleList</name>
      <anchor>ae5fd08d0c262225635d9016f7bfa5360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ada1a34c855b3710a47ab6127b38c9f22</anchor>
      <arglist>(const RectangleList &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>a4090843fe516e64c67209a15a3a7ce01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumRectangles</name>
      <anchor>a3cc10dcc98508d56f40f101df8650cc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRectangle</name>
      <anchor>a70952b6aa17625a1e9b7d870b66ed3a5</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a9e5973d238266c4230f02ac37db8bf52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>acc20cb620fe58f85ab24c25c84b7ff2f</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>a8a01f9c8b2530b465b76e1bf9556bbca</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <name>addWithoutMerging</name>
      <anchor>ac6b46bf77b0d13fadacece1d712f56d8</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>a567ec13612153e22d9dd37e721fff48e</anchor>
      <arglist>(const RectangleList &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>subtract</name>
      <anchor>afb236b90b645436b30bed41a2d5d59d8</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <name>subtract</name>
      <anchor>a279f7a38dbc1786e050c4ea6b3eb537a</anchor>
      <arglist>(const RectangleList &amp;otherList)</arglist>
    </member>
    <member kind="function">
      <name>clipTo</name>
      <anchor>a608183aa941b4825fe10a58673b7b58d</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <name>clipTo</name>
      <anchor>a2adc353c63d00e507a71914f2778c930</anchor>
      <arglist>(const RectangleList &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>getIntersectionWith</name>
      <anchor>a6738e0378ffc0fa514270f6ae20722eb</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rect, RectangleList &amp;destRegion) const </arglist>
    </member>
    <member kind="function">
      <name>swapWith</name>
      <anchor>a884950a796669a482fd3f8093c55e37b</anchor>
      <arglist>(RectangleList &amp;otherList)</arglist>
    </member>
    <member kind="function">
      <name>containsPoint</name>
      <anchor>aa18c67b579a1181802d2729ab518cc7d</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <name>containsRectangle</name>
      <anchor>a4008b493f77bc4e901604289127e50c8</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangleToCheck) const </arglist>
    </member>
    <member kind="function">
      <name>intersectsRectangle</name>
      <anchor>a10ec9a4726816b70b6d49259bb814a86</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;rectangleToCheck) const </arglist>
    </member>
    <member kind="function">
      <name>intersects</name>
      <anchor>ae6c76cfab1c03120f794e58ab1494803</anchor>
      <arglist>(const RectangleList &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>getBounds</name>
      <anchor>a73e87441667fbca780a530adeb66011f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>consolidate</name>
      <anchor>a686a33633161c4bfa4f9edb8b006ef5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>offsetAll</name>
      <anchor>a3cfb808fa4f6f04744729f987f958835</anchor>
      <arglist>(int dx, int dy)</arglist>
    </member>
    <member kind="function">
      <name>toPath</name>
      <anchor>ac075f03d0687fdbd9fb20cf2487cc359</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleList::Iterator</name>
    <filename>classRectangleList_1_1Iterator.html</filename>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>afdcdd7a7a0442d6d7efa20b45fb3b7b0</anchor>
      <arglist>(const RectangleList &amp;list)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::~Iterator</name>
      <anchor>af57babfc6ca0fd242c0dfecb18b1f2b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::next</name>
      <anchor>a2fbe2c7a9f92b6b95ee68b74e5ea1384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::getRectangle</name>
      <anchor>a8bd138e6e8da904b1bc3c2f219e1fbd5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectanglePlacement</name>
    <filename>classRectanglePlacement.html</filename>
    <member kind="function">
      <name>@12</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Left</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842cae2539f35e48e3c7396cffeb8079e27dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Right</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca72a92773894d10ec3b4ff55b56d08915</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Mid</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842cad1348e06780084037a29fc0621d10392</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Top</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca1b650115227b059f9eb2c07ecdfcb3ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Bottom</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca467435011959541ca61cc362640db547</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Mid</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca8bfb9c8cceb359b4f00a9839168a7769</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tretchToFit</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca592b34ff9ad1d85db16f2e02c6252b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>illDestination</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842caace05e9cfe83bb3dbbef781d3622cd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nlyReduceInSize</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca32d2c8f0142b82c188af878548f4d238</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nlyIncreaseInSize</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca54aea49f09ca4f2ac6e5c81859067b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oNotResize</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842ca1b4035a6dd90fd7ecf4b2014f33bf16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>entred</name>
      <anchor>aa57d215a0f6418947d8b45ba039c842cadf52ee04f4f43cfcc6049d49833dd946</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RectanglePlacement</name>
      <anchor>a859efbbe045ef5bfc6a412743d35db13</anchor>
      <arglist>(int flags_)</arglist>
    </member>
    <member kind="function">
      <name>RectanglePlacement</name>
      <anchor>af84b98e32b608fbc3e7c60479779b055</anchor>
      <arglist>(const RectanglePlacement &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ac8825cf0010136994f17bd04f56af7e2</anchor>
      <arglist>(const RectanglePlacement &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>getFlags</name>
      <anchor>a84abf20e336e29de4bde1e03c2d1788c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>testFlags</name>
      <anchor>a43c45c90fb5c74a33c285937ac1c7400</anchor>
      <arglist>(int flagsToTest) const </arglist>
    </member>
    <member kind="function">
      <name>applyTo</name>
      <anchor>a650a0d69cbb301af03b7d56a2b1f96dd</anchor>
      <arglist>(double &amp;sourceX, double &amp;sourceY, double &amp;sourceW, double &amp;sourceH, double destinationX, double destinationY, double destinationW, double destinationH) const </arglist>
    </member>
    <member kind="function">
      <name>getTransformToFit</name>
      <anchor>a16f0f2f26208f5a0162d1dbaf2bf164b</anchor>
      <arglist>(float sourceX, float sourceY, float sourceW, float sourceH, float destinationX, float destinationY, float destinationW, float destinationH) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReduceOpacityEffect</name>
    <base>ImageEffectFilter</base>
    <filename>classReduceOpacityEffect.html</filename>
    <member kind="function">
      <name>ReduceOpacityEffect</name>
      <anchor>a357e4fe508bc1c9b17ecfd92c0291c18</anchor>
      <arglist>(const float opacity=1.0f)</arglist>
    </member>
    <member kind="function">
      <name>~ReduceOpacityEffect</name>
      <anchor>adc9c1757037cb5c5b950b3741d18d922</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setOpacity</name>
      <anchor>a5f0db3e1d510c5e73ce491c9b59df9b0</anchor>
      <arglist>(const float newOpacity)</arglist>
    </member>
    <member kind="function">
      <name>applyEffect</name>
      <anchor>a3e38b1a7354afc2903b627e558879680</anchor>
      <arglist>(Image &amp;sourceImage, Graphics &amp;destContext)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceCountedArray</name>
    <filename>classReferenceCountedArray.html</filename>
    <member kind="function">
      <name>ScopedLockType</name>
      <anchor>a7298683e2cae9520f1b34a4d6679053d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ReferenceCountedArray</name>
      <anchor>a87cbe9e0fe68edc087dabb25a7602d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ReferenceCountedArray</name>
      <anchor>a02872846b18f9292a62a7c740861750a</anchor>
      <arglist>(const ReferenceCountedArray&lt; ObjectClass, TypeOfCriticalSectionToUse &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~ReferenceCountedArray</name>
      <anchor>a22c778cc2086117da5ac870485cb34e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>aa2d554eb878ad5777e6750927ebbfb52</anchor>
      <arglist>(const ReferenceCountedArray&lt; ObjectClass, TypeOfCriticalSectionToUse &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a6dc6a1c3540a6f30456db545edb0486d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>a431f0f9fb07ab8d4683cca0aa283a82e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>a8aac7893d7988591f04612fac387a0c1</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>getUnchecked</name>
      <anchor>ada7f28d19828b083331d00a27e5c2bd9</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>getFirst</name>
      <anchor>acb0bdf0d16fd1279b29b67f2ca320e43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLast</name>
      <anchor>a4ee417e1ad61df04c4e016fdb59dbfdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>acb5cefeed75cb6326e4839e83c597253</anchor>
      <arglist>(const ObjectClass *const objectToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>af0ca1cd544402410dfa1f963ffc58bb6</anchor>
      <arglist>(const ObjectClass *const objectToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>adaecf755b5e47ef8b57f6b48ef4cf4a4</anchor>
      <arglist>(ObjectClass *const newObject)</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>af145a10f095f5c4a99b46e7f4296665e</anchor>
      <arglist>(int indexToInsertAt, ObjectClass *const newObject)</arglist>
    </member>
    <member kind="function">
      <name>addIfNotAlreadyThere</name>
      <anchor>a153ea6d455835d38252f3803c06d99d5</anchor>
      <arglist>(ObjectClass *const newObject)</arglist>
    </member>
    <member kind="function">
      <name>set</name>
      <anchor>ab091a80b766a24ba4915a10c1d71cd81</anchor>
      <arglist>(const int indexToChange, ObjectClass *const newObject)</arglist>
    </member>
    <member kind="function">
      <name>addArray</name>
      <anchor>a884a12225f5b2910c6d03c20e6c3e890</anchor>
      <arglist>(const ReferenceCountedArray&lt; ObjectClass, TypeOfCriticalSectionToUse &gt; &amp;arrayToAddFrom, int startIndex=0, int numElementsToAdd=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>addSorted</name>
      <anchor>a5f61c2d47f12c7768c7b62ded4b0d361</anchor>
      <arglist>(ElementComparator &amp;comparator, ObjectClass *newObject)</arglist>
    </member>
    <member kind="function">
      <name>addOrReplaceSorted</name>
      <anchor>a456950c02dddbcfcc6db619c38e5a7e0</anchor>
      <arglist>(ElementComparator &amp;comparator, ObjectClass *newObject)</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>aea193b7f41ffc381f1c12440f997ccdd</anchor>
      <arglist>(const int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <name>removeObject</name>
      <anchor>a3413cc68e78418918d69bf7ae132c894</anchor>
      <arglist>(ObjectClass *const objectToRemove)</arglist>
    </member>
    <member kind="function">
      <name>removeRange</name>
      <anchor>a9430ab8bb81848ef46507d2ed2eb40c2</anchor>
      <arglist>(const int startIndex, const int numberToRemove)</arglist>
    </member>
    <member kind="function">
      <name>removeLast</name>
      <anchor>a2f2ff002f4ca7a7062b449ade2b61307</anchor>
      <arglist>(int howManyToRemove=1)</arglist>
    </member>
    <member kind="function">
      <name>swap</name>
      <anchor>ae98b9c448bccd7f80e516123851eb9b4</anchor>
      <arglist>(const int index1, const int index2)</arglist>
    </member>
    <member kind="function">
      <name>move</name>
      <anchor>a555fc0e97f4299f3cbbe06c76a8e0e44</anchor>
      <arglist>(const int currentIndex, int newIndex)</arglist>
    </member>
    <member kind="function">
      <name>swapWithArray</name>
      <anchor>aae821f39a684102cd30ba62af9410eb8</anchor>
      <arglist>(ReferenceCountedArray &amp;otherArray)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a205d284e8f03d3ab5ba8e513257147c0</anchor>
      <arglist>(const ReferenceCountedArray &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a833d19e4a8bf20d3514a40436489c5c1</anchor>
      <arglist>(const ReferenceCountedArray&lt; ObjectClass, TypeOfCriticalSectionToUse &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>a5b552bfbd3f8dd10b1753c9155841953</anchor>
      <arglist>(ElementComparator &amp;comparator, const bool retainOrderOfEquivalentItems=false) const </arglist>
    </member>
    <member kind="function">
      <name>minimiseStorageOverheads</name>
      <anchor>ac50d3bfb2b4afc343a45f11d572a9016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getLock</name>
      <anchor>aa0e525f97c410d3d2dbef66159f82bcd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceCountedObject</name>
    <filename>classReferenceCountedObject.html</filename>
    <member kind="function">
      <name>ReferenceCountedObject</name>
      <anchor>a86c1a0791cb6e98e63f7c1f7812c6eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ReferenceCountedObject</name>
      <anchor>a7ed87d7f91e5ae51c620947c61291375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>incReferenceCount</name>
      <anchor>a2fd98d7c94d739b682d0e841d9d19362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>decReferenceCount</name>
      <anchor>ae50d64bbe43c51ae230fa54250dd1b75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getReferenceCount</name>
      <anchor>a576a83e30942c64a4e3cf4bee17989fe</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceCountedObjectPtr</name>
    <filename>classReferenceCountedObjectPtr.html</filename>
    <member kind="function">
      <name>ReferenceCountedObjectPtr</name>
      <anchor>abb9579c50927dd4f0a8a61c0c33a1bcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ReferenceCountedObjectPtr</name>
      <anchor>a2bbed2f8ee79be30a834f75ad1d03824</anchor>
      <arglist>(ReferenceCountedObjectClass *const refCountedObject)</arglist>
    </member>
    <member kind="function">
      <name>ReferenceCountedObjectPtr</name>
      <anchor>a5e2d17c4fc7d78f7ce3ef516e2581c2a</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~ReferenceCountedObjectPtr</name>
      <anchor>a90c9a9a2cf6e4767e2008b81ef9c8bca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a9be6712e3fc7f46dfc8bc6f13c6c786e</anchor>
      <arglist>(const ReferenceCountedObjectPtr&lt; ReferenceCountedObjectClass &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a8d4faea4ec46c6d8e8a9b5d39e62ba4d</anchor>
      <arglist>(ReferenceCountedObjectClass *const newObject)</arglist>
    </member>
    <member kind="function">
      <name>operator ReferenceCountedObjectClass *</name>
      <anchor>ab3befdb054921fb553cc2da7964cdf37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a72c67ab1c4579897e5fd7e74b9a04cac</anchor>
      <arglist>(ReferenceCountedObjectClass *const object) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a11cc07f50132c89fb39542e2458fc7a0</anchor>
      <arglist>(ReferenceCountedObjectClass *const object) const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;&gt;</name>
      <anchor>a86c5f76f4e22bd2b1d53571676e2ad7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getObject</name>
      <anchor>aed511dca958a01f1a32bfd8a44745494</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeTime</name>
    <filename>classRelativeTime.html</filename>
    <member kind="function">
      <name>RelativeTime</name>
      <anchor>a78b81b114c73e021eb34421eb60f8146</anchor>
      <arglist>(double seconds=0.0)</arglist>
    </member>
    <member kind="function">
      <name>RelativeTime</name>
      <anchor>a78800ee8af07643e6b75d67d56fb0931</anchor>
      <arglist>(const RelativeTime &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~RelativeTime</name>
      <anchor>a54f15042798caf4b01d9aee9d7bd2339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a298b11028672d73077da616b0a4a35b1</anchor>
      <arglist>(const RelativeTime &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>milliseconds</name>
      <anchor>ac2448ec15c6a3cb611a242c65e9ce6e6</anchor>
      <arglist>(int milliseconds)</arglist>
    </member>
    <member kind="function">
      <name>milliseconds</name>
      <anchor>ad2fb27a1410da10f825ec58981d9d546</anchor>
      <arglist>(int64 milliseconds)</arglist>
    </member>
    <member kind="function">
      <name>minutes</name>
      <anchor>aab6312041b5711c135b365650e9b8661</anchor>
      <arglist>(double numberOfMinutes)</arglist>
    </member>
    <member kind="function">
      <name>hours</name>
      <anchor>a5c9f71cdd68e558739f9902e6aedb195</anchor>
      <arglist>(double numberOfHours)</arglist>
    </member>
    <member kind="function">
      <name>days</name>
      <anchor>a4f45ed29a4cc657047f958c2d9226ba8</anchor>
      <arglist>(double numberOfDays)</arglist>
    </member>
    <member kind="function">
      <name>weeks</name>
      <anchor>a0eea5e8944d527231eb74505bd2c6d71</anchor>
      <arglist>(double numberOfWeeks)</arglist>
    </member>
    <member kind="function">
      <name>inMilliseconds</name>
      <anchor>ae5c8a6039a376dae408f10a3d25b5871</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>inSeconds</name>
      <anchor>aa933bd95dff581b44fa30396c0341bd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>inMinutes</name>
      <anchor>ab4114f01373efb7ffbcc7163f7d2f9d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>inHours</name>
      <anchor>a1e4689251ae0862635df02736014ecbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>inDays</name>
      <anchor>a219bf06f5a7947b13cfc92f478d31000</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>inWeeks</name>
      <anchor>a56a0902ad0b129b51c97c43fb1ad59ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDescription</name>
      <anchor>a52f36ec0799f26f5da9e8364088efbdc</anchor>
      <arglist>(const String &amp;returnValueForZeroTime=&quot;0&quot;) const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>af78566475fea24802319e7797cff1a2f</anchor>
      <arglist>(const RelativeTime &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>adfdb4e742bcf4fb83e1ec7bec8c870b9</anchor>
      <arglist>(const RelativeTime &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>a2cc982aa986a22d1f71e82adcdb49bd5</anchor>
      <arglist>(const RelativeTime &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>ac83bd213a5d03bd9ae807b3e73dc83ae</anchor>
      <arglist>(const RelativeTime &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>af72d3505da97bec31a9a074aa76f37d0</anchor>
      <arglist>(const RelativeTime &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>ae0d1eb2e7bf823bbc0a80fe9dc12035d</anchor>
      <arglist>(const RelativeTime &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>ae1c4a563bb20adaa8079f3c25122bcbc</anchor>
      <arglist>(const RelativeTime &amp;timeToAdd) const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;</name>
      <anchor>ae77db25ef6e5b69979fe6ba4d811c826</anchor>
      <arglist>(const RelativeTime &amp;timeToSubtract) const </arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>abb51a2ddd3702dc899775f31879a3b76</anchor>
      <arglist>(double secondsToAdd) const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;</name>
      <anchor>ad77096103d08e47ce93c0d0cddaf9cfa</anchor>
      <arglist>(double secondsToSubtract) const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>a6b05cef2184d427b8d18d8e32915cca9</anchor>
      <arglist>(const RelativeTime &amp;timeToAdd)</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;=</name>
      <anchor>a82de85a9a344fec802ec9fbacee33763</anchor>
      <arglist>(const RelativeTime &amp;timeToSubtract)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>a81991d83681b27ca8107b36779aeda88</anchor>
      <arglist>(double secondsToAdd)</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;=</name>
      <anchor>a11ae36f0cdc9bf602872f22ca87e75c1</anchor>
      <arglist>(double secondsToSubtract)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResamplingAudioSource</name>
    <base>AudioSource</base>
    <filename>classResamplingAudioSource.html</filename>
    <member kind="function">
      <name>ResamplingAudioSource</name>
      <anchor>aae8b28fece45b12510b761a51880478f</anchor>
      <arglist>(AudioSource *const inputSource, const bool deleteInputWhenDeleted)</arglist>
    </member>
    <member kind="function">
      <name>~ResamplingAudioSource</name>
      <anchor>a3bcbb3a49e217faf8fa66f69dd7e85ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setResamplingRatio</name>
      <anchor>a7328b84ad6725949a8f9516542b28e8c</anchor>
      <arglist>(const double samplesInPerOutputSample)</arglist>
    </member>
    <member kind="function">
      <name>getResamplingRatio</name>
      <anchor>a0719245eb5abae25bef0c7365d96d2e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>prepareToPlay</name>
      <anchor>a771e14cf17371267b6adef1ce69bd235</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <name>releaseResources</name>
      <anchor>ab28fb3c4fde928bcfb047d415900c296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNextAudioBlock</name>
      <anchor>ab180bc2bf8b6afa41a6c856a16467cac</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableBorderComponent</name>
    <base>Component</base>
    <filename>classResizableBorderComponent.html</filename>
    <member kind="function">
      <name>ResizableBorderComponent</name>
      <anchor>a7ac45de1070370a02e6d641cffd7dc35</anchor>
      <arglist>(Component *componentToResize, ComponentBoundsConstrainer *constrainer)</arglist>
    </member>
    <member kind="function">
      <name>~ResizableBorderComponent</name>
      <anchor>a544ec6f29fe70d170e241ede49dc086f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBorderThickness</name>
      <anchor>abccb6d95f91556b1532aa107748ba0ca</anchor>
      <arglist>(const BorderSize &amp;newBorderSize)</arglist>
    </member>
    <member kind="function">
      <name>getBorderThickness</name>
      <anchor>af482c647c01cff7c30f9304b9df61ce2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a2d74e51357be6c15cf835ad73d1f8bd3</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>mouseEnter</name>
      <anchor>ad035dbf8fd40da5f1b07753ba8c71ff2</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseMove</name>
      <anchor>a4235039d169427cc3e1d8a8d66ac8117</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a5475d08ad57d76c9ad00dd60760306a1</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>a4afe650608fb08523b6b81b17f119d74</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>ab7db208eb34ec3dd49dae240803004b3</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>hitTest</name>
      <anchor>a3d5ce9120f2d218e6127b524925bbc04</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableBorderComponent::Zone</name>
    <filename>classResizableBorderComponent_1_1Zone.html</filename>
    <member kind="function">
      <name>Zone::Zones</name>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>entre</name>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881eabb95f72d0c8f0a7f1067d10eabd9dcf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eft</name>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881eaaed2e03ece3b1ad56f93cb6d318107c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>op</name>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881eaade8c46acd8d0763312af993d4a0c338</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ight</name>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881ead78b7d524dca9da5cd0d8576041ff84b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ottom</name>
      <anchor>ad6fba9e9d2be9a3c7e31f14ba8f6881eaa21beed256039ab04e501c4bae4ba67b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Zone::Zone</name>
      <anchor>ac6a2c0e5d725207f2584d393ef7f95c6</anchor>
      <arglist>(int zoneFlags=0)</arglist>
    </member>
    <member kind="function">
      <name>Zone::Zone</name>
      <anchor>a0e4ffdd2ae45eb359c083039fa3d1e50</anchor>
      <arglist>(const Zone &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Zone::operator=</name>
      <anchor>a923786f665f8f22a34f25b4aa2051dbe</anchor>
      <arglist>(const Zone &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Zone::operator==</name>
      <anchor>ab5da88b58fbc5a347945c97674c92533</anchor>
      <arglist>(const Zone &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>Zone::operator!=</name>
      <anchor>aa75eb27baf6401cbc50606216c4bd556</anchor>
      <arglist>(const Zone &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>Zone::fromPositionOnBorder</name>
      <anchor>afcdc781c6568ea6a86abe5c8c5d09012</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;totalSize, const BorderSize &amp;border, const Point&lt; int &gt; &amp;position)</arglist>
    </member>
    <member kind="function">
      <name>Zone::getMouseCursor</name>
      <anchor>ac2e2ac0729226b02fd7b599b6c8fc303</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Zone::isDraggingWholeObject</name>
      <anchor>afd2cfddc216c290af2658b7c2b220f57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Zone::isDraggingLeftEdge</name>
      <anchor>a5f3bb5c4eae88b0ce36e29c1804dcb4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Zone::isDraggingRightEdge</name>
      <anchor>ac1417d34d9af5c01479f742ec9367e4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Zone::isDraggingTopEdge</name>
      <anchor>a1ad5dc9a7583aee456335449b39f71a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Zone::isDraggingBottomEdge</name>
      <anchor>a3587ae2de183461be365df113d64c14e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Zone::resizeRectangleBy</name>
      <anchor>a222e7f64724715e1e1c23acebe07ae7d</anchor>
      <arglist>(Rectangle&lt; int &gt; original, const Point&lt; int &gt; &amp;distance) const </arglist>
    </member>
    <member kind="function">
      <name>Zone::getZoneFlags</name>
      <anchor>a64f4f25b622e67ba2665a0b4efc80241</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableCornerComponent</name>
    <base>Component</base>
    <filename>classResizableCornerComponent.html</filename>
    <member kind="function">
      <name>ResizableCornerComponent</name>
      <anchor>a3706073ab81c9dcf5161bc570b2c1226</anchor>
      <arglist>(Component *componentToResize, ComponentBoundsConstrainer *constrainer)</arglist>
    </member>
    <member kind="function">
      <name>~ResizableCornerComponent</name>
      <anchor>ab55ab24ef93bc37f7afcc41ed37eccde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a469e17a3d9767c22139672a127583b94</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a7c9bd6061f867ca8ed486e7ef5dcd9d6</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>a973cb2b485292de1121caab3571d96fd</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>af430c183133631a2971d5c9b9cef21b0</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>hitTest</name>
      <anchor>ad5297f17c136a3ff8a60bc4a2313d83c</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizableWindow</name>
    <base>TopLevelWindow</base>
    <filename>classResizableWindow.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a9488716cf84a6e72cf3397fa83933c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>a9488716cf84a6e72cf3397fa83933c79a95839e67b4ccccc75988fc0ed38113a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ResizableWindow</name>
      <anchor>a72a45d75d7e14d157e01143969e51361</anchor>
      <arglist>(const String &amp;name, bool addToDesktop)</arglist>
    </member>
    <member kind="function">
      <name>ResizableWindow</name>
      <anchor>a986e25dfad594227e1bc4531a4b66fd6</anchor>
      <arglist>(const String &amp;name, const Colour &amp;backgroundColour, bool addToDesktop)</arglist>
    </member>
    <member kind="function">
      <name>~ResizableWindow</name>
      <anchor>a9aa0f14f04a2985bab7ce5287229b0e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getBackgroundColour</name>
      <anchor>a20a97f00d4acd9624298247cd1d1bb7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setBackgroundColour</name>
      <anchor>a4dca88839b522f1c5bc4fa1f71e93bf0</anchor>
      <arglist>(const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <name>setResizable</name>
      <anchor>a538709f0111ad32b05d858a511bcd5be</anchor>
      <arglist>(bool shouldBeResizable, bool useBottomRightCornerResizer)</arglist>
    </member>
    <member kind="function">
      <name>isResizable</name>
      <anchor>a1a2ef9c78a3234031dd2c763bc56a597</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setResizeLimits</name>
      <anchor>a6ab6a077a09674e62bad13dadf49dbc8</anchor>
      <arglist>(int newMinimumWidth, int newMinimumHeight, int newMaximumWidth, int newMaximumHeight)</arglist>
    </member>
    <member kind="function">
      <name>getConstrainer</name>
      <anchor>a4e39aacf2c44a64c7cbce5bb3d21c2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setConstrainer</name>
      <anchor>ae386b9e5c905a04cc36cabba1798a444</anchor>
      <arglist>(ComponentBoundsConstrainer *newConstrainer)</arglist>
    </member>
    <member kind="function">
      <name>setBoundsConstrained</name>
      <anchor>a4b30538447a36bd8dd88f13b85d79744</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <name>isFullScreen</name>
      <anchor>a4436633b8bfef5d4bd45d05edad4d296</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setFullScreen</name>
      <anchor>a08a0f1863417c80e6494d113a5c1fbd2</anchor>
      <arglist>(bool shouldBeFullScreen)</arglist>
    </member>
    <member kind="function">
      <name>isMinimised</name>
      <anchor>add27363b06fa6704db1bcfb99313bf0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setMinimised</name>
      <anchor>a8b3174e4cad2a85ff1405a0c22e12148</anchor>
      <arglist>(bool shouldMinimise)</arglist>
    </member>
    <member kind="function">
      <name>getWindowStateAsString</name>
      <anchor>a20d0e240c704e7aa4a4a559a979c3eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>restoreWindowStateFromString</name>
      <anchor>a462e5efd2f570fd65b0822c0ea96889b</anchor>
      <arglist>(const String &amp;previousState)</arglist>
    </member>
    <member kind="function">
      <name>getContentComponent</name>
      <anchor>aae82a21311cd2fd6d1b8e30161494837</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setContentComponent</name>
      <anchor>afd74cd2a7076f0cbb250a7dbc88a7ac3</anchor>
      <arglist>(Component *newContentComponent, bool deleteOldOne=true, bool resizeToFit=false)</arglist>
    </member>
    <member kind="function">
      <name>setContentComponentSize</name>
      <anchor>a756f7d17ab2e38e2733f2db0d4670f81</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a5fece831180850865998c88a6a80e9d2</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>moved</name>
      <anchor>a58979ca0f7e0a7c5cc32f892d2590281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a80c869e583794bc6d8659b9f9393430c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a98cbc94ab2b541b8c0215f5496cac033</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>aa860470d0fe281152d528a7e9807b3e9</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>lookAndFeelChanged</name>
      <anchor>a0fa860d959487f1104a12141bfee74e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>childBoundsChanged</name>
      <anchor>ab785d864f42d4a6f83626d289aeb65f4</anchor>
      <arglist>(Component *child)</arglist>
    </member>
    <member kind="function">
      <name>parentSizeChanged</name>
      <anchor>a72656546b6b478a26a9af43fece6ca8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>visibilityChanged</name>
      <anchor>ac7a173f57007c8471da2c39e0664cf37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activeWindowStatusChanged</name>
      <anchor>ab574e83802c62e4cfa99946e17e795c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDesktopWindowStyleFlags</name>
      <anchor>a73f0627ea9671fa9b71f07f3a45e6c16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getBorderThickness</name>
      <anchor>a8ce8e44b115b1e24125b0dbfdcd34863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getContentComponentBorder</name>
      <anchor>ad9b1c842b2aaddc693081ba274b0dbb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resizableCorner</name>
      <anchor>a99d4f438dba8740a09fbeb832450013f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>resizableBorder</name>
      <anchor>a4d0b53ec83fe41125b1223bb92171543</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSAKey</name>
    <filename>classRSAKey.html</filename>
    <member kind="function">
      <name>RSAKey</name>
      <anchor>a2a1894882100da6c8c70f8911089ef4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RSAKey</name>
      <anchor>a8658a7cfe77c3565033efbd6706ee6ae</anchor>
      <arglist>(const String &amp;stringRepresentation)</arglist>
    </member>
    <member kind="function">
      <name>~RSAKey</name>
      <anchor>a4ae206fafb656769aaea335383a4ffec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>aa5c951195fecf535d63529e6c2af904d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>applyToValue</name>
      <anchor>a66512b0a53fad1f68481b4aca050f93c</anchor>
      <arglist>(BigInteger &amp;value) const </arglist>
    </member>
    <member kind="function">
      <name>createKeyPair</name>
      <anchor>a5d1e064bc7a6138ed151c2c144859ae3</anchor>
      <arglist>(RSAKey &amp;publicKey, RSAKey &amp;privateKey, int numBits, const int *randomSeeds=0, int numRandomSeeds=0)</arglist>
    </member>
    <member kind="function">
      <name>part1</name>
      <anchor>af9992df31573da04eff2f95b6c215be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>part2</name>
      <anchor>a8f404bb892955099f1495922fe43e0f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SamplerSound</name>
    <base>SynthesiserSound</base>
    <filename>classSamplerSound.html</filename>
    <member kind="function">
      <name>SamplerSound</name>
      <anchor>ad26e044243f4802000b8dcbb6dd15cee</anchor>
      <arglist>(const String &amp;name, AudioFormatReader &amp;source, const BigInteger &amp;midiNotes, int midiNoteForNormalPitch, double attackTimeSecs, double releaseTimeSecs, double maxSampleLengthSeconds)</arglist>
    </member>
    <member kind="function">
      <name>~SamplerSound</name>
      <anchor>a4e5d644cede3dd9c821e40098da01945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getName</name>
      <anchor>a3614f6da386e843cf2b8f6b30943fb7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAudioData</name>
      <anchor>a82ca8fb2e3d40dcf9cbe59eea021448e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>appliesToNote</name>
      <anchor>a7b2947ab1129d4e850e12e1346779ca8</anchor>
      <arglist>(const int midiNoteNumber)</arglist>
    </member>
    <member kind="function">
      <name>appliesToChannel</name>
      <anchor>a2d0f87e6c5a5de4265022a19dd2589f3</anchor>
      <arglist>(const int midiChannel)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SamplerVoice</name>
    <base>SynthesiserVoice</base>
    <filename>classSamplerVoice.html</filename>
    <member kind="function">
      <name>SamplerVoice</name>
      <anchor>aa1614529f047ba46473645216f58d9ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~SamplerVoice</name>
      <anchor>acf89d1cb1e5c67c1daf562ec227d09ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canPlaySound</name>
      <anchor>abbd294b47e26ff21a413a9d6186c6110</anchor>
      <arglist>(SynthesiserSound *sound)</arglist>
    </member>
    <member kind="function">
      <name>startNote</name>
      <anchor>a48520f3d80a603a9ded2246978c024d7</anchor>
      <arglist>(const int midiNoteNumber, const float velocity, SynthesiserSound *sound, const int currentPitchWheelPosition)</arglist>
    </member>
    <member kind="function">
      <name>stopNote</name>
      <anchor>a5a85c3a691ce581a4d92117213019f18</anchor>
      <arglist>(const bool allowTailOff)</arglist>
    </member>
    <member kind="function">
      <name>pitchWheelMoved</name>
      <anchor>a7e15bb27878f2267028a8f7c8a4d9936</anchor>
      <arglist>(const int newValue)</arglist>
    </member>
    <member kind="function">
      <name>controllerMoved</name>
      <anchor>acae91334bcf3aa1beca2e2de6adf0b68</anchor>
      <arglist>(const int controllerNumber, const int newValue)</arglist>
    </member>
    <member kind="function">
      <name>renderNextBlock</name>
      <anchor>a8a5dbc0cd5d2d05275e76b7745a9fa6d</anchor>
      <arglist>(AudioSampleBuffer &amp;outputBuffer, int startSample, int numSamples)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedAutoReleasePool</name>
    <filename>classScopedAutoReleasePool.html</filename>
    <member kind="function">
      <name>ScopedAutoReleasePool</name>
      <anchor>ae1be6d4b7e677b4ec8f614ec4e962ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ScopedAutoReleasePool</name>
      <anchor>adc870c53867716591a676ff039436d07</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedJuceInitialiser_GUI</name>
    <filename>classScopedJuceInitialiser__GUI.html</filename>
    <member kind="function">
      <name>ScopedJuceInitialiser_GUI</name>
      <anchor>a1342c78002291c0ce1cf77c38fac2c9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ScopedJuceInitialiser_GUI</name>
      <anchor>a689e8564ee0ea5b806340008252a1a5f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedJuceInitialiser_NonGUI</name>
    <filename>classScopedJuceInitialiser__NonGUI.html</filename>
    <member kind="function">
      <name>ScopedJuceInitialiser_NonGUI</name>
      <anchor>a589d4bb9cfff212f2eb559d81a529d4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ScopedJuceInitialiser_NonGUI</name>
      <anchor>a468e1f5cbac9e2319fd035d518630147</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedLock</name>
    <filename>classScopedLock.html</filename>
    <member kind="function">
      <name>ScopedLock</name>
      <anchor>a4178b8db70be7f2349df99904146850a</anchor>
      <arglist>(const CriticalSection &amp;lock)</arglist>
    </member>
    <member kind="function">
      <name>~ScopedLock</name>
      <anchor>ab376d7bce17d112c2c065d116813259e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedPointer</name>
    <filename>classScopedPointer.html</filename>
    <member kind="function">
      <name>ScopedPointer</name>
      <anchor>a44d7ca70d93ea783f4f52d7cd6171816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ScopedPointer</name>
      <anchor>a0e8d20862307389afcf7bae2a7f1d457</anchor>
      <arglist>(ObjectType *const objectToTakePossessionOf)</arglist>
    </member>
    <member kind="function">
      <name>ScopedPointer</name>
      <anchor>a6c7d500b72b55af555008b77420f1522</anchor>
      <arglist>(ScopedPointer &amp;objectToTransferFrom)</arglist>
    </member>
    <member kind="function">
      <name>~ScopedPointer</name>
      <anchor>a3c540f0121065aafa5f9607362fc1450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>afefc7940828d72c056e03804cd6bea9f</anchor>
      <arglist>(ScopedPointer &amp;objectToTransferFrom)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a88ee7f038e57471539d3181141c0390e</anchor>
      <arglist>(ObjectType *const newObjectToTakePossessionOf)</arglist>
    </member>
    <member kind="function">
      <name>operator ObjectType *</name>
      <anchor>a7ce654b293352669e63576b3ec713c73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>a6194bd583c0a578a7895e78e8802aa95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;&gt;</name>
      <anchor>a3d54229a22801471b41e2d5ed2ca907d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>a6a4580134ca74cd4413055943d78fb7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>ac4df60bbd8ac846b154b1b68e1cb03df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>release</name>
      <anchor>abe67c9e5105a18a9599ad48e06233d4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>swapWith</name>
      <anchor>ad9e9102cb67a50d862125ee86637da09</anchor>
      <arglist>(ScopedPointer&lt; ObjectType &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedReadLock</name>
    <filename>classScopedReadLock.html</filename>
    <member kind="function">
      <name>ScopedReadLock</name>
      <anchor>ae4649cd303ac173dd10cb1a71273c8f3</anchor>
      <arglist>(const ReadWriteLock &amp;lock)</arglist>
    </member>
    <member kind="function">
      <name>~ScopedReadLock</name>
      <anchor>a06f99ae54d3a707422f769a4187fbef5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedTryLock</name>
    <filename>classScopedTryLock.html</filename>
    <member kind="function">
      <name>ScopedTryLock</name>
      <anchor>ae67a9a706ec28c42e8c452a581fa8d80</anchor>
      <arglist>(const CriticalSection &amp;lock)</arglist>
    </member>
    <member kind="function">
      <name>~ScopedTryLock</name>
      <anchor>aac52bca7fcca0cc184819ca184fd9fd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isLocked</name>
      <anchor>a2889930b647847c7a09a77d8406a169b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedUnlock</name>
    <filename>classScopedUnlock.html</filename>
    <member kind="function">
      <name>ScopedUnlock</name>
      <anchor>a179112daf1f35f3eb6accbda58a0aea1</anchor>
      <arglist>(const CriticalSection &amp;lock)</arglist>
    </member>
    <member kind="function">
      <name>~ScopedUnlock</name>
      <anchor>aef4542446156b1a441689da28060a683</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedWriteLock</name>
    <filename>classScopedWriteLock.html</filename>
    <member kind="function">
      <name>ScopedWriteLock</name>
      <anchor>a961af6f9961207c0ed1561feb1e7ce23</anchor>
      <arglist>(const ReadWriteLock &amp;lock)</arglist>
    </member>
    <member kind="function">
      <name>~ScopedWriteLock</name>
      <anchor>ac5cf45a54237ba734025f10ebdc22f7c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedXLock</name>
    <filename>classScopedXLock.html</filename>
    <member kind="function">
      <name>ScopedXLock</name>
      <anchor>a0ef6c827c909d78ab8513eb4aa656c08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ScopedXLock</name>
      <anchor>aabfb3095dd827312e84c893ab12bbaea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScrollBar</name>
    <base>Component</base>
    <base>AsyncUpdater</base>
    <base>Timer</base>
    <filename>classScrollBar.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a5cdce553497ae1b7fc7fcd3caa805167</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>a5cdce553497ae1b7fc7fcd3caa805167aa46e6ad051ab6de778812cdcc86f4d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>humbColourId</name>
      <anchor>a5cdce553497ae1b7fc7fcd3caa805167a3b2685adf5143eb1c382b71cbed677ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rackColourId</name>
      <anchor>a5cdce553497ae1b7fc7fcd3caa805167ab32d64c0802a57b8c50d138e00a4716e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ScrollBar</name>
      <anchor>a220c88af4b7d04fa9312db133fd1bf58</anchor>
      <arglist>(bool isVertical, bool buttonsAreVisible=true)</arglist>
    </member>
    <member kind="function">
      <name>~ScrollBar</name>
      <anchor>ae27d95eecd029b104b1e8b4795879564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isVertical</name>
      <anchor>a759cbc50a3f2ad08c5a83f40b25cbc24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setOrientation</name>
      <anchor>a5676d739d423d3daeeffd3d4176ef8ef</anchor>
      <arglist>(bool shouldBeVertical)</arglist>
    </member>
    <member kind="function">
      <name>setButtonVisibility</name>
      <anchor>a33c1faef1b0994f48c991e8726c2e874</anchor>
      <arglist>(bool buttonsAreVisible)</arglist>
    </member>
    <member kind="function">
      <name>setAutoHide</name>
      <anchor>a85f03e3ca1a3b16894152c29bd4dcff0</anchor>
      <arglist>(bool shouldHideWhenFullRange)</arglist>
    </member>
    <member kind="function">
      <name>setRangeLimits</name>
      <anchor>a6e4bcc566a85f36a7544c8d680a7b651</anchor>
      <arglist>(const Range&lt; double &gt; &amp;newRangeLimit)</arglist>
    </member>
    <member kind="function">
      <name>setRangeLimits</name>
      <anchor>a53df34d9f883c70f31c8f139aeab2613</anchor>
      <arglist>(double minimum, double maximum)</arglist>
    </member>
    <member kind="function">
      <name>getRangeLimit</name>
      <anchor>a31e70796b215d506b7efd269a600949d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMinimumRangeLimit</name>
      <anchor>a61516aed0b248c824677d05817a0f99f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMaximumRangeLimit</name>
      <anchor>ad210585cf2c03cd3d9cba3c78ed6204a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setCurrentRange</name>
      <anchor>ad769708041476ee2b06a2527c9f9129c</anchor>
      <arglist>(const Range&lt; double &gt; &amp;newRange)</arglist>
    </member>
    <member kind="function">
      <name>setCurrentRange</name>
      <anchor>a4a2e6a3c0aacc2423c48665715089978</anchor>
      <arglist>(double newStart, double newSize)</arglist>
    </member>
    <member kind="function">
      <name>setCurrentRangeStart</name>
      <anchor>abcaa8af283ca44bb29a9f2949716c319</anchor>
      <arglist>(double newStart)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentRange</name>
      <anchor>ab22b924a6edfc355038d15b776d92f29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentRangeStart</name>
      <anchor>a97612ae624f2175db6091755a4046a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentRangeSize</name>
      <anchor>ac168ba2131b48fec85f91724df8cb379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setSingleStepSize</name>
      <anchor>a7bac17aaa9153040248fa3823b222ce4</anchor>
      <arglist>(double newSingleStepSize)</arglist>
    </member>
    <member kind="function">
      <name>moveScrollbarInSteps</name>
      <anchor>af12b60e44891ea8df20e74c20f313ae6</anchor>
      <arglist>(int howManySteps)</arglist>
    </member>
    <member kind="function">
      <name>moveScrollbarInPages</name>
      <anchor>a35660932575fc4f3a119ff8f04f0a184</anchor>
      <arglist>(int howManyPages)</arglist>
    </member>
    <member kind="function">
      <name>scrollToTop</name>
      <anchor>a4eab64006ff387591f5b2bcaa36ea606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scrollToBottom</name>
      <anchor>a0b8db83230715f312faa9264ae74a07b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setButtonRepeatSpeed</name>
      <anchor>a65b128f173c754300cdc9db8589d2a36</anchor>
      <arglist>(int initialDelayInMillisecs, int repeatDelayInMillisecs, int minimumDelayInMillisecs=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>aed0b6540b4db1fd203cc167533d004c7</anchor>
      <arglist>(ScrollBarListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>abf9ab3c024abe90d9ed74b56de73bf48</anchor>
      <arglist>(ScrollBarListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>a31bea91e3d486ccebe255a5223962847</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>mouseWheelMove</name>
      <anchor>afbf026f45e82e3c5c26e7512bd712d55</anchor>
      <arglist>(const MouseEvent &amp;e, float wheelIncrementX, float wheelIncrementY)</arglist>
    </member>
    <member kind="function">
      <name>lookAndFeelChanged</name>
      <anchor>ae8384e9d82268d14fb56ba5f74de39e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleAsyncUpdate</name>
      <anchor>a5c5c5cf1f16b0f623e0ca95644556075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>ad309a37b4cfa1cecc8c635463928f97f</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>a4f0e722d68fae27e2afbf7a69999ccbd</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>a9dcde4ac10afc26ef142e36fe4482120</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>ae76813cba16f4b89177d774c63596fde</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>abfa4e1134d8c8ee566a099b6272e43dc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScrollBarListener</name>
    <filename>classScrollBarListener.html</filename>
    <member kind="function">
      <name>~ScrollBarListener</name>
      <anchor>a7d816963963c09a7e2f6d95496c52eeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scrollBarMoved</name>
      <anchor>a5e9cf31d22cc9323842092b9d08d2c0c</anchor>
      <arglist>(ScrollBar *scrollBarThatHasMoved, double newRangeStart)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SelectedItemSet</name>
    <base>ChangeBroadcaster</base>
    <filename>classSelectedItemSet.html</filename>
    <member kind="function">
      <name>ItemType</name>
      <anchor>adac8d78df1c308ca17aa9cbfada787fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SelectedItemSet</name>
      <anchor>a251c959797ab80fe2e7b553a52a6b8c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SelectedItemSet</name>
      <anchor>a5a44c2e8e1e7df50bdb157f3ec79cba5</anchor>
      <arglist>(const Array&lt; SelectableItemType &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <name>SelectedItemSet</name>
      <anchor>a2f5056970053b0153c5661629e254ab5</anchor>
      <arglist>(const SelectedItemSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~SelectedItemSet</name>
      <anchor>a83d06f1d2e528fa621499583694271a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>af86b0e97bd91cbbd0a16bea50e3f7f0d</anchor>
      <arglist>(const SelectedItemSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>selectOnly</name>
      <anchor>ae81b256a6fd62014f82deeff38b1774f</anchor>
      <arglist>(SelectableItemType item)</arglist>
    </member>
    <member kind="function">
      <name>addToSelection</name>
      <anchor>a8f4c286ab794a1df38adc474032e63fa</anchor>
      <arglist>(SelectableItemType item)</arglist>
    </member>
    <member kind="function">
      <name>addToSelectionBasedOnModifiers</name>
      <anchor>ad74de032e58286b1e83e9583ddb4ae47</anchor>
      <arglist>(SelectableItemType item, const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>addToSelectionOnMouseDown</name>
      <anchor>adce6f284cd7f84dec9c1993a0d870d3c</anchor>
      <arglist>(SelectableItemType item, const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>addToSelectionOnMouseUp</name>
      <anchor>a0c44dec5368043ac07ff5f3706dc9df6</anchor>
      <arglist>(SelectableItemType item, const ModifierKeys &amp;modifiers, const bool wasItemDragged, const bool resultOfMouseDownSelectMethod)</arglist>
    </member>
    <member kind="function">
      <name>deselect</name>
      <anchor>a4dc38067b0432ace8a43e51a732af61e</anchor>
      <arglist>(SelectableItemType item)</arglist>
    </member>
    <member kind="function">
      <name>deselectAll</name>
      <anchor>a2d8c179287d5afa7e4ef0318ce779813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumSelected</name>
      <anchor>a3fee7cb6e732de6108bf9c8ffd231219</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSelectedItem</name>
      <anchor>a79f1a92feea179f19ddf549e27526706</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>isSelected</name>
      <anchor>a172566d5f29493b459cfec69c0e1ed83</anchor>
      <arglist>(const SelectableItemType item) const </arglist>
    </member>
    <member kind="function">
      <name>getItemArray</name>
      <anchor>abb3463e49bcff969e358d01555642ec2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>itemSelected</name>
      <anchor>adf66500b4e7c85b38439d3a6dbac8e11</anchor>
      <arglist>(SelectableItemType item)</arglist>
    </member>
    <member kind="function">
      <name>itemDeselected</name>
      <anchor>aa8405b4a0f23095d8a0d94ddcc0daa27</anchor>
      <arglist>(SelectableItemType item)</arglist>
    </member>
    <member kind="function">
      <name>changed</name>
      <anchor>aaacd60906dfc3c9c6ab9272b68a25c3f</anchor>
      <arglist>(const bool synchronous=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SettableTooltipClient</name>
    <base>TooltipClient</base>
    <filename>classSettableTooltipClient.html</filename>
    <member kind="function">
      <name>~SettableTooltipClient</name>
      <anchor>aaae46e35635da9cada96bb173f9ddda0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setTooltip</name>
      <anchor>aa374ef7cc0eea80f3922f5d584da79e9</anchor>
      <arglist>(const String &amp;newTooltip)</arglist>
    </member>
    <member kind="function">
      <name>getTooltip</name>
      <anchor>a9f8a98e9c19ca1cffb37ce646c3849de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tooltipString</name>
      <anchor>a2c46f7defdff77e0151e3c31b66dc17c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeButton</name>
    <base>Button</base>
    <filename>classShapeButton.html</filename>
    <member kind="function">
      <name>ShapeButton</name>
      <anchor>a2317552f4b92de895ede82506acbe87a</anchor>
      <arglist>(const String &amp;name, const Colour &amp;normalColour, const Colour &amp;overColour, const Colour &amp;downColour)</arglist>
    </member>
    <member kind="function">
      <name>~ShapeButton</name>
      <anchor>a5a3275bba2b41d705d107236ea28e251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setShape</name>
      <anchor>a40b9a0a8f4a181b06e88bb51b311ec9c</anchor>
      <arglist>(const Path &amp;newShape, bool resizeNowToFitThisShape, bool maintainShapeProportions, bool hasDropShadow)</arglist>
    </member>
    <member kind="function">
      <name>setColours</name>
      <anchor>a94c1bd77c30d1edc41b7a10d7887c532</anchor>
      <arglist>(const Colour &amp;normalColour, const Colour &amp;overColour, const Colour &amp;downColour)</arglist>
    </member>
    <member kind="function">
      <name>setOutline</name>
      <anchor>ad0e04a24dd13d84076db8e6579aa4569</anchor>
      <arglist>(const Colour &amp;outlineColour, float outlineStrokeWidth)</arglist>
    </member>
    <member kind="function">
      <name>paintButton</name>
      <anchor>a9796c0407cf4ebfb518132aa50aac694</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Slider</name>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>AsyncUpdater</base>
    <base>ButtonListener</base>
    <base>LabelListener</base>
    <base>Value::Listener</base>
    <filename>classSlider.html</filename>
    <member kind="function">
      <name>SliderStyle</name>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>inearHorizontal</name>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a0fa5cefcd508c8f26ac9a458272844f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>inearVertical</name>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a31f9134048fa90fbc4a72b69c6f553d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>inearBar</name>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a0092c810419dab80d4692363d9564c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>otary</name>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a2043125f6f74c8ceae38baf3fb514f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>otaryHorizontalDrag</name>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a8c359e2cb456e39665bec067273df5fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>otaryVerticalDrag</name>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a46ac50fdae2ac4df9a2f3ad630589224</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ncDecButtons</name>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888adcb7bc12a443e3c6cdf598ab3c5e2171</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>woValueHorizontal</name>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a2ce77695813bb317c2d1863d2e71213b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>woValueVertical</name>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888a7477c3163edc14c8740d464e523e5ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>hreeValueHorizontal</name>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888ad74f46a4848b6c1b3e3cc59da103f504</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>hreeValueVertical</name>
      <anchor>af1caee82552143dd9ff0fc9f0cdc0888aa2c50364a9dd891a0e5e8022570c8e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>IncDecButtonMode</name>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ncDecButtonsNotDraggable</name>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74aabc5b1657cd94c709c9086a463b1d7094</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ncDecButtonsDraggable_AutoDirection</name>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74aa4877104d807899962ee036571ca93f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ncDecButtonsDraggable_Horizontal</name>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74aa19d0b1bdc13c1c673e382045c023868b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ncDecButtonsDraggable_Vertical</name>
      <anchor>a0ceaddd29269b6ec5a41f35bbb2ff74aae8e58e3ebb5b43e67e7de0071ba68ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TextEntryBoxPosition</name>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oTextBox</name>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fad0badf0233a956017621f284e3e30fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extBoxLeft</name>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fa66ab77e721cd147f54097b8bed8c6d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extBoxRight</name>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fae50f30d7062c602b8f8b465346f79a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extBoxAbove</name>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fa382d14dbd222edf95fdf2836acc33fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extBoxBelow</name>
      <anchor>ab6d7dff67151c029b9cb53fc40b4412fa9a20474ba0850feb957b8cea91c6a456</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44a7479f5409d832c1fc97697450c00bb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>humbColourId</name>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44aee563b22e0033b0ed4f38e5296889835</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rackColourId</name>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44a1a7a91f54b703cf78f028edc0ed7786b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>otarySliderFillColourId</name>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44ad6ece790078ea74733dfa2a0d99905a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>otarySliderOutlineColourId</name>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44abc955b1201e3f12967cb3ff472ba86d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extBoxTextColourId</name>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44a6e5d3f5c91a314d510d9fc553c881e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extBoxBackgroundColourId</name>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44ac1eb5559c6e1c8ef115259ceabfd771b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extBoxHighlightColourId</name>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44aa70515f09dbc0ca6a7250100b35e47f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extBoxOutlineColourId</name>
      <anchor>a1012002c53381ccc7c1fe7e604a75f44ae65fdadb3e607a23c074074d64a61ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Slider</name>
      <anchor>ae2c907adc5de6f127138f3f869f683ae</anchor>
      <arglist>(const String &amp;componentName)</arglist>
    </member>
    <member kind="function">
      <name>~Slider</name>
      <anchor>aaca12abbe07a83f925d66339aa332028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSliderStyle</name>
      <anchor>a6b6917dd3753c7552778977733f0b9ef</anchor>
      <arglist>(SliderStyle newStyle)</arglist>
    </member>
    <member kind="function">
      <name>getSliderStyle</name>
      <anchor>aea8e0d5826358def121da62e2eb52a9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setRotaryParameters</name>
      <anchor>a6fad4379a38262e28820213c7ffd26fb</anchor>
      <arglist>(float startAngleRadians, float endAngleRadians, bool stopAtEnd)</arglist>
    </member>
    <member kind="function">
      <name>setMouseDragSensitivity</name>
      <anchor>a4bdd8cdb79dcdb06b1e97a21ff2a6c4b</anchor>
      <arglist>(int distanceForFullScaleDrag)</arglist>
    </member>
    <member kind="function">
      <name>setVelocityBasedMode</name>
      <anchor>a59b616e79738d3adb83093dc532822d0</anchor>
      <arglist>(bool isVelocityBased)</arglist>
    </member>
    <member kind="function">
      <name>getVelocityBasedMode</name>
      <anchor>a283489fc880c081ce0af868c94f020cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setVelocityModeParameters</name>
      <anchor>add6fe31d11f1c783aafeca6294b13858</anchor>
      <arglist>(double sensitivity=1.0, int threshold=1, double offset=0.0, bool userCanPressKeyToSwapMode=true)</arglist>
    </member>
    <member kind="function">
      <name>getVelocitySensitivity</name>
      <anchor>a35b83590e536d2f910e613dfe5d6040c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getVelocityThreshold</name>
      <anchor>a8081166e138625244eda8a5063c5a38e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getVelocityOffset</name>
      <anchor>a792fbe6714cb329572b7d52461d3af0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getVelocityModeIsSwappable</name>
      <anchor>a7f56f702716d700078fe0f9dbb9f1526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setSkewFactor</name>
      <anchor>a3253bce613f1770688380e4fcc91b964</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <name>setSkewFactorFromMidPoint</name>
      <anchor>a2d948c662c1f636810d3125d8b3f0d47</anchor>
      <arglist>(double sliderValueToShowAtMidPoint)</arglist>
    </member>
    <member kind="function">
      <name>getSkewFactor</name>
      <anchor>a036abd78490f6c68cdfe162f3ed1cf43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setIncDecButtonsMode</name>
      <anchor>a188fa57db0d90f931529dc367e76b9f5</anchor>
      <arglist>(IncDecButtonMode mode)</arglist>
    </member>
    <member kind="function">
      <name>setTextBoxStyle</name>
      <anchor>a5bc748a21e72fe14153bc9fe5ac03e77</anchor>
      <arglist>(TextEntryBoxPosition newPosition, bool isReadOnly, int textEntryBoxWidth, int textEntryBoxHeight)</arglist>
    </member>
    <member kind="function">
      <name>getTextBoxPosition</name>
      <anchor>a2a1d6a0932c4fba0bae027c790533ae6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTextBoxWidth</name>
      <anchor>a9989376dd381fe22e60b8bb81d634591</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTextBoxHeight</name>
      <anchor>a3ac6dfa3dfec5b82207c16f7c5b7f97a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setTextBoxIsEditable</name>
      <anchor>a59e3fd9bc86e488070c12889747e7bbe</anchor>
      <arglist>(bool shouldBeEditable)</arglist>
    </member>
    <member kind="function">
      <name>isTextBoxEditable</name>
      <anchor>aa92882e0e3b0f6b313dea30b232f6f6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>showTextBox</name>
      <anchor>a3a8e500dc05a6afc52fc61f9001e7a1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hideTextBox</name>
      <anchor>a0780c7da80f4d487703e8247e92bea21</anchor>
      <arglist>(bool discardCurrentEditorContents)</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>a9efb9aa7aaea458abea6cd9a572d62e4</anchor>
      <arglist>(double newValue, bool sendUpdateMessage=true, bool sendMessageSynchronously=false)</arglist>
    </member>
    <member kind="function">
      <name>getValue</name>
      <anchor>ace4fffe8ad4e2b2c4cd2cda06dedc848</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getValueObject</name>
      <anchor>afb8aa1465ed3962e646f7a431c22d535</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setRange</name>
      <anchor>a9fbc23e67deb4a18d172c357a7cff14c</anchor>
      <arglist>(double newMinimum, double newMaximum, double newInterval=0)</arglist>
    </member>
    <member kind="function">
      <name>getMaximum</name>
      <anchor>a686126cd0bfb07c4ba8a4904c592bf8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMinimum</name>
      <anchor>a573423d571b9989e0124f55d8a93f042</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getInterval</name>
      <anchor>a29c61ee33605972fdae606266530ddef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMinValue</name>
      <anchor>a518e19d02009336a5bbe3b9df1f8bd90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMinValueObject</name>
      <anchor>a77c9b6c35b23945cd7593fd5edb5ed0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMinValue</name>
      <anchor>a10f66ef4eb820d189bc4c2c8514dfecf</anchor>
      <arglist>(double newValue, bool sendUpdateMessage=true, bool sendMessageSynchronously=false, bool allowNudgingOfOtherValues=false)</arglist>
    </member>
    <member kind="function">
      <name>getMaxValue</name>
      <anchor>aae0148780396fffa80ef45bfa5e21f0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMaxValueObject</name>
      <anchor>ad46b23b951e45f37c87a96e87cd5ac82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMaxValue</name>
      <anchor>aed820d12ac34b22fa996d8c8339d2dbc</anchor>
      <arglist>(double newValue, bool sendUpdateMessage=true, bool sendMessageSynchronously=false, bool allowNudgingOfOtherValues=false)</arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>a6a55c7095a5056bc2d8cd8af857b9eba</anchor>
      <arglist>(SliderListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>a9ec4864ea9ac017b5db72dcea396a09b</anchor>
      <arglist>(SliderListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>setDoubleClickReturnValue</name>
      <anchor>ab2a3be00576cc708efbd58c98ee4cf51</anchor>
      <arglist>(bool isDoubleClickEnabled, double valueToSetOnDoubleClick)</arglist>
    </member>
    <member kind="function">
      <name>getDoubleClickReturnValue</name>
      <anchor>a0a68020b86485a6fc38e5124f31591b2</anchor>
      <arglist>(bool &amp;isEnabled) const </arglist>
    </member>
    <member kind="function">
      <name>setChangeNotificationOnlyOnRelease</name>
      <anchor>ab41e52ab8941619028a8d57103975029</anchor>
      <arglist>(bool onlyNotifyOnRelease)</arglist>
    </member>
    <member kind="function">
      <name>setSliderSnapsToMousePosition</name>
      <anchor>acf58b7346a74cfc0a8c809567836df61</anchor>
      <arglist>(bool shouldSnapToMouse)</arglist>
    </member>
    <member kind="function">
      <name>setPopupDisplayEnabled</name>
      <anchor>a0d27965d2fde911bd2a5032402be843f</anchor>
      <arglist>(bool isEnabled, Component *parentComponentToUse)</arglist>
    </member>
    <member kind="function">
      <name>setPopupMenuEnabled</name>
      <anchor>a5dc957ba7c141dab961f0b3d46d46bb7</anchor>
      <arglist>(bool menuEnabled)</arglist>
    </member>
    <member kind="function">
      <name>setScrollWheelEnabled</name>
      <anchor>a0061698886ebcc9e2fc9233398383a3c</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <name>getThumbBeingDragged</name>
      <anchor>a05912656163b9a0123012e9526993871</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>startedDragging</name>
      <anchor>a3f63934b274f0f49bcd38530ca3de80b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stoppedDragging</name>
      <anchor>ada61c1382dfcc8a956029f883ad5f83e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>a5988f8e1b98cb0b28330522117d46c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>a8e5e117e94c19fe888d9c175fff28cc4</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <name>getValueFromText</name>
      <anchor>a532774d3294a058784f7d4291b33b720</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>getTextFromValue</name>
      <anchor>a119961823942ee1c5e7d528b80ab5066</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <name>setTextValueSuffix</name>
      <anchor>ac416a101b5d9a504f61e2f50dc593f61</anchor>
      <arglist>(const String &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <name>getTextValueSuffix</name>
      <anchor>a6d335571ce055b35cd2395e961589f12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>proportionOfLengthToValue</name>
      <anchor>a6762e2206ad7e41cb8d6189b244d91f5</anchor>
      <arglist>(double proportion)</arglist>
    </member>
    <member kind="function">
      <name>valueToProportionOfLength</name>
      <anchor>a0549ec352b8dca4ca4ba1afa43263370</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <name>getPositionOfValue</name>
      <anchor>a566a2ce3de4d712b1c19408674f5ab15</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <name>snapValue</name>
      <anchor>a5177f26b97f9f6ea320b7831c268301e</anchor>
      <arglist>(double attemptedValue, bool userIsDragging)</arglist>
    </member>
    <member kind="function">
      <name>updateText</name>
      <anchor>acec04f6f7cca814b66c23ae5cf4a7b6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isHorizontal</name>
      <anchor>a83d87d20e8081183cfcb1e3280de05e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isVertical</name>
      <anchor>a6d77e8d8a2510757f90df893209b7110</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>labelTextChanged</name>
      <anchor>a542c4b33b36543dbf3d5c0ef6e5db0f6</anchor>
      <arglist>(Label *)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>afc7b8c9ad851a142518c7b9a30414a49</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a0aa99144eb939ffd68c7849410067e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a0367621ec730939018d0859921492157</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>a6f197704becde19ece3016030c556df6</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>a08342669f07e585d17b8698ece946578</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDoubleClick</name>
      <anchor>a79d43b25af9e3228dae0a652d3938901</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseWheelMove</name>
      <anchor>ae0b72917ff9901138333e2696516d2b2</anchor>
      <arglist>(const MouseEvent &amp;e, float wheelIncrementX, float wheelIncrementY)</arglist>
    </member>
    <member kind="function">
      <name>modifierKeysChanged</name>
      <anchor>a6e19016a2cfada86e87863bb6f13a789</anchor>
      <arglist>(const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>aa0cd35141f42413e9e629c24cf3ffca9</anchor>
      <arglist>(Button *button)</arglist>
    </member>
    <member kind="function">
      <name>lookAndFeelChanged</name>
      <anchor>a8655306c7d410d02b4531458de51b666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enablementChanged</name>
      <anchor>a57d0b08c020cf7d71b9e5b028d859e59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>focusOfChildComponentChanged</name>
      <anchor>a21276bcb22f0cf37f142e87cdfa6efcf</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <name>handleAsyncUpdate</name>
      <anchor>a67295d4567587b9ffb557df69d53888d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>af9be12d2a11def84232f868bbcaa6d25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>a06ae697e6d5376071190fbabc3819dc0</anchor>
      <arglist>(Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>getNumDecimalPlacesToDisplay</name>
      <anchor>a12a2d84663acf590ce41a703aef8dcce</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SliderListener</name>
    <filename>classSliderListener.html</filename>
    <member kind="function">
      <name>~SliderListener</name>
      <anchor>aea0b926d21c8f5ab6ca891e8469f039b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sliderValueChanged</name>
      <anchor>aaab5c28e547f49ae1b108af48fed02a8</anchor>
      <arglist>(Slider *slider)=0</arglist>
    </member>
    <member kind="function">
      <name>sliderDragStarted</name>
      <anchor>aa4bbfb898316f22f1310dcd2ac05cd35</anchor>
      <arglist>(Slider *slider)</arglist>
    </member>
    <member kind="function">
      <name>sliderDragEnded</name>
      <anchor>aa71d2a745a937b7ffa0574da8b9fbb10</anchor>
      <arglist>(Slider *slider)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SliderPropertyComponent</name>
    <base>PropertyComponent</base>
    <base>SliderListener</base>
    <filename>classSliderPropertyComponent.html</filename>
    <member kind="function">
      <name>SliderPropertyComponent</name>
      <anchor>aa0734f6f8abc891f7d830b033e183fe6</anchor>
      <arglist>(const String &amp;propertyName, double rangeMin, double rangeMax, double interval, double skewFactor=1.0)</arglist>
    </member>
    <member kind="function">
      <name>SliderPropertyComponent</name>
      <anchor>ad8d1e32b02182fc9def5bcb02a9a0aa1</anchor>
      <arglist>(const Value &amp;valueToControl, const String &amp;propertyName, double rangeMin, double rangeMax, double interval, double skewFactor=1.0)</arglist>
    </member>
    <member kind="function">
      <name>~SliderPropertyComponent</name>
      <anchor>a62dca91705c2af7c440327ebf4f9b627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SliderPropertyComponent</name>
      <anchor>ae27a38dcad4e6f352a8e4ba4f26a1222</anchor>
      <arglist>(const SliderPropertyComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>a9b4e58d9a44de072a3674dbdbd1366f0</anchor>
      <arglist>(double newValue)</arglist>
    </member>
    <member kind="function">
      <name>getValue</name>
      <anchor>ae199f29142e97f6f1fd4b4987d17500f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>ac8bfacd03f933004c83a8dd409636656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>changeListenerCallback</name>
      <anchor>adfa2078c162875318e5aade2eb5c9dd4</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <name>sliderValueChanged</name>
      <anchor>a7cd9f4d3a7c681e642b4d461302a55ac</anchor>
      <arglist>(Slider *)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>acf3a57f595a64aaaa0768624f2f0449e</anchor>
      <arglist>(const SliderPropertyComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>slider</name>
      <anchor>ad8b8be5be345c896926a581d86b88c16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SortedSet</name>
    <filename>classSortedSet.html</filename>
    <member kind="function">
      <name>ScopedLockType</name>
      <anchor>ae626f3b066a888141799190c37f35d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SortedSet</name>
      <anchor>af829f360acd201ddf956cdce4eb26abb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SortedSet</name>
      <anchor>af8461e46cb255507bf2650240a63e4a4</anchor>
      <arglist>(const SortedSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~SortedSet</name>
      <anchor>a4a10999991464935139ff91897a976ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ac242268004679915dca8949c60c69bfd</anchor>
      <arglist>(const SortedSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a39729b0716a9523f1a7b9e5b3b61c1d7</anchor>
      <arglist>(const SortedSet&lt; ElementType &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a851244ca69a8df8f62220052f79f9019</anchor>
      <arglist>(const SortedSet&lt; ElementType &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>ac3bbf6b0b1b5310fa684b0201d939d59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearQuick</name>
      <anchor>a7124856fe5b2079d29ee426380115732</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>af36db13c1edb591dd7a85cad45327505</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>ac88f445472f925d0e15bc1615aaa8547</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>getUnchecked</name>
      <anchor>a6164f9280b0c43a89984be902a3b1d7c</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <name>getFirst</name>
      <anchor>a7ddd51c2e54cbf983b8dee91e72a1c63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLast</name>
      <anchor>a24eedac5304a13fee36aa2b71a695670</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>add68ef6208f8635728edc2309ea58015</anchor>
      <arglist>(const ElementType elementToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>a753c6d9821aeee85c2344f4062ea1465</anchor>
      <arglist>(const ElementType elementToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>ae06b219c9a270a4a06b58c3e858450e5</anchor>
      <arglist>(const ElementType newElement)</arglist>
    </member>
    <member kind="function">
      <name>addArray</name>
      <anchor>a828f1a3b86d3199754ee1f326807a9f4</anchor>
      <arglist>(const ElementType *elementsToAdd, int numElementsToAdd)</arglist>
    </member>
    <member kind="function">
      <name>addSet</name>
      <anchor>a630170924cf9a75cf6cdd6604b2068d5</anchor>
      <arglist>(const OtherSetType &amp;setToAddFrom, int startIndex=0, int numElementsToAdd=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>a32faaf0446524d11c4d3163bc65104d2</anchor>
      <arglist>(const int indexToRemove)</arglist>
    </member>
    <member kind="function">
      <name>removeValue</name>
      <anchor>a95aa44ff414ea421402e295a645a3b4b</anchor>
      <arglist>(const ElementType valueToRemove)</arglist>
    </member>
    <member kind="function">
      <name>removeValuesIn</name>
      <anchor>a228889a4032bb57fd7527e45bc4e0cef</anchor>
      <arglist>(const OtherSetType &amp;otherSet)</arglist>
    </member>
    <member kind="function">
      <name>removeValuesNotIn</name>
      <anchor>aa125dff441969bbb1aa066ef4e2a232f</anchor>
      <arglist>(const OtherSetType &amp;otherSet)</arglist>
    </member>
    <member kind="function">
      <name>minimiseStorageOverheads</name>
      <anchor>a6585940e70e7314b3be5a0910fb3e46f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getLock</name>
      <anchor>a3dc2d91cc686d548dc033ff707d52801</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSet</name>
    <filename>classSparseSet.html</filename>
    <member kind="function">
      <name>SparseSet</name>
      <anchor>a7d68b624199ec2f71e9ec1519c4fcd3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SparseSet</name>
      <anchor>a9db453b88c6f983047f2920412b7c559</anchor>
      <arglist>(const SparseSet&lt; Type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~SparseSet</name>
      <anchor>a4e7a05e8332fb365f23d3db66a44be5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a7d2fc6674ce3c6c0c52d720d88752339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>ac072620e906b252610cd58ec440cb5ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>abb774559c4dd7fa498095539c22e9df1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>ae3bde50cb008b1abf63a110c73ce198d</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>a012b4ce66f31a8666bd818e18a6081de</anchor>
      <arglist>(const Type valueToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>getNumRanges</name>
      <anchor>a0cf0b27046e81aca12c897e8d9867d38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRange</name>
      <anchor>a03bf7f1843d5d1f294e98f20161afd01</anchor>
      <arglist>(const int rangeIndex, Type &amp;startValue, Type &amp;numValues) const </arglist>
    </member>
    <member kind="function">
      <name>getTotalRange</name>
      <anchor>ad0e2a45dc9556b85f6bca29b5e0b5249</anchor>
      <arglist>(Type &amp;lowestValue, Type &amp;highestValue) const </arglist>
    </member>
    <member kind="function">
      <name>addRange</name>
      <anchor>a885a8179e2b76b45ca129b55f1542d16</anchor>
      <arglist>(const Type firstValue, const Type numValuesToAdd)</arglist>
    </member>
    <member kind="function">
      <name>removeRange</name>
      <anchor>add465089aa2b3936fb466567a76c60d3</anchor>
      <arglist>(const Type firstValue, const Type numValuesToRemove)</arglist>
    </member>
    <member kind="function">
      <name>invertRange</name>
      <anchor>a955575e6988f4ad9ffd0c220a147f8dc</anchor>
      <arglist>(const Type firstValue, const Type numValues)</arglist>
    </member>
    <member kind="function">
      <name>overlapsRange</name>
      <anchor>a0a46408d366da26729bd62715b664436</anchor>
      <arglist>(const Type firstValue, const Type numValues)</arglist>
    </member>
    <member kind="function">
      <name>containsRange</name>
      <anchor>ac5ebdbc9aa9ad711b01881b337a6f997</anchor>
      <arglist>(const Type firstValue, const Type numValues)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a2e668feed74b01d277008fcc352e9865</anchor>
      <arglist>(const SparseSet&lt; Type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>ab666fca500c29ee263b07981511647f1</anchor>
      <arglist>(const SparseSet&lt; Type &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SplashScreen</name>
    <base>Component</base>
    <base>Timer</base>
    <base>DeletedAtShutdown</base>
    <filename>classSplashScreen.html</filename>
    <member kind="function">
      <name>SplashScreen</name>
      <anchor>af7cda68255a26779cb49fd7a26d11492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~SplashScreen</name>
      <anchor>aeb6a4736f6f7b9bb880d606610c2ae1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>show</name>
      <anchor>a0ef7421a1f5d6cf09fc1ac2e3c4aacb1</anchor>
      <arglist>(const String &amp;title, Image *backgroundImage, int minimumTimeToDisplayFor, bool useDropShadow, bool removeOnMouseClick=true)</arglist>
    </member>
    <member kind="function">
      <name>show</name>
      <anchor>ae893e7677d1fd7bbdb88bce1552f0473</anchor>
      <arglist>(const String &amp;title, int width, int height, int minimumTimeToDisplayFor, bool useDropShadow, bool removeOnMouseClick=true)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a34808c6296a967dc30df803befbd95f4</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>timerCallback</name>
      <anchor>a7e815c2cd0b6db55ca65e275af05a5c8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StreamingSocket</name>
    <filename>classStreamingSocket.html</filename>
    <member kind="function">
      <name>StreamingSocket</name>
      <anchor>a280e9f29da54da9a828c920d734cc580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~StreamingSocket</name>
      <anchor>aaed4b1879a7f212cf95382b418d03210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bindToPort</name>
      <anchor>aa0788414f9c3f08d1c5adddf5481e17a</anchor>
      <arglist>(int localPortNumber)</arglist>
    </member>
    <member kind="function">
      <name>connect</name>
      <anchor>a42934b3f0d68f46f29cc7bb5d1067c33</anchor>
      <arglist>(const String &amp;remoteHostname, int remotePortNumber, int timeOutMillisecs=3000)</arglist>
    </member>
    <member kind="function">
      <name>isConnected</name>
      <anchor>a8a5dc0c41566d3554cf37fe4a8661ffa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>a59ad8b03c9b5ef8572f9b159d3a411d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getHostName</name>
      <anchor>a59df6012d975f91ee11aaa96186faa31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getPort</name>
      <anchor>a1af8c75be57806ad47d98b48cc5c42d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isLocal</name>
      <anchor>a61a8b81fc7009650e0efeaf2cdc27e9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>waitUntilReady</name>
      <anchor>a8c737d5e12af2540e282d159379163ba</anchor>
      <arglist>(bool readyForReading, int timeoutMsecs) const </arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>ac048823c044a47600f7f1036c730b934</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead, bool blockUntilSpecifiedAmountHasArrived)</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>a90721593b92401ecd20aae2c68d3d446</anchor>
      <arglist>(const void *sourceBuffer, int numBytesToWrite)</arglist>
    </member>
    <member kind="function">
      <name>createListener</name>
      <anchor>a67541adc1ba7214be278e0c61cc40b20</anchor>
      <arglist>(int portNumber, const String &amp;localHostName=String::empty)</arglist>
    </member>
    <member kind="function">
      <name>waitForNextConnection</name>
      <anchor>a97ed9152008fc7af303330a5e5357990</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StretchableLayoutManager</name>
    <filename>classStretchableLayoutManager.html</filename>
    <member kind="function">
      <name>StretchableLayoutManager</name>
      <anchor>a1fc7dc605c628265d33d6d189df8dbdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~StretchableLayoutManager</name>
      <anchor>ac163f26b08dba15724f71e846a204e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setItemLayout</name>
      <anchor>ad06dde1deb392bbe53d9c642302a3e01</anchor>
      <arglist>(int itemIndex, double minimumSize, double maximumSize, double preferredSize)</arglist>
    </member>
    <member kind="function">
      <name>getItemLayout</name>
      <anchor>a32ffdb00b54dabac8a4112bda1ac8448</anchor>
      <arglist>(int itemIndex, double &amp;minimumSize, double &amp;maximumSize, double &amp;preferredSize) const </arglist>
    </member>
    <member kind="function">
      <name>clearAllItems</name>
      <anchor>a11eb6cecef28d174591a4f638807631d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>layOutComponents</name>
      <anchor>a8276cd18109ff9bb5220b1d91dad1c90</anchor>
      <arglist>(Component **components, int numComponents, int x, int y, int width, int height, bool vertically, bool resizeOtherDimension)</arglist>
    </member>
    <member kind="function">
      <name>getItemCurrentPosition</name>
      <anchor>a6f399ccd3cdd1d321eca0b30ee703b3e</anchor>
      <arglist>(int itemIndex) const </arglist>
    </member>
    <member kind="function">
      <name>getItemCurrentAbsoluteSize</name>
      <anchor>a54e180632e051cd00e28d67e36e6efc5</anchor>
      <arglist>(int itemIndex) const </arglist>
    </member>
    <member kind="function">
      <name>getItemCurrentRelativeSize</name>
      <anchor>a69f950ff072fcef5d6ec5d77c6290452</anchor>
      <arglist>(int itemIndex) const </arglist>
    </member>
    <member kind="function">
      <name>setItemPosition</name>
      <anchor>a8c9f25baf3358d5b5ba1619fdac75e83</anchor>
      <arglist>(int itemIndex, int newPosition)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StretchableLayoutResizerBar</name>
    <base>Component</base>
    <filename>classStretchableLayoutResizerBar.html</filename>
    <member kind="function">
      <name>StretchableLayoutResizerBar</name>
      <anchor>a72bc8f86edf82663bf96e0fbe9461b66</anchor>
      <arglist>(StretchableLayoutManager *layoutToUse, int itemIndexInLayout, bool isBarVertical)</arglist>
    </member>
    <member kind="function">
      <name>~StretchableLayoutResizerBar</name>
      <anchor>adc972115e568ac01a46cb8160fac541a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasBeenMoved</name>
      <anchor>a5d834f357c63282771d060f90728f618</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>aef7272c94bb9e414c0ee87b4d791d8d3</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a1198f599325ca14d76f25e97b8582fdb</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>ab3eae1e4825fdb005b1eb60b3f717f3f</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StretchableObjectResizer</name>
    <filename>classStretchableObjectResizer.html</filename>
    <member kind="function">
      <name>StretchableObjectResizer</name>
      <anchor>ad8e6c2a4601296f009139eab0564df32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~StretchableObjectResizer</name>
      <anchor>a580207274ce3254eaab02f2781f13bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>a2f4ade92ab81712e4556770ecfb81cd0</anchor>
      <arglist>(double currentSize, double minSize, double maxSize, int order=0)</arglist>
    </member>
    <member kind="function">
      <name>resizeToFit</name>
      <anchor>ad91dce94a524b769b10c663eec6f0b4e</anchor>
      <arglist>(double targetSize)</arglist>
    </member>
    <member kind="function">
      <name>getNumItems</name>
      <anchor>a2c41ee10c15e32a71880ecddc3d82129</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getItemSize</name>
      <anchor>a29b2d48f8835b60974d32bfe35e7d70a</anchor>
      <arglist>(int index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>String</name>
    <filename>classString.html</filename>
    <member kind="function">
      <name>String</name>
      <anchor>a8a7ef356e05eb9b1ea1ab518baee3095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>afc158dffcdf56e601bd640cbacdfcd3c</anchor>
      <arglist>(const String &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>a536209bdc6da85c29369073bed2bfd45</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>ad6ae56068e13148c8b055020c7234966</anchor>
      <arglist>(const char *text, size_t maxChars)</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>a0ec207be259ee0defaa5daeaa0d002d6</anchor>
      <arglist>(const juce_wchar *unicodeText)</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>a75d55833c91af7dbc4ed007383e09bb5</anchor>
      <arglist>(const juce_wchar *unicodeText, size_t maxChars)</arglist>
    </member>
    <member kind="function">
      <name>~String</name>
      <anchor>ac40b2a3fb58c2d8556f5e6ff73510036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>ad7ee58d05b03f2b8cfe72baf238534c3</anchor>
      <arglist>(int decimalInteger)</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>a0415a1afd9ce1b22782e17f3e4b8a0d2</anchor>
      <arglist>(unsigned int decimalInteger)</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>a936b34985edfafa5b9534c7fbfb3fba3</anchor>
      <arglist>(short decimalInteger)</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>a154fd82b5d27d12a4fd5897571064720</anchor>
      <arglist>(unsigned short decimalInteger)</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>a09febd27242ddf3a4c686174d555ce32</anchor>
      <arglist>(int64 largeIntegerValue)</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>a2f79c46cac832786e093c534be743041</anchor>
      <arglist>(uint64 largeIntegerValue)</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>ab76b4658593e5d53e8fecefe5abbe18d</anchor>
      <arglist>(float floatValue, int numberOfDecimalPlaces=0)</arglist>
    </member>
    <member kind="function">
      <name>String</name>
      <anchor>a21fcb5bd9ddc51bfaa8d6b86ad0b98b8</anchor>
      <arglist>(double doubleValue, int numberOfDecimalPlaces=0)</arglist>
    </member>
    <member kind="function">
      <name>charToString</name>
      <anchor>a208e73e11976ba0a270a843fe02f49f6</anchor>
      <arglist>(juce_wchar character)</arglist>
    </member>
    <member kind="function">
      <name>hashCode</name>
      <anchor>aaae288467a178922c43652a6805586b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hashCode64</name>
      <anchor>adaac38611377f760d5eaf69a9b7a1144</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>a95e2c755f8c52acb806208bd6d8b4ad1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>acc185079250e240293e4b2ccf570c1c3</anchor>
      <arglist>(const String &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>a820f766039bcfc397ec782988acb8376</anchor>
      <arglist>(const juce_wchar *textToAppend)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>a2db09f6036aa16fb8853049c31ebae72</anchor>
      <arglist>(const String &amp;stringToAppend)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>a9eac6350a4e708212a953fd4d7a08046</anchor>
      <arglist>(char characterToAppend)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>acaa9572adabddf956924bf13830a7ece</anchor>
      <arglist>(juce_wchar characterToAppend)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>ae19f504049d540cd2dd23021584143df</anchor>
      <arglist>(int numberToAppend)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>a579d7c4902ee9246234bdcb07a70ade1</anchor>
      <arglist>(unsigned int numberToAppend)</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>a4e16611a8efb5eaf3ab2f528f7a38680</anchor>
      <arglist>(const juce_wchar *textToAppend, int maxCharsToTake)</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>a2e3f864b93892db8d733374c99c63e8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isNotEmpty</name>
      <anchor>a747e905e5393704660ad596908d7bcbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>equalsIgnoreCase</name>
      <anchor>aaaebf012d7d8b47c3503a349f3cd406b</anchor>
      <arglist>(const String &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>equalsIgnoreCase</name>
      <anchor>aeef18544a4d07bca1a024545ea29cf87</anchor>
      <arglist>(const juce_wchar *other) const </arglist>
    </member>
    <member kind="function">
      <name>equalsIgnoreCase</name>
      <anchor>a1f68a6500f87be64a02066f55eeb136f</anchor>
      <arglist>(const char *other) const </arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>abf36b54a3e7dbfaddef4cce76574c3e4</anchor>
      <arglist>(const String &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>a7c657b934bf8e91c7be8a6c532d2fed9</anchor>
      <arglist>(const char *other) const </arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>a0ded317384d99d3b3f85cde0274a3673</anchor>
      <arglist>(const juce_wchar *other) const </arglist>
    </member>
    <member kind="function">
      <name>compareIgnoreCase</name>
      <anchor>a07d25662272f8611c20cb35ab6dfe7a9</anchor>
      <arglist>(const String &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>compareLexicographically</name>
      <anchor>a25e1b9e052196f990bf5df56d021eb7a</anchor>
      <arglist>(const String &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>startsWith</name>
      <anchor>aa75fb14f549420d44a810a26092e5755</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <name>startsWithChar</name>
      <anchor>af7881ea2e9a9b5bcac89d4e821c93913</anchor>
      <arglist>(juce_wchar character) const </arglist>
    </member>
    <member kind="function">
      <name>startsWithIgnoreCase</name>
      <anchor>a790d4713d343f47fe6f7eed03a512d9b</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <name>endsWith</name>
      <anchor>a5f2ea9f6ac3d08d0bc0f0d90368e635b</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <name>endsWithChar</name>
      <anchor>ab62299afb1ba203305bebe63f802daca</anchor>
      <arglist>(juce_wchar character) const </arglist>
    </member>
    <member kind="function">
      <name>endsWithIgnoreCase</name>
      <anchor>a1be89fca1936061b8728b5c9d17acbb7</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>ad095b161e4ba95c663066d9c0751caa2</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <name>containsChar</name>
      <anchor>ae0d0686d3d201c13e88ab9d97d777800</anchor>
      <arglist>(juce_wchar character) const </arglist>
    </member>
    <member kind="function">
      <name>containsIgnoreCase</name>
      <anchor>abd66fa933b5030f3836f3fa65f12f786</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <name>containsWholeWord</name>
      <anchor>a78029c7a69f1b829cc4ed7c012beac54</anchor>
      <arglist>(const String &amp;wordToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>containsWholeWordIgnoreCase</name>
      <anchor>afef47b8d8b73596d3ddfd01380e1fd4c</anchor>
      <arglist>(const String &amp;wordToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>indexOfWholeWord</name>
      <anchor>a5df7680e8ced77311f217e3445728251</anchor>
      <arglist>(const String &amp;wordToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>indexOfWholeWordIgnoreCase</name>
      <anchor>aa66461b0481e7f9accf1ab9961fc60ba</anchor>
      <arglist>(const String &amp;wordToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>containsAnyOf</name>
      <anchor>a84864eb6958fcc46f229b21de8c5b60f</anchor>
      <arglist>(const String &amp;charactersItMightContain) const </arglist>
    </member>
    <member kind="function">
      <name>containsOnly</name>
      <anchor>ae459e365caa4b24250ff002652798460</anchor>
      <arglist>(const String &amp;charactersItMightContain) const </arglist>
    </member>
    <member kind="function">
      <name>containsNonWhitespaceChars</name>
      <anchor>acf2ab53496c9c4c7efa575814663b2da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>matchesWildcard</name>
      <anchor>ada1c87a88a1b5ae842bc3536d1bcb4dc</anchor>
      <arglist>(const String &amp;wildcard, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <name>indexOfChar</name>
      <anchor>ae62310e01405ebac61950f39b10db640</anchor>
      <arglist>(juce_wchar characterToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>indexOfChar</name>
      <anchor>a5bd8ad1056a887f868ff2e100ea674a7</anchor>
      <arglist>(int startIndex, juce_wchar characterToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>indexOfAnyOf</name>
      <anchor>af1c4cedab517befa965d5ea37412249b</anchor>
      <arglist>(const String &amp;charactersToLookFor, int startIndex=0, bool ignoreCase=false) const </arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>a5a21b88a74bf6e4ca5d69ee33abbccc1</anchor>
      <arglist>(const String &amp;text) const </arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>a4699d61c71a6d5166cd618793ce27d3c</anchor>
      <arglist>(int startIndex, const String &amp;textToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>indexOfIgnoreCase</name>
      <anchor>ab12ed61be20c9b302c99b191f6f6d28c</anchor>
      <arglist>(const String &amp;textToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>indexOfIgnoreCase</name>
      <anchor>a67fa9dccdb019dc8ae1e3354d621e606</anchor>
      <arglist>(int startIndex, const String &amp;textToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>lastIndexOfChar</name>
      <anchor>a312e81bbb52a626cf900193e69fac7ed</anchor>
      <arglist>(juce_wchar character) const </arglist>
    </member>
    <member kind="function">
      <name>lastIndexOf</name>
      <anchor>a38ffe0ae6778314030a0ce95f10fc906</anchor>
      <arglist>(const String &amp;textToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>lastIndexOfIgnoreCase</name>
      <anchor>a86edaf7d382abe7b5cb46fa633566e65</anchor>
      <arglist>(const String &amp;textToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>lastIndexOfAnyOf</name>
      <anchor>a26c7e3193aeb1d8f5f4c81e3ea084376</anchor>
      <arglist>(const String &amp;charactersToLookFor, bool ignoreCase=false) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>ab2011338a012d8bb4ef1578967a372c8</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>a9a5ac2796e2d259956d11aa9f80c9cf6</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>getLastCharacter</name>
      <anchor>a4ac2f78242028b1a419b765f5f8aca95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>substring</name>
      <anchor>a0f98da68205e0f82a8cc8f2b9d06bd94</anchor>
      <arglist>(int startIndex, int endIndex) const </arglist>
    </member>
    <member kind="function">
      <name>substring</name>
      <anchor>ad521656a2b3640fc0f27959897d7061a</anchor>
      <arglist>(int startIndex) const </arglist>
    </member>
    <member kind="function">
      <name>dropLastCharacters</name>
      <anchor>a3e69b4ba7632c78c1286d4a6959fc3a7</anchor>
      <arglist>(int numberToDrop) const </arglist>
    </member>
    <member kind="function">
      <name>getLastCharacters</name>
      <anchor>a4923dc434e5fb08cfaee4efee44f2174</anchor>
      <arglist>(int numCharacters) const </arglist>
    </member>
    <member kind="function">
      <name>fromFirstOccurrenceOf</name>
      <anchor>a865dbaeba67c70798e2b278433ad23a3</anchor>
      <arglist>(const String &amp;substringToStartFrom, bool includeSubStringInResult, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <name>fromLastOccurrenceOf</name>
      <anchor>a499629fbfbcc746a8a26df55fc438f44</anchor>
      <arglist>(const String &amp;substringToFind, bool includeSubStringInResult, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <name>upToFirstOccurrenceOf</name>
      <anchor>a4808a2c949887de3013c58b4607d236f</anchor>
      <arglist>(const String &amp;substringToEndWith, bool includeSubStringInResult, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <name>upToLastOccurrenceOf</name>
      <anchor>a7a289bc68ef473459889e14d11f74b5b</anchor>
      <arglist>(const String &amp;substringToFind, bool includeSubStringInResult, bool ignoreCase) const </arglist>
    </member>
    <member kind="function">
      <name>trim</name>
      <anchor>ae62ef1f51684c6a688d22236826a9989</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>trimStart</name>
      <anchor>a64bc10a67849785d3a9932bde5099388</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>trimEnd</name>
      <anchor>a0547b9f0138c532ff448db9f5b0118bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>trimCharactersAtStart</name>
      <anchor>a5a3738ec9218784cc82320aed939b5e9</anchor>
      <arglist>(const String &amp;charactersToTrim) const </arglist>
    </member>
    <member kind="function">
      <name>trimCharactersAtEnd</name>
      <anchor>a7b5be86a521bbcdbc23ea0f2be9db7d4</anchor>
      <arglist>(const String &amp;charactersToTrim) const </arglist>
    </member>
    <member kind="function">
      <name>toUpperCase</name>
      <anchor>aedc384a39150cc9080cbf550b64dec8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>toLowerCase</name>
      <anchor>abbf85ea7e89af50a79888f40b92862f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>replaceSection</name>
      <anchor>a13c2c07444bcd67c8a044201760c0bfb</anchor>
      <arglist>(int startIndex, int numCharactersToReplace, const String &amp;stringToInsert) const </arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>aa63308508100ce12d1b8560dd0600bba</anchor>
      <arglist>(const String &amp;stringToReplace, const String &amp;stringToInsertInstead, bool ignoreCase=false) const </arglist>
    </member>
    <member kind="function">
      <name>replaceCharacter</name>
      <anchor>a1cc05d8de90ca0768f3b7ccdefcc3624</anchor>
      <arglist>(juce_wchar characterToReplace, juce_wchar characterToInsertInstead) const </arglist>
    </member>
    <member kind="function">
      <name>replaceCharacters</name>
      <anchor>a7d179bd76b4df002803f5d716fa357c2</anchor>
      <arglist>(const String &amp;charactersToReplace, const String &amp;charactersToInsertInstead) const </arglist>
    </member>
    <member kind="function">
      <name>retainCharacters</name>
      <anchor>a5bf3e354bcddddbe83edb4f3c8c49fef</anchor>
      <arglist>(const String &amp;charactersToRetain) const </arglist>
    </member>
    <member kind="function">
      <name>removeCharacters</name>
      <anchor>a932a8701345bd93efd90a01f9a064402</anchor>
      <arglist>(const String &amp;charactersToRemove) const </arglist>
    </member>
    <member kind="function">
      <name>initialSectionContainingOnly</name>
      <anchor>a7915b7eed1d0add9eac950b941c64a13</anchor>
      <arglist>(const String &amp;permittedCharacters) const </arglist>
    </member>
    <member kind="function">
      <name>initialSectionNotContaining</name>
      <anchor>ab0a0e3856bd22cffd9470ac2fe4520e4</anchor>
      <arglist>(const String &amp;charactersToStopAt) const </arglist>
    </member>
    <member kind="function">
      <name>isQuotedString</name>
      <anchor>ad7383efa79a52af75128879bfbde4f62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>unquoted</name>
      <anchor>a10d29423f87ba5d410e6372f3dc1f96e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>quoted</name>
      <anchor>a9725b5c4950f3d4b1817862349164db9</anchor>
      <arglist>(juce_wchar quoteCharacter= &apos;&quot;&apos;) const </arglist>
    </member>
    <member kind="function">
      <name>repeatedString</name>
      <anchor>a3d8f0d5ab790d33124f78ba74e4aef91</anchor>
      <arglist>(const String &amp;stringToRepeat, int numberOfTimesToRepeat)</arglist>
    </member>
    <member kind="function">
      <name>paddedLeft</name>
      <anchor>aab887d65245b32d1ed2cbad7fa8dc65a</anchor>
      <arglist>(juce_wchar padCharacter, int minimumLength) const </arglist>
    </member>
    <member kind="function">
      <name>paddedRight</name>
      <anchor>aa21ef35dfe0671096374d2f222e35389</anchor>
      <arglist>(juce_wchar padCharacter, int minimumLength) const </arglist>
    </member>
    <member kind="function">
      <name>createStringFromData</name>
      <anchor>ae39ac3886e9cd6b9cce7a7f023089bab</anchor>
      <arglist>(const void *data, int size)</arglist>
    </member>
    <member kind="function">
      <name>formatted</name>
      <anchor>a60d7d319dc532b03bb46461ef37c0741</anchor>
      <arglist>(const juce_wchar *formatString,...)</arglist>
    </member>
    <member kind="function">
      <name>getIntValue</name>
      <anchor>abcc5bd55d6e5ab2b5e661b4c39207755</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLargeIntValue</name>
      <anchor>a5f5c9b1408fa2ed8dd46c4ee15c82ef9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTrailingIntValue</name>
      <anchor>a361a482ab55d08241773900dfd4c5637</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFloatValue</name>
      <anchor>a0a08e38ecea1a2247655b981090df5f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDoubleValue</name>
      <anchor>ad7d067041fd7eb8168f1529028e25a2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHexValue32</name>
      <anchor>a68324cf1c646707317da4e4940a0356f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHexValue64</name>
      <anchor>a9fde37d80b7a3b6528e08343e0fceb20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>toHexString</name>
      <anchor>adf04c798cb45326a4b269b6235b3b2cf</anchor>
      <arglist>(int number)</arglist>
    </member>
    <member kind="function">
      <name>toHexString</name>
      <anchor>a813c0450b010c4f3b64b9eb28fe3b35d</anchor>
      <arglist>(int64 number)</arglist>
    </member>
    <member kind="function">
      <name>toHexString</name>
      <anchor>ac95d1d5de3b7c760fd3545a278ac2dcb</anchor>
      <arglist>(short number)</arglist>
    </member>
    <member kind="function">
      <name>toHexString</name>
      <anchor>af51c6f2701f73436071cf96cd2c44a7b</anchor>
      <arglist>(const unsigned char *data, int size, int groupSize=1)</arglist>
    </member>
    <member kind="function">
      <name>operator const juce_wchar *</name>
      <anchor>ac12bf7f3c00b14bb601951402132aee0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator juce_wchar *</name>
      <anchor>ab4256c7586d58ab146774bfa2e5c0653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toUTF8</name>
      <anchor>a702cac2bd086ce872d49ec63189a6f8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>fromUTF8</name>
      <anchor>aac58c1083de7d576bf51ff2d70d11fed</anchor>
      <arglist>(const char *utf8buffer, int bufferSizeBytes=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>getNumBytesAsUTF8</name>
      <anchor>ad024bc1b6144ad0c98ae6e4dbbf02665</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>copyToUTF8</name>
      <anchor>a60e2ba4fda3daace9c4e488444b6a064</anchor>
      <arglist>(char *destBuffer, int maxBufferSizeBytes) const </arglist>
    </member>
    <member kind="function">
      <name>toCString</name>
      <anchor>ab3031cbbf8b07d9563c9d7db30916bbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumBytesAsCString</name>
      <anchor>a95c985a4085e329b36f2c67937903511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>copyToCString</name>
      <anchor>a784c99fc9b9371ac2f58a1df4d1a1015</anchor>
      <arglist>(char *destBuffer, int maxBufferSizeBytes) const </arglist>
    </member>
    <member kind="function">
      <name>copyToUnicode</name>
      <anchor>aad6090d8567e5dbd4ac736cae0df6558</anchor>
      <arglist>(juce_wchar *destBuffer, int maxCharsToCopy) const </arglist>
    </member>
    <member kind="function">
      <name>preallocateStorage</name>
      <anchor>a8cbd66b1eea381b470348241554ba32f</anchor>
      <arglist>(size_t numCharsNeeded)</arglist>
    </member>
    <member kind="function">
      <name>swapWith</name>
      <anchor>aef7eee695cb7a140b9f42e95bf804c88</anchor>
      <arglist>(String &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>empty</name>
      <anchor>afd02116a5571fcc8bc1e6fdabe132a85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>String::Concatenator</name>
    <filename>classString_1_1Concatenator.html</filename>
    <member kind="function">
      <name>Concatenator::Concatenator</name>
      <anchor>abd75a73ca9e4ae566d436ac8d179c174</anchor>
      <arglist>(String &amp;stringToAppendTo)</arglist>
    </member>
    <member kind="function">
      <name>Concatenator::~Concatenator</name>
      <anchor>afc675960e3422eee1074b57eec57362a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Concatenator::append</name>
      <anchor>ada7f6015f0c3afe19a557110580746fc</anchor>
      <arglist>(const String &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringArray</name>
    <filename>classStringArray.html</filename>
    <member kind="function">
      <name>StringArray</name>
      <anchor>a02f4a1dc1bc63b44c4aeafe174b3b681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>StringArray</name>
      <anchor>a7b89edabb76709dec47993070c8f1620</anchor>
      <arglist>(const StringArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>StringArray</name>
      <anchor>ae6f14ef13b38675c347588118e0c8292</anchor>
      <arglist>(const String &amp;firstValue)</arglist>
    </member>
    <member kind="function">
      <name>StringArray</name>
      <anchor>a1559fa6624908f6d1e78a0f09e7667fc</anchor>
      <arglist>(const juce_wchar **strings, int numberOfStrings)</arglist>
    </member>
    <member kind="function">
      <name>StringArray</name>
      <anchor>a535de7b3a024b11f1a2cef5123f71d83</anchor>
      <arglist>(const char **strings, int numberOfStrings)</arglist>
    </member>
    <member kind="function">
      <name>StringArray</name>
      <anchor>a8fe5a2df7258febcf42ba5bf9bb700bd</anchor>
      <arglist>(const juce_wchar **strings)</arglist>
    </member>
    <member kind="function">
      <name>StringArray</name>
      <anchor>a3f8b8a7a31ef4f90552af0c40536e376</anchor>
      <arglist>(const char **strings)</arglist>
    </member>
    <member kind="function">
      <name>~StringArray</name>
      <anchor>af1fc945005ae8a218d30c3281e0b64bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ab8e3f64e6c4d318b7fa7f9e79217fe41</anchor>
      <arglist>(const StringArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>aa8820d22469f745511110089805c7cb1</anchor>
      <arglist>(const StringArray &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a59ffb259a321b8bcfc030311cffa6522</anchor>
      <arglist>(const StringArray &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>aca12cff08f323341b9b72ef20471d795</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>a68f5bc077995ed38119aa4af70a34606</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>adc4da83582a4b67981d97c5e568b8e59</anchor>
      <arglist>(const String &amp;stringToLookFor, bool ignoreCase=false) const </arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>aaad95afdc99eb15d43a3cd7ad18cccb2</anchor>
      <arglist>(const String &amp;stringToLookFor, bool ignoreCase=false, int startIndex=0) const </arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>ac0e8e4b0c3d3345b9ee429c00571bb6e</anchor>
      <arglist>(const String &amp;stringToAdd)</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>a29578712f416e2fd49c201e81aecf7a6</anchor>
      <arglist>(int index, const String &amp;stringToAdd)</arglist>
    </member>
    <member kind="function">
      <name>addIfNotAlreadyThere</name>
      <anchor>ad5747b79e404fc96a5cd83074dba74da</anchor>
      <arglist>(const String &amp;stringToAdd, bool ignoreCase=false)</arglist>
    </member>
    <member kind="function">
      <name>set</name>
      <anchor>a89bafb28cdb58cf763fd31d46be4fcb2</anchor>
      <arglist>(int index, const String &amp;newString)</arglist>
    </member>
    <member kind="function">
      <name>addArray</name>
      <anchor>a8956efc061115a5e6a6942e23bb54e94</anchor>
      <arglist>(const StringArray &amp;other, int startIndex=0, int numElementsToAdd=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>addTokens</name>
      <anchor>a4db768027b40abe822ffb3d381038be4</anchor>
      <arglist>(const String &amp;stringToTokenise, bool preserveQuotedStrings)</arglist>
    </member>
    <member kind="function">
      <name>addTokens</name>
      <anchor>a574a8ab997035c80db9814a3201eeef7</anchor>
      <arglist>(const String &amp;stringToTokenise, const String &amp;breakCharacters, const String &amp;quoteCharacters)</arglist>
    </member>
    <member kind="function">
      <name>addLines</name>
      <anchor>a0aaf4354a3acec6c6bde90c1328d0064</anchor>
      <arglist>(const String &amp;stringToBreakUp)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a8fd0efd89f558e84cda917aa3ecc3525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>ae27471eb302af1a8d7b6c926f3ea1493</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>removeString</name>
      <anchor>ad4b81b9cdbf6bd2beac62abb9ee0d71b</anchor>
      <arglist>(const String &amp;stringToRemove, bool ignoreCase=false)</arglist>
    </member>
    <member kind="function">
      <name>removeDuplicates</name>
      <anchor>a7b58a0f51932aac6b39becff596d45fe</anchor>
      <arglist>(bool ignoreCase)</arglist>
    </member>
    <member kind="function">
      <name>removeEmptyStrings</name>
      <anchor>aa2e6e609b16c3169e07d8668bf2b7a52</anchor>
      <arglist>(bool removeWhitespaceStrings=true)</arglist>
    </member>
    <member kind="function">
      <name>move</name>
      <anchor>aa3c625b43882d40962525d1122633237</anchor>
      <arglist>(int currentIndex, int newIndex)</arglist>
    </member>
    <member kind="function">
      <name>trim</name>
      <anchor>ad490560fcac30925d422ad98709ca361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>appendNumbersToDuplicates</name>
      <anchor>aea9e0cca32116b1e66abbb5dedead929</anchor>
      <arglist>(bool ignoreCaseWhenComparing, bool appendNumberToFirstInstance, const juce_wchar *preNumberString=0, const juce_wchar *postNumberString=0)</arglist>
    </member>
    <member kind="function">
      <name>joinIntoString</name>
      <anchor>aef46f61f5a0b9c68d7f9a97bfe7cddd6</anchor>
      <arglist>(const String &amp;separatorString, int startIndex=0, int numberOfElements=&amp;#45;1) const </arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>a4ff31dc08e6e33f3ba95ebdc296e3659</anchor>
      <arglist>(bool ignoreCase)</arglist>
    </member>
    <member kind="function">
      <name>minimiseStorageOverheads</name>
      <anchor>ad918c336c4ce47a405e1f718e1e8215d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringPairArray</name>
    <filename>classStringPairArray.html</filename>
    <member kind="function">
      <name>StringPairArray</name>
      <anchor>a606a520b01b1c8505ae5bba847ac0d85</anchor>
      <arglist>(bool ignoreCaseWhenComparingKeys=true)</arglist>
    </member>
    <member kind="function">
      <name>StringPairArray</name>
      <anchor>ae9d7222fa917d07fa51815681bd61f50</anchor>
      <arglist>(const StringPairArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~StringPairArray</name>
      <anchor>a0e01064c8cd1ae16f106673552306d99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a2d261429821952f6a05d4b198c921486</anchor>
      <arglist>(const StringPairArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a186c24a07562694f96648eb289c0ef1a</anchor>
      <arglist>(const StringPairArray &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a07d7939477e62a9c5662a1099efe581e</anchor>
      <arglist>(const StringPairArray &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>aba6436a243cbe56589bebb157631aba6</anchor>
      <arglist>(const String &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>getValue</name>
      <anchor>ac4a2aa6477af3b3886fc001c8d2787a0</anchor>
      <arglist>(const String &amp;key, const String &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <name>getAllKeys</name>
      <anchor>a305f5828b402409588d7d743493c74a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAllValues</name>
      <anchor>a64766b87daae0babb48b9c907d289487</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>a6c9dd63580c6d7c2bfdd99a4131f0df4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>set</name>
      <anchor>a1a9a1f077d33f143b50628bd35f69516</anchor>
      <arglist>(const String &amp;key, const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>addArray</name>
      <anchor>a15be7425b909b9aded5eddf69f096466</anchor>
      <arglist>(const StringPairArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a79f8a87870700e5cb53a5a4f5d05658f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>a72585f509542e1d89b62d7d3dee3d5bd</anchor>
      <arglist>(const String &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>aafc00fcda71c9832f6f77f0fba7c781e</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>setIgnoresCase</name>
      <anchor>a6d884d5d61f3617e2290bba08fa4effa</anchor>
      <arglist>(bool shouldIgnoreCase)</arglist>
    </member>
    <member kind="function">
      <name>getDescription</name>
      <anchor>a0b551fdbc02b339ae528e9501efde682</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>minimiseStorageOverheads</name>
      <anchor>a35917c28f68b33afe84e2a22a373a67d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubregionStream</name>
    <base>InputStream</base>
    <filename>classSubregionStream.html</filename>
    <member kind="function">
      <name>SubregionStream</name>
      <anchor>adc9f6200b4539e1e22f5a2560c4af0cc</anchor>
      <arglist>(InputStream *sourceStream, int64 startPositionInSourceStream, int64 lengthOfSourceStream, bool deleteSourceWhenDestroyed)</arglist>
    </member>
    <member kind="function">
      <name>~SubregionStream</name>
      <anchor>a7729cd20a29f61514753c33992fda24f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTotalLength</name>
      <anchor>a47140edfd2f582525a2971025ac75277</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPosition</name>
      <anchor>a785b39add7d101ed5ecde3c16bf119f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>a011b4bb0fd01d80e3901696005ab5975</anchor>
      <arglist>(int64 newPosition)</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>a14cb61311f6d9fc4a1c514093a25d4c3</anchor>
      <arglist>(void *destBuffer, int maxBytesToRead)</arglist>
    </member>
    <member kind="function">
      <name>isExhausted</name>
      <anchor>a1d936df160f191fd241af35668cc64c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Synthesiser</name>
    <filename>classSynthesiser.html</filename>
    <member kind="function">
      <name>Synthesiser</name>
      <anchor>a8c313d6f1fa875790e5c79dc621ee437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~Synthesiser</name>
      <anchor>af92647b0dced33f5c3a99be3ddcfcd8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearVoices</name>
      <anchor>a94391dd12deab56c0fa8079fd97e7f55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumVoices</name>
      <anchor>afb3f01b6730e9e7c659c194f3a3d8650</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getVoice</name>
      <anchor>aa8987eca90d45f239d929b9f9fd47f45</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>addVoice</name>
      <anchor>af19e0c5d014f90b449b1cb181a62c2eb</anchor>
      <arglist>(SynthesiserVoice *newVoice)</arglist>
    </member>
    <member kind="function">
      <name>removeVoice</name>
      <anchor>a5478d766609fad27af17ed011f2422dd</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>clearSounds</name>
      <anchor>af6dc83c7e8c7ce8e06a5fe08ae2e3018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumSounds</name>
      <anchor>a74e51216670aab1b6255f7dcc32e8e65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSound</name>
      <anchor>ac483b3cd5d3b88af644f2a7666e00d89</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>addSound</name>
      <anchor>aebe84b667dc03e30e022733107e9271f</anchor>
      <arglist>(const SynthesiserSound::Ptr &amp;newSound)</arglist>
    </member>
    <member kind="function">
      <name>removeSound</name>
      <anchor>a4e90dec472345cac6c827fb402fd382f</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>setNoteStealingEnabled</name>
      <anchor>ae0bbfe2c3819167dc5d98b27b21843eb</anchor>
      <arglist>(bool shouldStealNotes)</arglist>
    </member>
    <member kind="function">
      <name>isNoteStealingEnabled</name>
      <anchor>a0900d9d16f30c26bd379095aefc1b38b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>noteOn</name>
      <anchor>a56c165d534e2d22a8b43914e5f35ef06</anchor>
      <arglist>(const int midiChannel, const int midiNoteNumber, const float velocity)</arglist>
    </member>
    <member kind="function">
      <name>noteOff</name>
      <anchor>a736e4facd7334f170da4882a39ce8dba</anchor>
      <arglist>(const int midiChannel, const int midiNoteNumber, const bool allowTailOff)</arglist>
    </member>
    <member kind="function">
      <name>allNotesOff</name>
      <anchor>ac0fb3be937a72eb457a1773c90df2454</anchor>
      <arglist>(const int midiChannel, const bool allowTailOff)</arglist>
    </member>
    <member kind="function">
      <name>handlePitchWheel</name>
      <anchor>adb70cfd1f6f0f718711c67098891b488</anchor>
      <arglist>(const int midiChannel, const int wheelValue)</arglist>
    </member>
    <member kind="function">
      <name>handleController</name>
      <anchor>a9f7d2dc9229c6aca3b91db75477c5ccb</anchor>
      <arglist>(const int midiChannel, const int controllerNumber, const int controllerValue)</arglist>
    </member>
    <member kind="function">
      <name>setCurrentPlaybackSampleRate</name>
      <anchor>a1152c50dc4cb078eff594742312057d7</anchor>
      <arglist>(const double sampleRate)</arglist>
    </member>
    <member kind="function">
      <name>renderNextBlock</name>
      <anchor>a6ef0f7f6a4b46a8f425dbadd976cf29f</anchor>
      <arglist>(AudioSampleBuffer &amp;outputAudio, const MidiBuffer &amp;inputMidi, int startSample, int numSamples)</arglist>
    </member>
    <member kind="function">
      <name>findFreeVoice</name>
      <anchor>af1e89b81afbd33e270cdf1fdd257ae03</anchor>
      <arglist>(SynthesiserSound *soundToPlay, const bool stealIfNoneAvailable) const </arglist>
    </member>
    <member kind="function">
      <name>startVoice</name>
      <anchor>a7004a46197236e29ae67916f8932d0a4</anchor>
      <arglist>(SynthesiserVoice *voice, SynthesiserSound *sound, int midiChannel, int midiNoteNumber, float velocity)</arglist>
    </member>
    <member kind="function">
      <name>findFreeVoice</name>
      <anchor>a440ea76cae3943da1cce6a24dc2e302a</anchor>
      <arglist>(const bool) const </arglist>
    </member>
    <member kind="function">
      <name>lock</name>
      <anchor>ab55f2810b6455736110264625a25c4a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>voices</name>
      <anchor>a260d964d6764a51b2315233e0bf76980</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sounds</name>
      <anchor>ac64f99f204a1d5a567422cd9d5217081</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lastPitchWheelValues</name>
      <anchor>acceafe04420ce625e025e4a73c370ce4</anchor>
      <arglist>[16]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SynthesiserSound</name>
    <base>ReferenceCountedObject</base>
    <filename>classSynthesiserSound.html</filename>
    <member kind="function">
      <name>Ptr</name>
      <anchor>a602e767cdfca63dd73df1f0d5c723ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SynthesiserSound</name>
      <anchor>a7446eb4d78aa0ce2dcd37ca1ff48dd3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~SynthesiserSound</name>
      <anchor>a1565fcdfa4362d7b25c29178b4d39b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>appliesToNote</name>
      <anchor>aba3bfbf894573d983c828226f0caa866</anchor>
      <arglist>(const int midiNoteNumber)=0</arglist>
    </member>
    <member kind="function">
      <name>appliesToChannel</name>
      <anchor>a8d8563fe005747b7204af21338031577</anchor>
      <arglist>(const int midiChannel)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SynthesiserVoice</name>
    <filename>classSynthesiserVoice.html</filename>
    <member kind="function">
      <name>SynthesiserVoice</name>
      <anchor>a365e31ac75ed304f623cb20d3dcc31fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~SynthesiserVoice</name>
      <anchor>a34687ca1d7fc823ad27b64eb4b508c07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCurrentlyPlayingNote</name>
      <anchor>a8881a4bc61717bcd30e3e6cd98db60a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentlyPlayingSound</name>
      <anchor>ad87642b1cb4fe03adaba4ad70bfbd25b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>canPlaySound</name>
      <anchor>a4dc1c03e1dd594ce63dbf0b6e8b57645</anchor>
      <arglist>(SynthesiserSound *sound)=0</arglist>
    </member>
    <member kind="function">
      <name>startNote</name>
      <anchor>a487f9f2b47ae9ae51c2e5196b4c09484</anchor>
      <arglist>(const int midiNoteNumber, const float velocity, SynthesiserSound *sound, const int currentPitchWheelPosition)=0</arglist>
    </member>
    <member kind="function">
      <name>stopNote</name>
      <anchor>a67a8d3e3cba87c2d2c6e7ac61b6ce48b</anchor>
      <arglist>(const bool allowTailOff)=0</arglist>
    </member>
    <member kind="function">
      <name>pitchWheelMoved</name>
      <anchor>a3b43eff5b1bc125d3fb6ca7ab30d8510</anchor>
      <arglist>(const int newValue)=0</arglist>
    </member>
    <member kind="function">
      <name>controllerMoved</name>
      <anchor>adfd27a266319d8c47badfa3f093ba0e8</anchor>
      <arglist>(const int controllerNumber, const int newValue)=0</arglist>
    </member>
    <member kind="function">
      <name>renderNextBlock</name>
      <anchor>ad4ed4a1a2017669531b4cef59a158b9a</anchor>
      <arglist>(AudioSampleBuffer &amp;outputBuffer, int startSample, int numSamples)=0</arglist>
    </member>
    <member kind="function">
      <name>isPlayingChannel</name>
      <anchor>a86c76ca9275f70ca743532b59e405647</anchor>
      <arglist>(int midiChannel) const </arglist>
    </member>
    <member kind="function">
      <name>setCurrentPlaybackSampleRate</name>
      <anchor>a120b8249ea838a47008e9c51f14e3586</anchor>
      <arglist>(double newRate)</arglist>
    </member>
    <member kind="function">
      <name>getSampleRate</name>
      <anchor>aa3ab26685e42bf78e239870bc8e77dd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>clearCurrentNote</name>
      <anchor>a55d1e7a062f8dc9a6cd78526b0da049c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SystemClipboard</name>
    <filename>classSystemClipboard.html</filename>
    <member kind="function">
      <name>copyTextToClipboard</name>
      <anchor>ab0efb785d53db6f2986950d591313ba5</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>getTextFromClipboard</name>
      <anchor>a48c9547a1950f71f3a4063a6d55e08f2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SystemStats</name>
    <filename>classSystemStats.html</filename>
    <member kind="function">
      <name>OperatingSystemType</name>
      <anchor>a7697c468b5f6c391096ab483690b68ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nknownOS</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaa5c49c960dbbdd90f196e55237d268f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>acOSX</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaa7b97455dbb0979156c038ccf4bebe545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>inux</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaa2d87a056c510cc59626e6df7be6fe72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>in95</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaa3f11da9304cdc767e3e9dfcd9e9c8099</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>in98</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaac292d976b319648c6b7afc9163685614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>inNT351</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaa2b72add67b0109c203085ed82f31b335</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>inNT40</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaaa9d6a3f43519091d606c5aed1ac2dbf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>in2000</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaadb327146f33f20e0c62b58a3d11de431</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>inXP</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaad72958e105bc6eb69321f2696a74aa51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>inVista</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaae9197b9bc532344d2641a414036a35f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indows7</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaad260305d49564b976ea39d057c71d490</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indows</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaae300f2fc8f4c69f639d7b066ccdc6a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indowsNT</name>
      <anchor>a7697c468b5f6c391096ab483690b68eaa46b8cd255af2f2255cb4657d1693fa1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>getJUCEVersion</name>
      <anchor>acd10ec99fd2bd19f466d805023791986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getOperatingSystemType</name>
      <anchor>a53f8f07716d123c91924a49c658774ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getOperatingSystemName</name>
      <anchor>ae34d4d4d92947cdbcfa6ec6c86df31e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isOperatingSystem64Bit</name>
      <anchor>a89a9be444a16742b03c66a525baa6061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getLogonName</name>
      <anchor>af31ca46b807e2b2c8b0e58a83cbc85c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFullUserName</name>
      <anchor>a0da03ab9c862b1db07075bce0b75fd17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCpuSpeedInMegaherz</name>
      <anchor>a50852f1e0c28d06eeebbd18af4559770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCpuVendor</name>
      <anchor>a783708e427ef6115bfa00d3ea4d3f396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasMMX</name>
      <anchor>a98cc8aab4c2b20fff64e10a1dbe773b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasSSE</name>
      <anchor>a402c4373bce0f035b550400c58a59765</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasSSE2</name>
      <anchor>ac274d822fbfeb6da0874a7df3eac4883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>has3DNow</name>
      <anchor>a1fdd3024e716c7abf52a4f0eba82e8f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumCpus</name>
      <anchor>a4a5c4bb30ad7bd177476182252c7d651</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getClockCycleCounter</name>
      <anchor>ab58a412af2e8b94d0d87d162f9979b42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getMemorySizeInMegabytes</name>
      <anchor>a77b0a6c165e59b8c15f8f0a2f037a584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPageSize</name>
      <anchor>ad2c08e39f167e01100d17cd910e7028b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getMACAddresses</name>
      <anchor>a3e3a8fb5103b06b03a3116b885643fce</anchor>
      <arglist>(int64 *addresses, int maxNum, bool littleEndian=true)</arglist>
    </member>
    <member kind="function">
      <name>getMACAddressStrings</name>
      <anchor>aa6674cda4c0d0d5ca222c467871713b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>initialiseStats</name>
      <anchor>a307d74e975f0d3b4afa3a59dce5cb717</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SystemTrayIconComponent</name>
    <base>Component</base>
    <filename>classSystemTrayIconComponent.html</filename>
    <member kind="function">
      <name>SystemTrayIconComponent</name>
      <anchor>a7e46f4b374a917b7d899128d1d35bcaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~SystemTrayIconComponent</name>
      <anchor>a00a7c36ac22d6dcb251f4a0b61dafab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setIconImage</name>
      <anchor>ac27871e1c71277804b16c6fc91941d8e</anchor>
      <arglist>(const Image &amp;newImage)</arglist>
    </member>
    <member kind="function">
      <name>setIconTooltip</name>
      <anchor>a9df2a1a73814eb73b577090bce9425b9</anchor>
      <arglist>(const String &amp;tooltip)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>aa7890ecec6fd8e29aba7882759c2d096</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabBarButton</name>
    <base>Button</base>
    <filename>classTabBarButton.html</filename>
    <member kind="function">
      <name>TabBarButton</name>
      <anchor>afdc701da8d80fa38cb2ebcedd57c4673</anchor>
      <arglist>(const String &amp;name, TabbedButtonBar *ownerBar, int tabIndex)</arglist>
    </member>
    <member kind="function">
      <name>~TabBarButton</name>
      <anchor>af8eaf5f5e850408b584be1631f52865a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getBestTabLength</name>
      <anchor>a6bedc5c7ef08a437b7575bfcafd481fd</anchor>
      <arglist>(int depth)</arglist>
    </member>
    <member kind="function">
      <name>paintButton</name>
      <anchor>aad8666f920df985c250238a2163a4ed3</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>ab292704fd4b9ddf07b7d9901a66b0565</anchor>
      <arglist>(const ModifierKeys &amp;mods)</arglist>
    </member>
    <member kind="function">
      <name>hitTest</name>
      <anchor>aa6138221e3b2143d1f8dfb18b2874674</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>getActiveArea</name>
      <anchor>ac7c5edf137a4509d627925fea183be10</anchor>
      <arglist>(int &amp;x, int &amp;y, int &amp;w, int &amp;h)</arglist>
    </member>
    <member kind="function">
      <name>owner</name>
      <anchor>a523d3fb807471f4dfcae633035d5e70d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tabIndex</name>
      <anchor>a0714b4edba9db76499cb57a96596db49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>overlapPixels</name>
      <anchor>a8eb442941d7072f18f85769824e03ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>shadow</name>
      <anchor>ac4fdae8ea4ef5a1196befdb6fdcb3963</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabbedButtonBar</name>
    <base>Component</base>
    <base>ChangeBroadcaster</base>
    <base>ButtonListener</base>
    <filename>classTabbedButtonBar.html</filename>
    <member kind="function">
      <name>Orientation</name>
      <anchor>a63e34dd62f1b80ec99412c6115b39afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>absAtTop</name>
      <anchor>a63e34dd62f1b80ec99412c6115b39afbae2743948018b19a1834ec236df4876b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>absAtBottom</name>
      <anchor>a63e34dd62f1b80ec99412c6115b39afba9bbe9d943d7603fc6f91ba22782bc778</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>absAtLeft</name>
      <anchor>a63e34dd62f1b80ec99412c6115b39afba7427a5794acbad73fd4c824b260b00b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>absAtRight</name>
      <anchor>a63e34dd62f1b80ec99412c6115b39afba931a140f221ead7f73af06e4f0610f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>abOutlineColourId</name>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806dac8e8988271f790db93c90250027412d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>abTextColourId</name>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806dadb8a4e934db005c7e683ae01b5ab1981</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rontOutlineColourId</name>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806dab1821bb1f7b2d4055a1e8e035649cc3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rontTextColourId</name>
      <anchor>a1193bcbd9622a87f4dbdee8db8f9806da53c37ddad54ae89b891b438e9e94ec0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TabbedButtonBar</name>
      <anchor>a6daef9753356e71accab672577947992</anchor>
      <arglist>(Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <name>~TabbedButtonBar</name>
      <anchor>a4fbf98a176d5239f95b973e8e194c12f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setOrientation</name>
      <anchor>af3ab3b5919eae222903e948ca85e3bd9</anchor>
      <arglist>(Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <name>getOrientation</name>
      <anchor>a84ff079c9ea84950c1060e929ce10351</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>clearTabs</name>
      <anchor>a984f83d6e5a2e33cffa4772c838b2ecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addTab</name>
      <anchor>a22e484173a42134924bfce754d8a5d30</anchor>
      <arglist>(const String &amp;tabName, const Colour &amp;tabBackgroundColour, int insertIndex=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>setTabName</name>
      <anchor>a81bb9c90e85698fbc3ffc713954a6151</anchor>
      <arglist>(int tabIndex, const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <name>removeTab</name>
      <anchor>a076010c009909a444f84129a69ac61d4</anchor>
      <arglist>(int tabIndex)</arglist>
    </member>
    <member kind="function">
      <name>moveTab</name>
      <anchor>abb664821ffabbd76c0282ae05bec5875</anchor>
      <arglist>(int currentIndex, int newIndex)</arglist>
    </member>
    <member kind="function">
      <name>getNumTabs</name>
      <anchor>a6cf9104837e23cdba611da68705a44e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTabNames</name>
      <anchor>a0c0b0459a4d5e77f254b11eb4a3b614f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setCurrentTabIndex</name>
      <anchor>aac30b6472d94b57198623499feeba069</anchor>
      <arglist>(int newTabIndex, bool sendChangeMessage=true)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentTabName</name>
      <anchor>a170e95abf314454923e3ef53a694f9f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentTabIndex</name>
      <anchor>a998f52266e49093eec1be4158488b04d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTabButton</name>
      <anchor>a5bf021062300f303666793479d7536b0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>currentTabChanged</name>
      <anchor>a6a11f71e857b122419ed70066b8d4cda</anchor>
      <arglist>(int newCurrentTabIndex, const String &amp;newCurrentTabName)</arglist>
    </member>
    <member kind="function">
      <name>popupMenuClickOnTab</name>
      <anchor>a2f07653c26063fd52f7d91d6455664d4</anchor>
      <arglist>(int tabIndex, const String &amp;tabName)</arglist>
    </member>
    <member kind="function">
      <name>getTabBackgroundColour</name>
      <anchor>a03a053063debfab6db0df0cf4cb01c86</anchor>
      <arglist>(int tabIndex)</arglist>
    </member>
    <member kind="function">
      <name>setTabBackgroundColour</name>
      <anchor>a4a1ea7b2615859015c2b90eead39f247</anchor>
      <arglist>(int tabIndex, const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a05eb6b00c2d1293960abc06657404cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>abf31a0d90c8a8ed393faf0666fe0204b</anchor>
      <arglist>(Button *button)</arglist>
    </member>
    <member kind="function">
      <name>lookAndFeelChanged</name>
      <anchor>aebc6f9af7c5af6bef2d7ebae5296bdd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createTabButton</name>
      <anchor>a9e43a7a5671e8d9e03241053a692f1f2</anchor>
      <arglist>(const String &amp;tabName, int tabIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabbedComponent</name>
    <base>Component</base>
    <filename>classTabbedComponent.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>ab154d5fdf269af82dfbe6e77b2f716cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>ab154d5fdf269af82dfbe6e77b2f716ccaf220bcdf6bf79838e058ac1edc408e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utlineColourId</name>
      <anchor>ab154d5fdf269af82dfbe6e77b2f716cca16a39be0a38f0544cba6c68051536b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TabbedComponent</name>
      <anchor>a1702331b2ec7a34ebbfaf418f31415dd</anchor>
      <arglist>(TabbedButtonBar::Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <name>~TabbedComponent</name>
      <anchor>af831d2d345f8a1284e665be502f405c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setOrientation</name>
      <anchor>ad982540d7f5a188fa012550971ebb4d5</anchor>
      <arglist>(TabbedButtonBar::Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <name>getOrientation</name>
      <anchor>a9df60e8c5cd18895d48806d3c4cad285</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setTabBarDepth</name>
      <anchor>a06e222e02207dc35e297c236e175d46f</anchor>
      <arglist>(int newDepth)</arglist>
    </member>
    <member kind="function">
      <name>getTabBarDepth</name>
      <anchor>a1f864d8ba0d8f07261efee04fd0edffc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setOutline</name>
      <anchor>a685c149db58fefdf7894cd3ed378e0e2</anchor>
      <arglist>(int newThickness)</arglist>
    </member>
    <member kind="function">
      <name>setIndent</name>
      <anchor>a4b2ca2d5cb00208f7383455c5143fcad</anchor>
      <arglist>(int indentThickness)</arglist>
    </member>
    <member kind="function">
      <name>clearTabs</name>
      <anchor>a0c55d2ebde6cc67c693a607a91221ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addTab</name>
      <anchor>a089f7fef98c1f0b4a80796c40d1bd11e</anchor>
      <arglist>(const String &amp;tabName, const Colour &amp;tabBackgroundColour, Component *contentComponent, bool deleteComponentWhenNotNeeded, int insertIndex=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>setTabName</name>
      <anchor>acbe9e10b90d011aa9d75ed0bef64103e</anchor>
      <arglist>(int tabIndex, const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <name>removeTab</name>
      <anchor>ac9a7f7fc03a69fa286772fb0589d9388</anchor>
      <arglist>(int tabIndex)</arglist>
    </member>
    <member kind="function">
      <name>getNumTabs</name>
      <anchor>ac94ea283f6904ef077d55d547fdd21d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTabNames</name>
      <anchor>ade53c1b18c03de7f1ebf3e0ed070b464</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTabContentComponent</name>
      <anchor>ad1e91840a28927b2d757731c31043b6b</anchor>
      <arglist>(int tabIndex) const </arglist>
    </member>
    <member kind="function">
      <name>getTabBackgroundColour</name>
      <anchor>a9e6b1a134ff50a960bff7676f077ba20</anchor>
      <arglist>(int tabIndex) const </arglist>
    </member>
    <member kind="function">
      <name>setTabBackgroundColour</name>
      <anchor>aa11e4c338111df7d5475b5199d90da5e</anchor>
      <arglist>(int tabIndex, const Colour &amp;newColour)</arglist>
    </member>
    <member kind="function">
      <name>setCurrentTabIndex</name>
      <anchor>aff9209321e3c2993775a56edae31c026</anchor>
      <arglist>(int newTabIndex, bool sendChangeMessage=true)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentTabIndex</name>
      <anchor>a855543f61c40125be6ab34fb23e11984</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentTabName</name>
      <anchor>a3859e66388f5bfaff8cef5da26bb89b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentContentComponent</name>
      <anchor>a04af3a3fd7bc61bd8aa37b0daeb0d147</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>currentTabChanged</name>
      <anchor>acb0ec8ee87c29825f9326aadb8302b72</anchor>
      <arglist>(int newCurrentTabIndex, const String &amp;newCurrentTabName)</arglist>
    </member>
    <member kind="function">
      <name>popupMenuClickOnTab</name>
      <anchor>a5f938165e7ccc943c4503b817c31d89f</anchor>
      <arglist>(int tabIndex, const String &amp;tabName)</arglist>
    </member>
    <member kind="function">
      <name>getTabbedButtonBar</name>
      <anchor>a54ba242a7b325f08187645ce4ef149ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a5827a8cfc3881a7ea1cbd6866c21a684</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>afc4c6c4183b5ebeedec65a9d5a0344d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lookAndFeelChanged</name>
      <anchor>a6a2d9006dc83b22be300f6a9411f1d01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createTabButton</name>
      <anchor>af6d13ea3c6b9dc73ffc8dea8d74099da</anchor>
      <arglist>(const String &amp;tabName, int tabIndex)</arglist>
    </member>
    <member kind="function">
      <name>tabs</name>
      <anchor>a8ada59add70cf468e432119f22bfe1d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TableHeaderComponent</name>
    <base>Component</base>
    <base>AsyncUpdater</base>
    <filename>classTableHeaderComponent.html</filename>
    <member kind="function">
      <name>ColumnPropertyFlags</name>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>isible</name>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831a7f601c3d9bc982c5e1ba5797dc9e1973</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>esizable</name>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831ae21b31a36ae1a8a25aed0c8cc5301720</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>raggable</name>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831acc6c3bf14f3e100d490d1e9cd307e1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ppearsOnColumnMenu</name>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831ac8737d3f19bf93c607240f6a3035aa4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ortable</name>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831acb2ae4c6ff02d7f6d9621f70340c2012</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ortedForwards</name>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831a87fb777f6e42c8e3c8b8234bb0291951</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ortedBackwards</name>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831aa7e7f97460075ebf9666f89dca7b9983</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>efaultFlags</name>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831aaf583dc5f74b08d98dc901bdb91bdc9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>otResizable</name>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831a47ed9632de25c7632a34942aa1b266bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>otResizableOrSortable</name>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831a722f75fc5f1b33f07ee2ca106bd0e9f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>otSortable</name>
      <anchor>abfee3b5ccd3289efb38e7b7dd1162831abd10990c4c70636a0b969b7dcdad112d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TableHeaderComponent</name>
      <anchor>aef4b0bf0dfc1d5c7b91cb72ac96aed95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~TableHeaderComponent</name>
      <anchor>a812f66a1f733cd90e788a6d135aa382e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addColumn</name>
      <anchor>af6bf8a2bb896b74ed6afd6f667a4a959</anchor>
      <arglist>(const String &amp;columnName, int columnId, int width, int minimumWidth=30, int maximumWidth=&amp;#45;1, int propertyFlags=defaultFlags, int insertIndex=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>removeColumn</name>
      <anchor>a6642d29de80979c31d0b5ee6bd399730</anchor>
      <arglist>(int columnIdToRemove)</arglist>
    </member>
    <member kind="function">
      <name>removeAllColumns</name>
      <anchor>a87cef13bc2cc1b6463af7f4286fc9642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumColumns</name>
      <anchor>aedd425a88dcbf1e4c1ed58f184908c2e</anchor>
      <arglist>(bool onlyCountVisibleColumns) const </arglist>
    </member>
    <member kind="function">
      <name>getColumnName</name>
      <anchor>a37507c5da6f145dadb90fc184b26340e</anchor>
      <arglist>(int columnId) const </arglist>
    </member>
    <member kind="function">
      <name>setColumnName</name>
      <anchor>a4f3269b9f69aa75a9d7387c97408c138</anchor>
      <arglist>(int columnId, const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <name>moveColumn</name>
      <anchor>a183bd15db8f1b3cc61ef612cbcc2aa8f</anchor>
      <arglist>(int columnId, int newVisibleIndex)</arglist>
    </member>
    <member kind="function">
      <name>getColumnWidth</name>
      <anchor>ac3b55abb94e6ce11a90e515baced3160</anchor>
      <arglist>(int columnId) const </arglist>
    </member>
    <member kind="function">
      <name>setColumnWidth</name>
      <anchor>a777fe28faa03d04b9d46105516eb1f8c</anchor>
      <arglist>(int columnId, int newWidth)</arglist>
    </member>
    <member kind="function">
      <name>setColumnVisible</name>
      <anchor>ac91853f78f09564e887b98b481bae95f</anchor>
      <arglist>(int columnId, bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <name>isColumnVisible</name>
      <anchor>a31b007b035502ed064d1a44eeac72446</anchor>
      <arglist>(int columnId) const </arglist>
    </member>
    <member kind="function">
      <name>setSortColumnId</name>
      <anchor>a51558625c4ed006561e5bf468d5af605</anchor>
      <arglist>(int columnId, bool sortForwards)</arglist>
    </member>
    <member kind="function">
      <name>getSortColumnId</name>
      <anchor>a91d18fde74e1ff62412a9c1ee7bb4c5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isSortedForwards</name>
      <anchor>a9bfdcfbaaa24b3ca4884807c0c030fb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>reSortTable</name>
      <anchor>a39a03757452b664a3645c55a02e6d76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTotalWidth</name>
      <anchor>a71dfcadef252b0567955cd3c477acbbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getIndexOfColumnId</name>
      <anchor>a2b8d480388b7eacdb57f1ef80b3e210f</anchor>
      <arglist>(int columnId, bool onlyCountVisibleColumns) const </arglist>
    </member>
    <member kind="function">
      <name>getColumnIdOfIndex</name>
      <anchor>aca8196dc760b733766c0273fce5e7cec</anchor>
      <arglist>(int index, bool onlyCountVisibleColumns) const </arglist>
    </member>
    <member kind="function">
      <name>getColumnPosition</name>
      <anchor>abad61b9bdf3fbe4937637e1d46f69eb4</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getColumnIdAtX</name>
      <anchor>ab9f4217af539536ca7508b391fa322f5</anchor>
      <arglist>(int xToFind) const </arglist>
    </member>
    <member kind="function">
      <name>setStretchToFitActive</name>
      <anchor>ae338d49514b8c120db62fbd9ad3be4c7</anchor>
      <arglist>(bool shouldStretchToFit)</arglist>
    </member>
    <member kind="function">
      <name>isStretchToFitActive</name>
      <anchor>a01f9763aa85a7f4262672505c1d60948</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>resizeAllColumnsToFit</name>
      <anchor>abccd726884264ed9fed54b23c55c3b94</anchor>
      <arglist>(int targetTotalWidth)</arglist>
    </member>
    <member kind="function">
      <name>setPopupMenuActive</name>
      <anchor>a5a4f382bea75073d84cf93afbbf3fdc6</anchor>
      <arglist>(bool hasMenu)</arglist>
    </member>
    <member kind="function">
      <name>isPopupMenuActive</name>
      <anchor>aceec9cfa178cfe2476a8936872233d5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>a614028fef827c8f073757ff89e69c16e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>restoreFromString</name>
      <anchor>ae4a9ef600e4187d86a3c4f6567ebe14c</anchor>
      <arglist>(const String &amp;storedVersion)</arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>afe4d6b3fc309f4eea906ea805933c86a</anchor>
      <arglist>(TableHeaderListener *newListener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>a649294db9bc0b39570e31b0573dc10ae</anchor>
      <arglist>(TableHeaderListener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <name>columnClicked</name>
      <anchor>a5208c784a0fa38581aa512323c4be183</anchor>
      <arglist>(int columnId, const ModifierKeys &amp;mods)</arglist>
    </member>
    <member kind="function">
      <name>addMenuItems</name>
      <anchor>a15df2bd39e5225c2838b82404b10b1b5</anchor>
      <arglist>(PopupMenu &amp;menu, int columnIdClicked)</arglist>
    </member>
    <member kind="function">
      <name>reactToMenuItem</name>
      <anchor>a6d73ed05285a4386b50472710e10ad3d</anchor>
      <arglist>(int menuReturnId, int columnIdClicked)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a7e5181d571fc6b115453e69a25338b35</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a90874de4b222c92103688ac2358555b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseMove</name>
      <anchor>a6e190d9f1af9875b9b5594bff4fc98e7</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>mouseEnter</name>
      <anchor>a160ecb2bd38b81135c5c8828774783b1</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>mouseExit</name>
      <anchor>aab44c025d1935e82e810f004faa81304</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a0ab0723f92404064eb1d5e1cb5437f82</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>a133164a6b35cda8d9f7ea1de35d124fb</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>aef86c1e05c21a754bdc01f89ac09b94e</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>getMouseCursor</name>
      <anchor>ad03db9b3bb22c05e7aa16685c653c4f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>showColumnChooserMenu</name>
      <anchor>ae479aaba67ffcb18e6abd7ec0686d20a</anchor>
      <arglist>(int columnIdClicked)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TableHeaderListener</name>
    <filename>classTableHeaderListener.html</filename>
    <member kind="function">
      <name>TableHeaderListener</name>
      <anchor>a1e38b5bbb1a0a59390cef43a9bd68337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~TableHeaderListener</name>
      <anchor>a7b17996381999038a1cda3205e1f414a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tableColumnsChanged</name>
      <anchor>ae448e8225d4f5d641a6959da2c3ca0ec</anchor>
      <arglist>(TableHeaderComponent *tableHeader)=0</arglist>
    </member>
    <member kind="function">
      <name>tableColumnsResized</name>
      <anchor>a9e058f3c85c11241ca0237d0e82a92b2</anchor>
      <arglist>(TableHeaderComponent *tableHeader)=0</arglist>
    </member>
    <member kind="function">
      <name>tableSortOrderChanged</name>
      <anchor>a4798deb7124d4d8350a2e9b7b260be00</anchor>
      <arglist>(TableHeaderComponent *tableHeader)=0</arglist>
    </member>
    <member kind="function">
      <name>tableColumnDraggingChanged</name>
      <anchor>af21a64f650e86b90ea9f7f8df880e2b8</anchor>
      <arglist>(TableHeaderComponent *tableHeader, int columnIdNowBeingDragged)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TableListBox</name>
    <base>ListBox</base>
    <base>ListBoxModel</base>
    <base>TableHeaderListener</base>
    <filename>classTableListBox.html</filename>
    <member kind="function">
      <name>TableListBox</name>
      <anchor>af28e81c9b8f09ec1f04e5cdd9a5fac98</anchor>
      <arglist>(const String &amp;componentName, TableListBoxModel *model)</arglist>
    </member>
    <member kind="function">
      <name>~TableListBox</name>
      <anchor>a4329c84e3a80806ea1614be35f3ebb79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setModel</name>
      <anchor>a0ec78e27679edffd4995543819eb6795</anchor>
      <arglist>(TableListBoxModel *newModel)</arglist>
    </member>
    <member kind="function">
      <name>getModel</name>
      <anchor>aaeeccf160a00d0ffd9817f93b7a146b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHeader</name>
      <anchor>a594421a71e979eaab0da6eb3c2251ad4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setHeaderHeight</name>
      <anchor>a51ccf41c12897d58e13d4b7be7cbdff3</anchor>
      <arglist>(int newHeight)</arglist>
    </member>
    <member kind="function">
      <name>getHeaderHeight</name>
      <anchor>a3495f4861a73c3b711e56e8aab97a788</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>autoSizeColumn</name>
      <anchor>a64d4c5c4a49a07c9dddb5e9def2157a7</anchor>
      <arglist>(int columnId)</arglist>
    </member>
    <member kind="function">
      <name>autoSizeAllColumns</name>
      <anchor>ad007aa31ee166a0d4d69fbe101cb9be8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAutoSizeMenuOptionShown</name>
      <anchor>ae80826be484b5ac0d2ff425c7650621f</anchor>
      <arglist>(bool shouldBeShown)</arglist>
    </member>
    <member kind="function">
      <name>isAutoSizeMenuOptionShown</name>
      <anchor>a20c6b88967088e259830aeb747b32f0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCellPosition</name>
      <anchor>ae4a3eea7c0c45384f7055386d935360a</anchor>
      <arglist>(int columnId, int rowNumber, bool relativeToComponentTopLeft) const </arglist>
    </member>
    <member kind="function">
      <name>scrollToEnsureColumnIsOnscreen</name>
      <anchor>a6beb66e94224409499b86a01e45a59f7</anchor>
      <arglist>(int columnId)</arglist>
    </member>
    <member kind="function">
      <name>getNumRows</name>
      <anchor>a0c4ec5150a2a2ea10a100727a4d6cde2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintListBoxItem</name>
      <anchor>ae526dd61208735758ecf91b4ac74cc6f</anchor>
      <arglist>(int, Graphics &amp;, int, int, bool)</arglist>
    </member>
    <member kind="function">
      <name>refreshComponentForRow</name>
      <anchor>afb3e0d4dd6244908e273bff1e60c6408</anchor>
      <arglist>(int rowNumber, bool isRowSelected, Component *existingComponentToUpdate)</arglist>
    </member>
    <member kind="function">
      <name>selectedRowsChanged</name>
      <anchor>af336c3cac04ace8c916a3cb289b69c29</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <name>deleteKeyPressed</name>
      <anchor>ac65e79d06d14585a157b0c265a1d4fa6</anchor>
      <arglist>(int currentSelectedRow)</arglist>
    </member>
    <member kind="function">
      <name>returnKeyPressed</name>
      <anchor>a9b1bbaceefb1ac41ff4774e91f38b5a2</anchor>
      <arglist>(int currentSelectedRow)</arglist>
    </member>
    <member kind="function">
      <name>backgroundClicked</name>
      <anchor>a9a2d0f92803c770378aa299516156db6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>listWasScrolled</name>
      <anchor>aec55b05f54e4cfb834b88baea4f1180b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tableColumnsChanged</name>
      <anchor>af21de50609e005854089e0399b021caa</anchor>
      <arglist>(TableHeaderComponent *)</arglist>
    </member>
    <member kind="function">
      <name>tableColumnsResized</name>
      <anchor>a8791cf422e4cb96d2c2290f53acc2e65</anchor>
      <arglist>(TableHeaderComponent *)</arglist>
    </member>
    <member kind="function">
      <name>tableSortOrderChanged</name>
      <anchor>a420f56656024fc9242ed81150fc9027a</anchor>
      <arglist>(TableHeaderComponent *)</arglist>
    </member>
    <member kind="function">
      <name>tableColumnDraggingChanged</name>
      <anchor>a269dcd64d3fc3b3af21ba0c289341e29</anchor>
      <arglist>(TableHeaderComponent *, int)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>ab6b73d03667c60cbb3f0507ad1dd688c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TableListBoxModel</name>
    <filename>classTableListBoxModel.html</filename>
    <member kind="function">
      <name>TableListBoxModel</name>
      <anchor>ab5794e70e60fd8a20e9a7727b58a55d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~TableListBoxModel</name>
      <anchor>a69fce53074484eb5388bf99239b1c9a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumRows</name>
      <anchor>ae7ff7c6523e8113ff1c13b39f7144bf2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>paintRowBackground</name>
      <anchor>a9004032dd5340b31c8d4f2b37dcf3184</anchor>
      <arglist>(Graphics &amp;g, int rowNumber, int width, int height, bool rowIsSelected)=0</arglist>
    </member>
    <member kind="function">
      <name>paintCell</name>
      <anchor>ae39def19eac43197c45d6f1e1aaadbd5</anchor>
      <arglist>(Graphics &amp;g, int rowNumber, int columnId, int width, int height, bool rowIsSelected)=0</arglist>
    </member>
    <member kind="function">
      <name>refreshComponentForCell</name>
      <anchor>a07767e4e5a3812e486c187705b0921bd</anchor>
      <arglist>(int rowNumber, int columnId, bool isRowSelected, Component *existingComponentToUpdate)</arglist>
    </member>
    <member kind="function">
      <name>cellClicked</name>
      <anchor>a4aff1b6737036ccc7d115ce78363153a</anchor>
      <arglist>(int rowNumber, int columnId, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>cellDoubleClicked</name>
      <anchor>ab2e56617913183ba054d7a67c64578f5</anchor>
      <arglist>(int rowNumber, int columnId, const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>backgroundClicked</name>
      <anchor>ab0fdbd2e308ab507fd5ab14cbb1594bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sortOrderChanged</name>
      <anchor>a7941c048bd8e10841dcf7f2acace3656</anchor>
      <arglist>(int newSortColumnId, bool isForwards)</arglist>
    </member>
    <member kind="function">
      <name>getColumnAutoSizeWidth</name>
      <anchor>a625b6fcb1118fbfc63aeade25786eb0b</anchor>
      <arglist>(int columnId)</arglist>
    </member>
    <member kind="function">
      <name>getCellTooltip</name>
      <anchor>a2a0306ec62df6b77f30caf8599a06e91</anchor>
      <arglist>(int rowNumber, int columnId)</arglist>
    </member>
    <member kind="function">
      <name>selectedRowsChanged</name>
      <anchor>a918995d04263035e52b5e9ca174e7ab6</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <name>deleteKeyPressed</name>
      <anchor>a5f17bdc591ef08f7b89e65275e22e46f</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <name>returnKeyPressed</name>
      <anchor>a1c622b283ff2dec56f5373ca223544ae</anchor>
      <arglist>(int lastRowSelected)</arglist>
    </member>
    <member kind="function">
      <name>listWasScrolled</name>
      <anchor>a4793a06a4dc4f88a2049360f6cd34f83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDragSourceDescription</name>
      <anchor>a96fc1eae06fbbab99c53da62e01ccc03</anchor>
      <arglist>(const SparseSet&lt; int &gt; &amp;currentlySelectedRows)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemporaryFile</name>
    <filename>classTemporaryFile.html</filename>
    <member kind="function">
      <name>OptionFlags</name>
      <anchor>af04f4ef2ea1bee0b20cdb4c072442e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>seHiddenFile</name>
      <anchor>af04f4ef2ea1bee0b20cdb4c072442e8da5a8f2dba38db83ba22b75362598feaf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utNumbersInBrackets</name>
      <anchor>af04f4ef2ea1bee0b20cdb4c072442e8da756fae13005d397744383ecd04539914</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TemporaryFile</name>
      <anchor>a4f70f8859f286ba4c934c6a06e4e9f09</anchor>
      <arglist>(const String &amp;suffix=String::empty, int optionFlags=0)</arglist>
    </member>
    <member kind="function">
      <name>TemporaryFile</name>
      <anchor>a7039b78139b7d1c0661a4e1307929127</anchor>
      <arglist>(const File &amp;targetFile, int optionFlags=0)</arglist>
    </member>
    <member kind="function">
      <name>~TemporaryFile</name>
      <anchor>a7a0f828343c95d3a7e81d6d3587ad116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFile</name>
      <anchor>acf55b56087f92e0f2bae4100fe707383</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTargetFile</name>
      <anchor>a33f65f178bfe2e40f21e341a987f918c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>overwriteTargetFileWithTemporary</name>
      <anchor>aaf1c2513c6bd7b1ba343fe53cddd0fd0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextButton</name>
    <base>Button</base>
    <filename>classTextButton.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>afb6c1da587aebb63b58a2569bed70c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uttonColourId</name>
      <anchor>afb6c1da587aebb63b58a2569bed70c2caf54542fa0ebadc194ffebbf3f26f5413</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uttonOnColourId</name>
      <anchor>afb6c1da587aebb63b58a2569bed70c2cab5c464bb61172a02ca81f629bbb42ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourOffId</name>
      <anchor>afb6c1da587aebb63b58a2569bed70c2ca4f6e7bf61b38241121bd84a28698e768</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourOnId</name>
      <anchor>afb6c1da587aebb63b58a2569bed70c2ca196c13a00ea89562ec1fdeccb59ffdb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TextButton</name>
      <anchor>afa2b8bd6f4c69cd0fa9315edf791ad8a</anchor>
      <arglist>(const String &amp;buttonName, const String &amp;toolTip=String::empty)</arglist>
    </member>
    <member kind="function">
      <name>~TextButton</name>
      <anchor>a497a17bb110e249c7eb88a98dad12192</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>changeWidthToFitText</name>
      <anchor>a1fec687cf46d8c22b4e527b4e1caa34e</anchor>
      <arglist>(int newHeight=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>getFont</name>
      <anchor>af88c3df8007b4b2a28eca20dd4ea30ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintButton</name>
      <anchor>a782af0085adb8c87049dbd0c151623a0</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>a311cf753304d4b145e3091c1523bf434</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextEditor</name>
    <base>Component</base>
    <base>TextInputTarget</base>
    <base>SettableTooltipClient</base>
    <filename>classTextEditor.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>aa805220923c93cd808a92fff0e3fb71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>aa805220923c93cd808a92fff0e3fb71daa28cd01c2a077370b4143ad67d00985b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>aa805220923c93cd808a92fff0e3fb71daf840969fe4a492f0e5fbe30f5948c8ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ighlightColourId</name>
      <anchor>aa805220923c93cd808a92fff0e3fb71da6308b1f46eba9b07247588f1d313ae09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ighlightedTextColourId</name>
      <anchor>aa805220923c93cd808a92fff0e3fb71da85b3b328db89b6946cda395dae78ebad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>aretColourId</name>
      <anchor>aa805220923c93cd808a92fff0e3fb71da4043e51bd3c1c33ad87d2e1d00da601c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utlineColourId</name>
      <anchor>aa805220923c93cd808a92fff0e3fb71dadb665df86c504955085dcb75524a96d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ocusedOutlineColourId</name>
      <anchor>aa805220923c93cd808a92fff0e3fb71da590a3ad72115412061fdfbbb089609fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>hadowColourId</name>
      <anchor>aa805220923c93cd808a92fff0e3fb71dab6ed00bbcce56fef5ff92d6bb705f988</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TextEditor</name>
      <anchor>a3424ad2eb6fe2540de745865cdc3da94</anchor>
      <arglist>(const String &amp;componentName=String::empty, juce_wchar passwordCharacter=0)</arglist>
    </member>
    <member kind="function">
      <name>~TextEditor</name>
      <anchor>aba5c4c4c412a24be39845b5a30bb555e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMultiLine</name>
      <anchor>a939bf23c983f695379a92f9612928160</anchor>
      <arglist>(bool shouldBeMultiLine, bool shouldWordWrap=true)</arglist>
    </member>
    <member kind="function">
      <name>isMultiLine</name>
      <anchor>af19a278e34583bc8aabf63ace216132d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setReturnKeyStartsNewLine</name>
      <anchor>a60e99221178fe5510edcfcd246a8bf2c</anchor>
      <arglist>(bool shouldStartNewLine)</arglist>
    </member>
    <member kind="function">
      <name>getReturnKeyStartsNewLine</name>
      <anchor>ab9735a543701ac065cfc9c6d56893d77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setTabKeyUsedAsCharacter</name>
      <anchor>ac2ac11e5eab2ec09cf47a26d84f5bf85</anchor>
      <arglist>(bool shouldTabKeyBeUsed)</arglist>
    </member>
    <member kind="function">
      <name>isTabKeyUsedAsCharacter</name>
      <anchor>a71c61570fe0974966d94bc7e0a805136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setReadOnly</name>
      <anchor>a046d359a0f6709b02a21d45c5958817a</anchor>
      <arglist>(bool shouldBeReadOnly)</arglist>
    </member>
    <member kind="function">
      <name>isReadOnly</name>
      <anchor>a30d837f2545c1d5ee6de5545733e3b16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setCaretVisible</name>
      <anchor>a4b23a8397f2d4741b10bda03ef4d1b12</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <name>isCaretVisible</name>
      <anchor>a257371f72c0cdcc0d792fd70c68ad046</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setScrollbarsShown</name>
      <anchor>aea30c7c5e684898eb2cac76983c38b48</anchor>
      <arglist>(bool shouldBeEnabled)</arglist>
    </member>
    <member kind="function">
      <name>areScrollbarsShown</name>
      <anchor>ac03200efc2166a2df1365c97b5a594e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setPasswordCharacter</name>
      <anchor>a8978b1e9eecf1c1ac3576f024bb7bde0</anchor>
      <arglist>(juce_wchar passwordCharacter)</arglist>
    </member>
    <member kind="function">
      <name>getPasswordCharacter</name>
      <anchor>a1dacee4d819cb06af6b868b049d1a7f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setPopupMenuEnabled</name>
      <anchor>abe2b07aad6f2a7d95f9a31d672964d52</anchor>
      <arglist>(bool menuEnabled)</arglist>
    </member>
    <member kind="function">
      <name>isPopupMenuEnabled</name>
      <anchor>a52bd87caec3707bd6d664d80befed562</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isPopupMenuCurrentlyActive</name>
      <anchor>a3ab25788df359c70698c8151f08bd121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>a92819cc8faf1b9755d23c3757948f1c7</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <name>applyFontToAllText</name>
      <anchor>acaea31f07a346e26627cf2744f2a702f</anchor>
      <arglist>(const Font &amp;newFont)</arglist>
    </member>
    <member kind="function">
      <name>getFont</name>
      <anchor>a5aa8ccc4362c6c22dcd6f28b5e333a67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setSelectAllWhenFocused</name>
      <anchor>a8b3de01c35af2c92adf5f11c7c9d6d5e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <name>setInputRestrictions</name>
      <anchor>af101f034f249b577345b948d4d3db21c</anchor>
      <arglist>(int maxTextLength, const String &amp;allowedCharacters=String::empty)</arglist>
    </member>
    <member kind="function">
      <name>setTextToShowWhenEmpty</name>
      <anchor>a4fc815ad155677be82c8205f0009be21</anchor>
      <arglist>(const String &amp;text, const Colour &amp;colourToUse)</arglist>
    </member>
    <member kind="function">
      <name>setScrollBarThickness</name>
      <anchor>a9f71873e9e95c27cf8d5ef8b3c12b1e0</anchor>
      <arglist>(int newThicknessPixels)</arglist>
    </member>
    <member kind="function">
      <name>setScrollBarButtonVisibility</name>
      <anchor>a62c667a7b38f6ada99afaa2c689ae68d</anchor>
      <arglist>(bool buttonsVisible)</arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>a048db62be2daafe7136e89b3e8326ed9</anchor>
      <arglist>(TextEditorListener *newListener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>a236a025e3d28a520772e1bc0d3eb05f1</anchor>
      <arglist>(TextEditorListener *listenerToRemove)</arglist>
    </member>
    <member kind="function">
      <name>getText</name>
      <anchor>ae746d5ab22e9f70212c3b11a67044ff3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTextInRange</name>
      <anchor>afbf0ae3e7cc295842b642e811e1fd411</anchor>
      <arglist>(const Range&lt; int &gt; &amp;textRange) const </arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>a483367aa9441aa1aab74309f362f1673</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>a9fd6243466c8122ccfffc03fa39f6c4f</anchor>
      <arglist>(const String &amp;newText, bool sendTextChangeMessage=true)</arglist>
    </member>
    <member kind="function">
      <name>getTextValue</name>
      <anchor>a6bffbe3d437e3d8144ef9a9cb9bcaade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertTextAtCaret</name>
      <anchor>a79719d6cdcff46f8d682dd7b57f4ffbf</anchor>
      <arglist>(const String &amp;textToInsert)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a63f9bab8dcbec46cf840bf199e7768a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cut</name>
      <anchor>acbdfebceaf8ba07a6242078c2da7473c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>afed2255126c654d5936c242233c9153b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paste</name>
      <anchor>a2a8829c00507b8747ae6ffe71b8e18cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCaretPosition</name>
      <anchor>ae83d8245dfe738d0b2d05d0501c5e39e</anchor>
      <arglist>(int newIndex)</arglist>
    </member>
    <member kind="function">
      <name>getCaretPosition</name>
      <anchor>a4eb79165443145bf31bc64100c590684</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>scrollEditorToPositionCaret</name>
      <anchor>a98c2a07e4f2d75014005ea2a343d30e8</anchor>
      <arglist>(int desiredCaretX, int desiredCaretY)</arglist>
    </member>
    <member kind="function">
      <name>getCaretRectangle</name>
      <anchor>a1be3d5e209384305ddee4a9194cc583e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setHighlightedRegion</name>
      <anchor>a98f6f27c2d12a541ff89e49a7a2d9203</anchor>
      <arglist>(const Range&lt; int &gt; &amp;newSelection)</arglist>
    </member>
    <member kind="function">
      <name>getHighlightedRegion</name>
      <anchor>a3bb08faf17c21d2b661a6d69d585614c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHighlightedText</name>
      <anchor>af31bdabb3095ced5c49cde4d633f65cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTextIndexAt</name>
      <anchor>a31d3bc0ae108c2991b4160f6ba894913</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>getTotalNumChars</name>
      <anchor>a4f2aac41d4bccb00c95f992996435bef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTextWidth</name>
      <anchor>afeeb66311110da4f210ee4067451bbac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTextHeight</name>
      <anchor>a80b0f4c59f567aede0ceff64b2156d98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setIndents</name>
      <anchor>a33de8e25ff72f21f74fa4cb22343e3bf</anchor>
      <arglist>(int newLeftIndent, int newTopIndent)</arglist>
    </member>
    <member kind="function">
      <name>setBorder</name>
      <anchor>a7bcfe706b2942751d69637197ab35d47</anchor>
      <arglist>(const BorderSize &amp;border)</arglist>
    </member>
    <member kind="function">
      <name>getBorder</name>
      <anchor>a51639db4a28591af53b701855373fd30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setScrollToShowCursor</name>
      <anchor>a04465069464c7c9f1900d260aa4e514f</anchor>
      <arglist>(bool shouldScrollToShowCursor)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a57096adad12dd494b376fe52a7238b72</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>paintOverChildren</name>
      <anchor>a5e1267facaee9350c9bce6ed693b456b</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>a191a572d43603cfe9a11ff265f98a1d8</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseUp</name>
      <anchor>ab20245851c152d488c01a7b01fe3900e</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDrag</name>
      <anchor>a28dec1f37373401d9e4c253ec049eeef</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseDoubleClick</name>
      <anchor>ab2aba4989001da32ba205ec24937a351</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>mouseWheelMove</name>
      <anchor>ad072f2386f62132cdf2d9bf3862e303d</anchor>
      <arglist>(const MouseEvent &amp;e, float wheelIncrementX, float wheelIncrementY)</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>aaff4916bb211609884f60f46fc4a9a03</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>keyStateChanged</name>
      <anchor>a945d8203649fbe39fd4968c36180ad25</anchor>
      <arglist>(bool isKeyDown)</arglist>
    </member>
    <member kind="function">
      <name>focusGained</name>
      <anchor>abff01c5d96b88a81116ab5ec6349fe5f</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <name>focusLost</name>
      <anchor>a7a5eeded9a541d00314ecc053d66b63e</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a9b69edcc74257d7193f5347da9d76acf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enablementChanged</name>
      <anchor>aa63b1dc3f533db8b6d637ee832f32f27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>a103f49d397c32c29e948ede41e595d15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addPopupMenuItems</name>
      <anchor>a5887eae43a0517c2c986d54b0f02e9bd</anchor>
      <arglist>(PopupMenu &amp;menuToAddTo, const MouseEvent *mouseClickEvent)</arglist>
    </member>
    <member kind="function">
      <name>performPopupMenuAction</name>
      <anchor>ac90236dab0312511ba8bc38b2507a575</anchor>
      <arglist>(int menuItemID)</arglist>
    </member>
    <member kind="function">
      <name>scrollToMakeSureCursorIsVisible</name>
      <anchor>aa8f2e41661dec5b6584cb655b3622475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>moveCaret</name>
      <anchor>aee391f5db9b0ffd4306656f69a67a5da</anchor>
      <arglist>(int newCaretPos)</arglist>
    </member>
    <member kind="function">
      <name>moveCursorTo</name>
      <anchor>a364a85649aa5c088fd6c1913d6564204</anchor>
      <arglist>(int newPosition, bool isSelecting)</arglist>
    </member>
    <member kind="function">
      <name>textChanged</name>
      <anchor>a34e3b8ad5395d493da6fee6ce9775dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>newTransaction</name>
      <anchor>ac1cdc461e88ca484f3528d74a7e1d27c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>doUndoRedo</name>
      <anchor>abec9c336069b13b8274216d5d16b0de9</anchor>
      <arglist>(bool isRedo)</arglist>
    </member>
    <member kind="function">
      <name>returnPressed</name>
      <anchor>aea9150456f5680f7a83c54e1aa561155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>escapePressed</name>
      <anchor>a113d5961e0129c872f606492dc0e8fab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleCommandMessage</name>
      <anchor>abd1d897359ee82289b967648c54ca90c</anchor>
      <arglist>(int commandId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextEditorListener</name>
    <filename>classTextEditorListener.html</filename>
    <member kind="function">
      <name>~TextEditorListener</name>
      <anchor>a1ea756700e9fafdb07aea110c8ac45ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textEditorTextChanged</name>
      <anchor>a1c82fa036f1e4602cce0d3b9d9a23eee</anchor>
      <arglist>(TextEditor &amp;editor)=0</arglist>
    </member>
    <member kind="function">
      <name>textEditorReturnKeyPressed</name>
      <anchor>ae0934538b9184631a08eaf87c9ca98c8</anchor>
      <arglist>(TextEditor &amp;editor)=0</arglist>
    </member>
    <member kind="function">
      <name>textEditorEscapeKeyPressed</name>
      <anchor>a90930c86505f543b0c125168e9ebf1eb</anchor>
      <arglist>(TextEditor &amp;editor)=0</arglist>
    </member>
    <member kind="function">
      <name>textEditorFocusLost</name>
      <anchor>ad445bdf83efdbfbb6805d3f70509e989</anchor>
      <arglist>(TextEditor &amp;editor)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextInputTarget</name>
    <filename>classTextInputTarget.html</filename>
    <member kind="function">
      <name>TextInputTarget</name>
      <anchor>a49747e7bca27c213004a89460543b139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~TextInputTarget</name>
      <anchor>a77845e997bbe85a68ad77407a8f5bdfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getHighlightedRegion</name>
      <anchor>ad729258e55dfdeffded7d5bb9ff13a54</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>setHighlightedRegion</name>
      <anchor>a4f28305922bb146295ed2decb63abf1b</anchor>
      <arglist>(const Range&lt; int &gt; &amp;newRange)=0</arglist>
    </member>
    <member kind="function">
      <name>getTextInRange</name>
      <anchor>ab74ec7a21ab3f6193f2396e6f49f35bc</anchor>
      <arglist>(const Range&lt; int &gt; &amp;range) const =0</arglist>
    </member>
    <member kind="function">
      <name>insertTextAtCaret</name>
      <anchor>a009241c97fa452d53671a00a6a5caea7</anchor>
      <arglist>(const String &amp;textToInsert)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextLayout</name>
    <filename>classTextLayout.html</filename>
    <member kind="function">
      <name>TextLayout</name>
      <anchor>ad3d06a6b81095f80ab31f0beecf706fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>TextLayout</name>
      <anchor>a7313b1b8fb473281f0b6cc5070318bb9</anchor>
      <arglist>(const TextLayout &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>TextLayout</name>
      <anchor>acf9b95053657c7048faea77589c2c853</anchor>
      <arglist>(const String &amp;text, const Font &amp;font)</arglist>
    </member>
    <member kind="function">
      <name>~TextLayout</name>
      <anchor>a2bbf2978fd2447c09adb2438185edd45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a0b086fea66346f0cf284aff03ff21552</anchor>
      <arglist>(const TextLayout &amp;layoutToCopy)</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a0b3e33edaae74fa726aa1e520d27a23c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>appendText</name>
      <anchor>aba07340ed826006c0b75bf39f1314e87</anchor>
      <arglist>(const String &amp;textToAppend, const Font &amp;fontToUse)</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>a72247bb6abfeedf2376cf474c80ca4ed</anchor>
      <arglist>(const String &amp;newText, const Font &amp;fontToUse)</arglist>
    </member>
    <member kind="function">
      <name>layout</name>
      <anchor>a7216ede723e8001d71daaeb68c1fd5d2</anchor>
      <arglist>(int maximumWidth, const Justification &amp;justification, bool attemptToBalanceLineLengths)</arglist>
    </member>
    <member kind="function">
      <name>getWidth</name>
      <anchor>a729604368644345decfba27e8e044153</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHeight</name>
      <anchor>ab757fe9fe15bfa258d9b059ae6d164cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumLines</name>
      <anchor>a4f4797c22ae36607fab17603c2013f10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLineWidth</name>
      <anchor>a64328940b8b29a2f57e8ffc8158bd0ac</anchor>
      <arglist>(int lineNumber) const </arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>af607f312c10a58465b333011b58d1911</anchor>
      <arglist>(Graphics &amp;g, int topLeftX, int topLeftY) const </arglist>
    </member>
    <member kind="function">
      <name>drawWithin</name>
      <anchor>afce574a2b9d5163c787266fa0247a549</anchor>
      <arglist>(Graphics &amp;g, int x, int y, int w, int h, const Justification &amp;layoutFlags) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextPropertyComponent</name>
    <base>PropertyComponent</base>
    <filename>classTextPropertyComponent.html</filename>
    <member kind="function">
      <name>TextPropertyComponent</name>
      <anchor>ab11b2849c68bcf275f931e2b847389b0</anchor>
      <arglist>(const String &amp;propertyName, int maxNumChars, bool isMultiLine)</arglist>
    </member>
    <member kind="function">
      <name>TextPropertyComponent</name>
      <anchor>acd3ee1e753b1f854efd8d58f8b1d2fe9</anchor>
      <arglist>(const Value &amp;valueToControl, const String &amp;propertyName, int maxNumChars, bool isMultiLine)</arglist>
    </member>
    <member kind="function">
      <name>~TextPropertyComponent</name>
      <anchor>a6939a16ffd859b2a1c1198286912da7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>ae4d8eadfcc3efa418facfef1e2cda0a0</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <name>getText</name>
      <anchor>a7e420f691297d7e9662463db09469fdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>acf48da948233b0d10435cc2a4a7c52f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textWasEdited</name>
      <anchor>a8c5ef860b25f29f1f69c4571cd39a4ea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Thread</name>
    <filename>classThread.html</filename>
    <member kind="function">
      <name>ThreadID</name>
      <anchor>a077e20855a3c974c2fc6f9e7caa8412c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Thread</name>
      <anchor>ae696c3b7ca36394cd214288cee31eaba</anchor>
      <arglist>(const String &amp;threadName)</arglist>
    </member>
    <member kind="function">
      <name>~Thread</name>
      <anchor>a026b23628e1727050e864e00489c0baf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>run</name>
      <anchor>aae90dfabab3e1776cf01a26e7ee3a620</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>startThread</name>
      <anchor>a5502205d727c00752f95af27a063d983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startThread</name>
      <anchor>acc4aff2ceb97b0f16a0a08132315a900</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <name>stopThread</name>
      <anchor>a7814b4dfaa6935f418c2baeb25c08cc0</anchor>
      <arglist>(int timeOutMilliseconds)</arglist>
    </member>
    <member kind="function">
      <name>isThreadRunning</name>
      <anchor>ab02ad2d11a2dacfea4a78b06224a3e87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>signalThreadShouldExit</name>
      <anchor>affe168e27c6ee50b0d10522810772268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>threadShouldExit</name>
      <anchor>a0a8fdce313d3c0db6c5adbb78c4352b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>waitForThreadToExit</name>
      <anchor>a277e5e91d52626bbdac85b44972dd46a</anchor>
      <arglist>(int timeOutMilliseconds) const </arglist>
    </member>
    <member kind="function">
      <name>setPriority</name>
      <anchor>a0975d9ee9f403f5f82287fcce4a7168f</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <name>setCurrentThreadPriority</name>
      <anchor>a9a777202bb5aa9ce7f57605674b100f4</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <name>setAffinityMask</name>
      <anchor>a614605563fceeac6f03d507bc35bdce4</anchor>
      <arglist>(uint32 affinityMask)</arglist>
    </member>
    <member kind="function">
      <name>setCurrentThreadAffinityMask</name>
      <anchor>ad8e6da0fe8303bfa1b171cad33a9a640</anchor>
      <arglist>(uint32 affinityMask)</arglist>
    </member>
    <member kind="function">
      <name>sleep</name>
      <anchor>ace8d1c984cb6900b2b47912a69261bc4</anchor>
      <arglist>(int milliseconds)</arglist>
    </member>
    <member kind="function">
      <name>yield</name>
      <anchor>aaf47a344b3b715e49ffcbc6119c72cdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>wait</name>
      <anchor>a17aca9c9609310f830298d6a0206d18d</anchor>
      <arglist>(int timeOutMilliseconds) const </arglist>
    </member>
    <member kind="function">
      <name>notify</name>
      <anchor>ae0e6408f187557bb06c8fff07c4100b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getCurrentThreadId</name>
      <anchor>a89d304681a5f94b8556b37c47e19913c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCurrentThread</name>
      <anchor>ac2bcc5bdee3d6ecd721022afc3f2629e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getThreadId</name>
      <anchor>aeb0f1ba356b9e2ddcaabcccc814161a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getThreadName</name>
      <anchor>aa15bc840a36d6cf5a1e07ba18a08915e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumRunningThreads</name>
      <anchor>a485c3835c1245f8da091de95499742f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stopAllThreads</name>
      <anchor>a0a442a26d388ca429449db8e2e299984</anchor>
      <arglist>(int timeoutInMillisecs)</arglist>
    </member>
    <member kind="function">
      <name>juce_threadEntryPoint</name>
      <anchor>ad107c71738c690943ecbcb54c6245afd</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPool</name>
    <filename>classThreadPool.html</filename>
    <member kind="function">
      <name>ThreadPool</name>
      <anchor>af599d082f2f5d9e743325b856850bf0b</anchor>
      <arglist>(int numberOfThreads, bool startThreadsOnlyWhenNeeded=true, int stopThreadsWhenNotUsedTimeoutMs=5000)</arglist>
    </member>
    <member kind="function">
      <name>~ThreadPool</name>
      <anchor>a44d3d2ab618970605e684efc216655eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addJob</name>
      <anchor>a9bfcfe0476b536d79dc1d42766cae495</anchor>
      <arglist>(ThreadPoolJob *job)</arglist>
    </member>
    <member kind="function">
      <name>removeJob</name>
      <anchor>a10da7494ab922d7157a5929d0689bf54</anchor>
      <arglist>(ThreadPoolJob *job, bool interruptIfRunning, int timeOutMilliseconds)</arglist>
    </member>
    <member kind="function">
      <name>removeAllJobs</name>
      <anchor>a69b332593788f0748b217f7a28523a11</anchor>
      <arglist>(bool interruptRunningJobs, int timeOutMilliseconds, bool deleteInactiveJobs=false, JobSelector *selectedJobsToRemove=0)</arglist>
    </member>
    <member kind="function">
      <name>getNumJobs</name>
      <anchor>a9e9ba7e536f1978a255a36bc54f641ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getJob</name>
      <anchor>aa52987dfd5d41443a914c4c20045c12c</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>a86ec36868d7215a33a5658f8ca8797c8</anchor>
      <arglist>(const ThreadPoolJob *job) const </arglist>
    </member>
    <member kind="function">
      <name>isJobRunning</name>
      <anchor>a6aa5595e971322109a2eeef2f1bdda2b</anchor>
      <arglist>(const ThreadPoolJob *job) const </arglist>
    </member>
    <member kind="function">
      <name>waitForJobToFinish</name>
      <anchor>ada78c3d08d41bb195006b5c96a6514f5</anchor>
      <arglist>(const ThreadPoolJob *job, int timeOutMilliseconds) const </arglist>
    </member>
    <member kind="function">
      <name>getNamesOfAllJobs</name>
      <anchor>a78a2ad1d546dc46fecd00b51f6b9d43f</anchor>
      <arglist>(bool onlyReturnActiveJobs) const </arglist>
    </member>
    <member kind="function">
      <name>setThreadPriorities</name>
      <anchor>a3f69128c07cb778cf6ab981b1b9be650</anchor>
      <arglist>(int newPriority)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPool::JobSelector</name>
    <filename>classThreadPool_1_1JobSelector.html</filename>
    <member kind="function">
      <name>JobSelector::~JobSelector</name>
      <anchor>a6fa333da0ce4d127f262a55db247cc8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>JobSelector::isJobSuitable</name>
      <anchor>ad128c100151aad34bc5f28ace01ad839</anchor>
      <arglist>(ThreadPoolJob *job)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPoolJob</name>
    <filename>classThreadPoolJob.html</filename>
    <member kind="function">
      <name>JobStatus</name>
      <anchor>a534c077f3c60168d88555ade062420b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>obHasFinished</name>
      <anchor>a534c077f3c60168d88555ade062420b3a390a063ef5f8b769a682f1daefc64e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>obHasFinishedAndShouldBeDeleted</name>
      <anchor>a534c077f3c60168d88555ade062420b3a093bda55a7ba197595f2c054faa00f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>obNeedsRunningAgain</name>
      <anchor>a534c077f3c60168d88555ade062420b3a42789d58048631dd96008ce23911a545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThreadPoolJob</name>
      <anchor>a701138425809122d1271561fcfa1c20d</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <name>~ThreadPoolJob</name>
      <anchor>a519d648535cefc3aed07455dd5dd9e5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getJobName</name>
      <anchor>a8dcb4c42808ce46c415e58d87a86760b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setJobName</name>
      <anchor>a0005910260394539b8117a858f5b4cfb</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <name>runJob</name>
      <anchor>aec49c01680e563257c79088dc87bc0d9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>isRunning</name>
      <anchor>abdfa85523de6f744148ae28a76461149</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>shouldExit</name>
      <anchor>a663fc310f3bc9e8ed1b9754c250722fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>signalJobShouldExit</name>
      <anchor>acf58a7de172ae74d6ebb4a9fb59ed4d3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadWithProgressWindow</name>
    <base>Thread</base>
    <base>Timer</base>
    <filename>classThreadWithProgressWindow.html</filename>
    <member kind="function">
      <name>ThreadWithProgressWindow</name>
      <anchor>a5a0d8daa741f141d28478936c4db20f0</anchor>
      <arglist>(const String &amp;windowTitle, bool hasProgressBar, bool hasCancelButton, int timeOutMsWhenCancelling=10000, const String &amp;cancelButtonText=&quot;Cancel&quot;)</arglist>
    </member>
    <member kind="function">
      <name>~ThreadWithProgressWindow</name>
      <anchor>a04c322fd5b4eb2612ab5118565ee4d29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>runThread</name>
      <anchor>a5337ebd946038ac2a2dc36b7939db9cd</anchor>
      <arglist>(int threadPriority=5)</arglist>
    </member>
    <member kind="function">
      <name>setProgress</name>
      <anchor>a607960c4dca64ea8e6193cc5e94d8c76</anchor>
      <arglist>(double newProgress)</arglist>
    </member>
    <member kind="function">
      <name>setStatusMessage</name>
      <anchor>a3f85676fc78cb05eecaf93f5d47eeaa5</anchor>
      <arglist>(const String &amp;newStatusMessage)</arglist>
    </member>
    <member kind="function">
      <name>getAlertWindow</name>
      <anchor>a8e65af0f64ddce109fb90b992701d045</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Time</name>
    <filename>classTime.html</filename>
    <member kind="function">
      <name>Time</name>
      <anchor>a4245e409c7347d1d671858962c2ca3b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Time</name>
      <anchor>a63cfbd7b36e730a3a62388df19ef3c6c</anchor>
      <arglist>(const Time &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Time</name>
      <anchor>ac67adcf009e3bfff44fc422e014a114b</anchor>
      <arglist>(int64 millisecondsSinceEpoch)</arglist>
    </member>
    <member kind="function">
      <name>Time</name>
      <anchor>a02226f44bb1e6abac31f610322e5b5de</anchor>
      <arglist>(int year, int month, int day, int hours, int minutes, int seconds=0, int milliseconds=0, bool useLocalTime=true)</arglist>
    </member>
    <member kind="function">
      <name>~Time</name>
      <anchor>a1e92dbe963fa3cdd6bea207680f5f6d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a103bbfe77a00af5a5b221d8a9008bf3b</anchor>
      <arglist>(const Time &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>getCurrentTime</name>
      <anchor>a8d041b21839ab40102ca4d31c0373b60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toMilliseconds</name>
      <anchor>af88b17954858093aece2051fe25ba723</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getYear</name>
      <anchor>a559b0668abfb7af83447608e706388d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMonth</name>
      <anchor>a3776d9d0981583454c0efe6c792abc4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMonthName</name>
      <anchor>aeaaa977f5c4f7a2dfba3a952d2400e7d</anchor>
      <arglist>(bool threeLetterVersion) const </arglist>
    </member>
    <member kind="function">
      <name>getDayOfMonth</name>
      <anchor>a2416a1e98cd07d0e5a123a359f6fe2cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDayOfWeek</name>
      <anchor>aab2dfe7f33e17aab22a21f1e54b126ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getWeekdayName</name>
      <anchor>a7a4e6240c41cee56cfc5b6732764140f</anchor>
      <arglist>(bool threeLetterVersion) const </arglist>
    </member>
    <member kind="function">
      <name>getHours</name>
      <anchor>a873f960e68e5bca8c1182d9f5c90e988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isAfternoon</name>
      <anchor>aca7bec4d2c87ea0322e9dff23c3f8dce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHoursInAmPmFormat</name>
      <anchor>ab45810b5fafe55830342c9484d95ba1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMinutes</name>
      <anchor>a4d24dc7091fdb014d75d75040b1e65f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSeconds</name>
      <anchor>ab548316e1f45234107b190252b187cf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMilliseconds</name>
      <anchor>a901b5b143608af5505e754d616166681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isDaylightSavingTime</name>
      <anchor>a9d33066287a0b5fa814ce4fee167d8e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTimeZone</name>
      <anchor>abda67a76e8785879358582e8aedd4657</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>aaaeec3ceca49b32b45db6ada9039a3a7</anchor>
      <arglist>(bool includeDate, bool includeTime, bool includeSeconds=true, bool use24HourClock=false) const </arglist>
    </member>
    <member kind="function">
      <name>formatted</name>
      <anchor>a83154a76ee889ca844c0ed777bead08f</anchor>
      <arglist>(const juce_wchar *format) const </arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>ab3f6f9d1e283af060f837a5d24881c2b</anchor>
      <arglist>(const RelativeTime &amp;delta) const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;</name>
      <anchor>a21f40ad06ae952d9b5db45969f29a4ac</anchor>
      <arglist>(const RelativeTime &amp;delta) const </arglist>
    </member>
    <member kind="function">
      <name>operator&amp;#45;</name>
      <anchor>a4384f5c0e62ab1a4947a0a2953f5ea71</anchor>
      <arglist>(const Time &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a162aa1a2f12241d1065e84c679669482</anchor>
      <arglist>(const Time &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>aba309fb4bf383d1915a855d62f8f207f</anchor>
      <arglist>(const Time &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>a0ace8e34d6e611464e5929305442e6c2</anchor>
      <arglist>(const Time &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>a4f6c0eceb42c03f24886d542780dca6a</anchor>
      <arglist>(const Time &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>a44b458d95d70ea562b9d93bcff2d645d</anchor>
      <arglist>(const Time &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>acacada0f1ecfe4228b9ae44d555623b8</anchor>
      <arglist>(const Time &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>setSystemTimeToThisTime</name>
      <anchor>af97c92a87fc52d71c386f496096bea04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getWeekdayName</name>
      <anchor>ac419d2613b5887295a85184dc32046c1</anchor>
      <arglist>(int dayNumber, bool threeLetterVersion)</arglist>
    </member>
    <member kind="function">
      <name>getMonthName</name>
      <anchor>a8f523b6b8e86c0771f545c817d00831b</anchor>
      <arglist>(int monthNumber, bool threeLetterVersion)</arglist>
    </member>
    <member kind="function">
      <name>currentTimeMillis</name>
      <anchor>a4564da4bf4adc67d0eb6dc0858993ead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getMillisecondCounter</name>
      <anchor>acc5832cf770d5b30ec71a0a47f580050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getMillisecondCounterHiRes</name>
      <anchor>a2187689176f0716be50dd4149cb9311d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>waitForMillisecondCounter</name>
      <anchor>a663a4f45d1b901c15b430ec4262f2ec9</anchor>
      <arglist>(uint32 targetTime)</arglist>
    </member>
    <member kind="function">
      <name>getApproximateMillisecondCounter</name>
      <anchor>ad2fc4a2c99450f1885fe02f647d23f03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getHighResolutionTicks</name>
      <anchor>aa7dc4e599be4724133c2a662b0f5f88a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getHighResolutionTicksPerSecond</name>
      <anchor>a1afed2257c0be044779dfcd4b17c7014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>highResolutionTicksToSeconds</name>
      <anchor>a01948fdb6ab581c14c97f4a221bd9f50</anchor>
      <arglist>(int64 ticks)</arglist>
    </member>
    <member kind="function">
      <name>secondsToHighResolutionTicks</name>
      <anchor>a02d74ab5885af5db71a815aee5e570eb</anchor>
      <arglist>(double seconds)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Timer</name>
    <filename>classTimer.html</filename>
    <member kind="function">
      <name>Timer</name>
      <anchor>a5f16e8da27d2a5a5242dead46de05d97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Timer</name>
      <anchor>a174af672a625522ef210aba0bbf757fe</anchor>
      <arglist>(const Timer &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~Timer</name>
      <anchor>ad3c95ce902fce977d280256256856d64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>timerCallback</name>
      <anchor>a8adc40ca0fb4170737ba12e30481b9d8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>startTimer</name>
      <anchor>a8498928b88c366d6d51d3c6ecc4f4d6b</anchor>
      <arglist>(int intervalInMilliseconds)</arglist>
    </member>
    <member kind="function">
      <name>stopTimer</name>
      <anchor>a27f97da1b1d19ad74a847703ca25c455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isTimerRunning</name>
      <anchor>a6aa900e5cfc752bbe9b2d3e3e192e83f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getTimerInterval</name>
      <anchor>a20a424407e4c9deb4fd718d77eb4c4d8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeSliceClient</name>
    <filename>classTimeSliceClient.html</filename>
    <member kind="function">
      <name>~TimeSliceClient</name>
      <anchor>ab97fd6407f33b2004534066c0b959e61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>useTimeSlice</name>
      <anchor>ad2d7c27b4359872e0c08d628fea07b78</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeSliceThread</name>
    <base>Thread</base>
    <filename>classTimeSliceThread.html</filename>
    <member kind="function">
      <name>TimeSliceThread</name>
      <anchor>ad2fa29d3076a7c0b600e297cc18fc9d9</anchor>
      <arglist>(const String &amp;threadName)</arglist>
    </member>
    <member kind="function">
      <name>~TimeSliceThread</name>
      <anchor>aa4374e45b3ffabac2abd5ebc04594b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addTimeSliceClient</name>
      <anchor>a63ac9791553066aec9220e26bed8675b</anchor>
      <arglist>(TimeSliceClient *client)</arglist>
    </member>
    <member kind="function">
      <name>removeTimeSliceClient</name>
      <anchor>a07b538bee2ba11da5b66bd59af25f153</anchor>
      <arglist>(TimeSliceClient *client)</arglist>
    </member>
    <member kind="function">
      <name>getNumClients</name>
      <anchor>a2b440ac33a366ddc6ee8507a840d2eb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getClient</name>
      <anchor>a13a0a576b2e96543282f342a5b9b470e</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>run</name>
      <anchor>af6f8627aaaeb69c0ec737290a87a8c12</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToggleButton</name>
    <base>Button</base>
    <filename>classToggleButton.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a23091ad53b2ffcf4a9c6c463180a337d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>a23091ad53b2ffcf4a9c6c463180a337dac6ba76c874375d1b8a3080fe6167ab92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ToggleButton</name>
      <anchor>a96fc9c7af4c32810296c6d91c8d0fc86</anchor>
      <arglist>(const String &amp;buttonText)</arglist>
    </member>
    <member kind="function">
      <name>~ToggleButton</name>
      <anchor>abd228753a34e12a78ced29ebcf1a98e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>changeWidthToFitText</name>
      <anchor>a5b2996c62b836a05bada17312ac7361c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintButton</name>
      <anchor>ae94a4795bb53980775ea3472b65e85b4</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOverButton, bool isButtonDown)</arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>a4674ff5bf92e39b55ba54a4051b01f64</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToneGeneratorAudioSource</name>
    <base>AudioSource</base>
    <filename>classToneGeneratorAudioSource.html</filename>
    <member kind="function">
      <name>ToneGeneratorAudioSource</name>
      <anchor>a474ce1bd0aef35005c8fcc7fb88ad27f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ToneGeneratorAudioSource</name>
      <anchor>a7f3432b6dd5e59d5c635660cf92b5ee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAmplitude</name>
      <anchor>a62fdfa4e1732e26feddbe02a1e09864f</anchor>
      <arglist>(const float newAmplitude)</arglist>
    </member>
    <member kind="function">
      <name>setFrequency</name>
      <anchor>a9f8ec82566faeed9c3405a4747f76162</anchor>
      <arglist>(const double newFrequencyHz)</arglist>
    </member>
    <member kind="function">
      <name>prepareToPlay</name>
      <anchor>a37faaeb23acb587f251f2ee3b95783cb</anchor>
      <arglist>(int samplesPerBlockExpected, double sampleRate)</arglist>
    </member>
    <member kind="function">
      <name>releaseResources</name>
      <anchor>a75e86cd87ba909e0e0cf85b39e335532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNextAudioBlock</name>
      <anchor>ab2e1f860b3bc61aca1b9854cb129179e</anchor>
      <arglist>(const AudioSourceChannelInfo &amp;bufferToFill)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Toolbar</name>
    <base>Component</base>
    <base>DragAndDropContainer</base>
    <base>DragAndDropTarget</base>
    <base>ButtonListener</base>
    <filename>classToolbar.html</filename>
    <member kind="function">
      <name>ToolbarItemStyle</name>
      <anchor>a20676e8832b03e18af29fd3e009d7f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>consOnly</name>
      <anchor>a20676e8832b03e18af29fd3e009d7f56ade929b3efd0d4c8f02ee2fb0bd6a7f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>consWithText</name>
      <anchor>a20676e8832b03e18af29fd3e009d7f56a6f4995861dcf04ad6973aa52a04d40ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extOnly</name>
      <anchor>a20676e8832b03e18af29fd3e009d7f56a98e59ac60f43fabf47900bb5978252b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CustomisationFlags</name>
      <anchor>a9036434be5b014285c69d2b87841fb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>llowIconsOnlyChoice</name>
      <anchor>a9036434be5b014285c69d2b87841fb3fa54114d08a4d2827e71b0a40df4a235e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>llowIconsWithTextChoice</name>
      <anchor>a9036434be5b014285c69d2b87841fb3fa348c3e9d7b294f4ad034e1d6b257903c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>llowTextOnlyChoice</name>
      <anchor>a9036434be5b014285c69d2b87841fb3fa4a8564e3f78472092203f0502fd9e091</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>howResetToDefaultsButton</name>
      <anchor>a9036434be5b014285c69d2b87841fb3fa0b0997b8269ec1a5b8fb9f6da93ee2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>llCustomisationOptionsEnabled</name>
      <anchor>a9036434be5b014285c69d2b87841fb3fa52d229dd720fe17da7cffa8aec5e70c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9ac36a170aa9bdbd62a9e148a54d19d1a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eparatorColourId</name>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9a5af4bc29284ef81090fa15f11a0f30e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uttonMouseOverBackgroundColourId</name>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9aba14bbecd41d683ad7775213c5a73254</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uttonMouseDownBackgroundColourId</name>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9a33774e84fadec5b5fb421cbea794c393</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>abelTextColourId</name>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9a6f6e4cc767b4f37b600ddcbe58f4b55a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ditingModeOutlineColourId</name>
      <anchor>ae89655c1fc755d7648eedcefcb620bc9a783c2d3c7bee40ce820b9fc1b8450d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Toolbar</name>
      <anchor>a382a894e4b7f3f82dacfb1fcaedfe716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~Toolbar</name>
      <anchor>af8e60d44a166adad046c48798646f035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setVertical</name>
      <anchor>ac3dd0cec7d3b445578a9fa4fa6519308</anchor>
      <arglist>(bool shouldBeVertical)</arglist>
    </member>
    <member kind="function">
      <name>isVertical</name>
      <anchor>abfd4c87f4e5e163229cbab5e0ba87101</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getThickness</name>
      <anchor>aff4e044acb8430694e523b360030d100</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getLength</name>
      <anchor>a5ea9abf91a1617aee903b74c78bd0619</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>a4c47ef0fad73a6ce0d5ca7169ad622c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>af554bdd9557b8c9107384af96a3a402c</anchor>
      <arglist>(ToolbarItemFactory &amp;factory, int itemId, int insertIndex=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>removeToolbarItem</name>
      <anchor>a458f8ab507f5c63b4cb0ab82f8e59ae0</anchor>
      <arglist>(int itemIndex)</arglist>
    </member>
    <member kind="function">
      <name>getNumItems</name>
      <anchor>ad07639633301b8bca8b81208dd5dc10d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getItemId</name>
      <anchor>a34e974d04c9aaab2671da7e440c8587b</anchor>
      <arglist>(int itemIndex) const </arglist>
    </member>
    <member kind="function">
      <name>getItemComponent</name>
      <anchor>ad9275ecdabda4e33ab955a3b082e0095</anchor>
      <arglist>(int itemIndex) const </arglist>
    </member>
    <member kind="function">
      <name>addDefaultItems</name>
      <anchor>ae9fdaea1b76bc158f8a9b22866911b6f</anchor>
      <arglist>(ToolbarItemFactory &amp;factoryToUse)</arglist>
    </member>
    <member kind="function">
      <name>getStyle</name>
      <anchor>a0b7d6a3be0fa6bfa467a5fde5beebd23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setStyle</name>
      <anchor>ad5f7338537653c5e5c9d8d29482eac11</anchor>
      <arglist>(const ToolbarItemStyle &amp;newStyle)</arglist>
    </member>
    <member kind="function">
      <name>showCustomisationDialog</name>
      <anchor>a0d71a6a9f9ebb041b62c0d7d4721c21e</anchor>
      <arglist>(ToolbarItemFactory &amp;factory, int optionFlags=allCustomisationOptionsEnabled)</arglist>
    </member>
    <member kind="function">
      <name>setEditingActive</name>
      <anchor>ab2bdef593ea0ea565b98241072860b11</anchor>
      <arglist>(bool editingEnabled)</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>ad5c110cf43cb333b7bda421db9e67556</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>restoreFromString</name>
      <anchor>aa1a6e1e20211d3601a86a508bd2428eb</anchor>
      <arglist>(ToolbarItemFactory &amp;factoryToUse, const String &amp;savedVersion)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a048d9bf461473e5bc0a34c2e7997a62e</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a365f2e386045b3b6b9ad072223074c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>a9129fb36710cae8e817a03e091c2ce6e</anchor>
      <arglist>(Button *)</arglist>
    </member>
    <member kind="function">
      <name>mouseDown</name>
      <anchor>aa49d618b15fc84a398c6afb776cf500c</anchor>
      <arglist>(const MouseEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>isInterestedInDragSource</name>
      <anchor>ac5673a348805827d298516cb387da3a8</anchor>
      <arglist>(const String &amp;, Component *)</arglist>
    </member>
    <member kind="function">
      <name>itemDragMove</name>
      <anchor>a6f460de79e35b91766a115fa43981bfe</anchor>
      <arglist>(const String &amp;, Component *, int, int)</arglist>
    </member>
    <member kind="function">
      <name>itemDragExit</name>
      <anchor>a65eb5c49d4c49f37271bde7560d2b061</anchor>
      <arglist>(const String &amp;, Component *)</arglist>
    </member>
    <member kind="function">
      <name>itemDropped</name>
      <anchor>a018443cbc929c2093865450774b48cd4</anchor>
      <arglist>(const String &amp;, Component *, int, int)</arglist>
    </member>
    <member kind="function">
      <name>updateAllItemPositions</name>
      <anchor>a4e76913d24b2e853337e051e4e3bc2da</anchor>
      <arglist>(const bool animate)</arglist>
    </member>
    <member kind="function">
      <name>createItem</name>
      <anchor>af3f9e1e41e8c964572836e2b5f9b0328</anchor>
      <arglist>(ToolbarItemFactory &amp;, const int itemId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToolbarButton</name>
    <base>ToolbarItemComponent</base>
    <filename>classToolbarButton.html</filename>
    <member kind="function">
      <name>ToolbarButton</name>
      <anchor>a65aeb251dea7845837d2c99ecd723904</anchor>
      <arglist>(int itemId, const String &amp;labelText, Drawable *normalImage, Drawable *toggledOnImage)</arglist>
    </member>
    <member kind="function">
      <name>~ToolbarButton</name>
      <anchor>aeaa4033350bcbe5ed7d43638d1fa7a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getToolbarItemSizes</name>
      <anchor>a276c60e1a828e75c5b22e9a57f961487</anchor>
      <arglist>(int toolbarDepth, bool isToolbarVertical, int &amp;preferredSize, int &amp;minSize, int &amp;maxSize)</arglist>
    </member>
    <member kind="function">
      <name>paintButtonArea</name>
      <anchor>a6a4281ef2007d07bc0af0e31b3a60b08</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isMouseOver, bool isMouseDown)</arglist>
    </member>
    <member kind="function">
      <name>contentAreaChanged</name>
      <anchor>a75d42c5f2fd8e885f211037967ff291e</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToolbarItemComponent</name>
    <base>Button</base>
    <filename>classToolbarItemComponent.html</filename>
    <member kind="function">
      <name>ToolbarEditingMode</name>
      <anchor>ad499f9f48a5149685ab8da86244fd4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ormalMode</name>
      <anchor>ad499f9f48a5149685ab8da86244fd4e4a1541b19e132dd72861bdf1a9d73c2717</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ditableOnToolbar</name>
      <anchor>ad499f9f48a5149685ab8da86244fd4e4a33d140eb9c5d5bc9e4ce6cd838dc30aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ditableOnPalette</name>
      <anchor>ad499f9f48a5149685ab8da86244fd4e4a440b4d0912bbbaf54955a30814e5bd6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ToolbarItemComponent</name>
      <anchor>a7af0b03ed1fd7b50cce26291e5afe8b7</anchor>
      <arglist>(int itemId, const String &amp;labelText, bool isBeingUsedAsAButton)</arglist>
    </member>
    <member kind="function">
      <name>~ToolbarItemComponent</name>
      <anchor>a6b4eb89703728a01b56ca090350aea91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getItemId</name>
      <anchor>a5653dde12c3d40f7860a89f0cbf9e500</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getToolbar</name>
      <anchor>a810281a298dd61446aeb2ab77d93c092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isToolbarVertical</name>
      <anchor>a696908e2b6a322c01428f1899befe4d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getStyle</name>
      <anchor>a8ede15385bfd3dcf6a68958928ea3d2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setStyle</name>
      <anchor>a87f11ea60f19c4dda9e019ed7b4760e8</anchor>
      <arglist>(const Toolbar::ToolbarItemStyle &amp;newStyle)</arglist>
    </member>
    <member kind="function">
      <name>getContentArea</name>
      <anchor>af82e4a3351b36d892c5cdf6169d80cef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getToolbarItemSizes</name>
      <anchor>a8d51f7ec7319161a2cec966331c753af</anchor>
      <arglist>(int toolbarThickness, bool isToolbarVertical, int &amp;preferredSize, int &amp;minSize, int &amp;maxSize)=0</arglist>
    </member>
    <member kind="function">
      <name>paintButtonArea</name>
      <anchor>a72f83aef9d05179579355986d07ad78d</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isMouseOver, bool isMouseDown)=0</arglist>
    </member>
    <member kind="function">
      <name>contentAreaChanged</name>
      <anchor>a93180fe84b7a16ceafa985ece169a95d</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;newBounds)=0</arglist>
    </member>
    <member kind="function">
      <name>setEditingMode</name>
      <anchor>ae4647dbdbea1004901b845f0082dcd9b</anchor>
      <arglist>(const ToolbarEditingMode newMode)</arglist>
    </member>
    <member kind="function">
      <name>getEditingMode</name>
      <anchor>a9cf4edf59c648cebdc05e8b5baa872dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>paintButton</name>
      <anchor>a9133b9cad2374a608e50f345e6fceee7</anchor>
      <arglist>(Graphics &amp;g, bool isMouseOver, bool isMouseDown)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a6a271823b8b8fbeae504bbe52526f526</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToolbarItemFactory</name>
    <filename>classToolbarItemFactory.html</filename>
    <member kind="function">
      <name>SpecialItemIds</name>
      <anchor>a415ffaa38b6306574ad6777ccf6d2ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eparatorBarId</name>
      <anchor>a415ffaa38b6306574ad6777ccf6d2ac4a38897536f81bb5f607c2b71757e1e33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pacerId</name>
      <anchor>a415ffaa38b6306574ad6777ccf6d2ac4ac286d65323d1f29475107f6836416631</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lexibleSpacerId</name>
      <anchor>a415ffaa38b6306574ad6777ccf6d2ac4acfa608a9b717b6c24dcdfb9ba378f1cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ToolbarItemFactory</name>
      <anchor>aff4611dac37d3e945a719718b673b7fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~ToolbarItemFactory</name>
      <anchor>a596b8244e44da37f9a8f68491f00b0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getAllToolbarItemIds</name>
      <anchor>ad714c2b2092438075488357417e3376f</anchor>
      <arglist>(Array&lt; int &gt; &amp;ids)=0</arglist>
    </member>
    <member kind="function">
      <name>getDefaultItemSet</name>
      <anchor>a334318465c8de5333d075519f38bb0dd</anchor>
      <arglist>(Array&lt; int &gt; &amp;ids)=0</arglist>
    </member>
    <member kind="function">
      <name>createItem</name>
      <anchor>ac4ba0c68fe72142f76608b0badbb290b</anchor>
      <arglist>(int itemId)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToolbarItemPalette</name>
    <base>Component</base>
    <base>DragAndDropContainer</base>
    <filename>classToolbarItemPalette.html</filename>
    <member kind="function">
      <name>ToolbarItemPalette</name>
      <anchor>a0d151a95a4446df9d318cfdc541a6f83</anchor>
      <arglist>(ToolbarItemFactory &amp;factory, Toolbar *toolbar)</arglist>
    </member>
    <member kind="function">
      <name>~ToolbarItemPalette</name>
      <anchor>a024d0f39379f749babe845fa243f1fe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a85ba166afeb49c5b331e5cb0b1b090cc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TooltipClient</name>
    <filename>classTooltipClient.html</filename>
    <member kind="function">
      <name>~TooltipClient</name>
      <anchor>a1bc2223e107e4122d251f5b90049140c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTooltip</name>
      <anchor>a03022d6ac0bc313e29399136cf5fe84f</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TooltipWindow</name>
    <base>Component</base>
    <base>Timer</base>
    <filename>classTooltipWindow.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>a84c5ba04f6f39e42fdf969f1cf37f6c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>a84c5ba04f6f39e42fdf969f1cf37f6c6a28c64d55232b2dfff730222dd0c1bcb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extColourId</name>
      <anchor>a84c5ba04f6f39e42fdf969f1cf37f6c6a5bf990824b485757bf9ab04fc0187eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utlineColourId</name>
      <anchor>a84c5ba04f6f39e42fdf969f1cf37f6c6a41876befabbf3948f92be5889339aefd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TooltipWindow</name>
      <anchor>a81edd2f54f237312e1790adf4a2738c3</anchor>
      <arglist>(Component *parentComponent=0, int millisecondsBeforeTipAppears=700)</arglist>
    </member>
    <member kind="function">
      <name>~TooltipWindow</name>
      <anchor>a0200afb94084ac46d3f8a054402a58a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMillisecondsBeforeTipAppears</name>
      <anchor>abb8b850b212b0b942bebb499cf739374</anchor>
      <arglist>(int newTimeMs=700)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TopLevelWindow</name>
    <base>Component</base>
    <filename>classTopLevelWindow.html</filename>
    <member kind="function">
      <name>TopLevelWindow</name>
      <anchor>a7d52a41e30bff8d342327abc4f476112</anchor>
      <arglist>(const String &amp;name, bool addToDesktop)</arglist>
    </member>
    <member kind="function">
      <name>~TopLevelWindow</name>
      <anchor>a20277d9867a8e2fa56405a24b595e547</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isActiveWindow</name>
      <anchor>a062e4ca59e99892d20ab6afe0a46046d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>centreAroundComponent</name>
      <anchor>a24c4beccd6e394c68a2def2e38a3213a</anchor>
      <arglist>(Component *componentToCentreAround, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>setDropShadowEnabled</name>
      <anchor>aed7017ec50e075cca022b5c11ce5fdff</anchor>
      <arglist>(bool useShadow)</arglist>
    </member>
    <member kind="function">
      <name>setUsingNativeTitleBar</name>
      <anchor>a749fbd5e688ed8c9af3d0d99b21e18c8</anchor>
      <arglist>(bool useNativeTitleBar)</arglist>
    </member>
    <member kind="function">
      <name>isUsingNativeTitleBar</name>
      <anchor>a710bde016c54803b58e9bf5a2b58030c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNumTopLevelWindows</name>
      <anchor>a2fbef417a05fbd90bb521bc89c5bc5f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getTopLevelWindow</name>
      <anchor>a57501660f21682635cb42a504333285b</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>getActiveTopLevelWindow</name>
      <anchor>a969fdebe910b0711b0aa0fd9a0cf6030</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addToDesktop</name>
      <anchor>a0246f15e4f7e7777ac96cdbe9f4ad63c</anchor>
      <arglist>(int windowStyleFlags, void *nativeWindowToAttachTo=0)</arglist>
    </member>
    <member kind="function">
      <name>activeWindowStatusChanged</name>
      <anchor>a6d2a68ab02862e0dda13a5d1cf874142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>focusOfChildComponentChanged</name>
      <anchor>ae357bf2baa7795ef96fb04b6fd3a4837</anchor>
      <arglist>(FocusChangeType cause)</arglist>
    </member>
    <member kind="function">
      <name>parentHierarchyChanged</name>
      <anchor>a1e1714fde20ebe5abfa6df7ba8235822</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>visibilityChanged</name>
      <anchor>a6af5b4cae225733686ae4822ff7eaf42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDesktopWindowStyleFlags</name>
      <anchor>ac586f72632e58fe22cf8e45b046511c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>recreateDesktopWindow</name>
      <anchor>a17ae4404a23e24e2859a396bc391ffc1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeView</name>
    <base>Component</base>
    <base>SettableTooltipClient</base>
    <base>FileDragAndDropTarget</base>
    <base>DragAndDropTarget</base>
    <base>AsyncUpdater</base>
    <filename>classTreeView.html</filename>
    <member kind="function">
      <name>ColourIds</name>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ackgroundColourId</name>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6aafe6141938ba7ca482d4bfd990c9972a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>inesColourId</name>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6aa129ebbdc625406f6dd26047aaa3f082a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ragAndDropIndicatorColourId</name>
      <anchor>abeebe6dbdc6ae466495aabc64eb51d6aad580cdecf3960d0d68904675383bb2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TreeView</name>
      <anchor>a25881e2dd48e2ed826d7b1c360352b4c</anchor>
      <arglist>(const String &amp;componentName=String::empty)</arglist>
    </member>
    <member kind="function">
      <name>~TreeView</name>
      <anchor>a9131ac3d332c721b2aa8e3202e7cc305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setRootItem</name>
      <anchor>a14b78e4691e3155d1a55ea7edf743596</anchor>
      <arglist>(TreeViewItem *newRootItem)</arglist>
    </member>
    <member kind="function">
      <name>getRootItem</name>
      <anchor>ad0e01c9111046b05870767db12f15a09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>deleteRootItem</name>
      <anchor>ad5245e71c0684de6cf942238da54b9cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setRootItemVisible</name>
      <anchor>a3c28114193951c8079fdfeb95738f410</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <name>isRootItemVisible</name>
      <anchor>a69f76e784054f6ce89cd6dd4d31420b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setDefaultOpenness</name>
      <anchor>a5a9030dae554634352b2c4f2ed2db5b9</anchor>
      <arglist>(bool isOpenByDefault)</arglist>
    </member>
    <member kind="function">
      <name>areItemsOpenByDefault</name>
      <anchor>af830a972ca9336e24edbaed229b6b772</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setMultiSelectEnabled</name>
      <anchor>acf2e695dbd3a01343d1c69b022650e97</anchor>
      <arglist>(bool canMultiSelect)</arglist>
    </member>
    <member kind="function">
      <name>isMultiSelectEnabled</name>
      <anchor>a500138597735ff3fee171e594add1361</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setOpenCloseButtonsVisible</name>
      <anchor>abe04eaa5b5df3a1d37187d002c174e24</anchor>
      <arglist>(bool shouldBeVisible)</arglist>
    </member>
    <member kind="function">
      <name>areOpenCloseButtonsVisible</name>
      <anchor>a07957727f6ed1c75a3225600a61daf67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>clearSelectedItems</name>
      <anchor>ae64500dc9c423669798ab1bd81952f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumSelectedItems</name>
      <anchor>a3276e351adb0a3a2404706c1b4cc3fdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSelectedItem</name>
      <anchor>a63561054a2622c0ab73e53de728c8e59</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getNumRowsInTree</name>
      <anchor>a352eb21745885abb3d8032d5e1469338</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getItemOnRow</name>
      <anchor>ac5a7d7f1cbe8b4ac166ef16851c53835</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getItemAt</name>
      <anchor>a651fc54f2bbc1d6377105bfc0180a53e</anchor>
      <arglist>(int yPosition) const </arglist>
    </member>
    <member kind="function">
      <name>scrollToKeepItemVisible</name>
      <anchor>adff5344f0cbd0053553335d2a9397fd6</anchor>
      <arglist>(TreeViewItem *item)</arglist>
    </member>
    <member kind="function">
      <name>getViewport</name>
      <anchor>a152f3443db9cfb86769167d9b34b4f6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getIndentSize</name>
      <anchor>acac0de3bba75b3b9831fde73e4249be0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setIndentSize</name>
      <anchor>a9baf9e5fc5fa8474ba09ebbf3076a500</anchor>
      <arglist>(int newIndentSize)</arglist>
    </member>
    <member kind="function">
      <name>findItemFromIdentifierString</name>
      <anchor>aef07872429f7bd1807ecf5c7186fa608</anchor>
      <arglist>(const String &amp;identifierString) const </arglist>
    </member>
    <member kind="function">
      <name>getOpennessState</name>
      <anchor>ae442d9c17f9dddbf745ddb57b9332919</anchor>
      <arglist>(bool alsoIncludeScrollPosition) const </arglist>
    </member>
    <member kind="function">
      <name>restoreOpennessState</name>
      <anchor>a931a8ad9f29c75e972c1d2a9fa57e10f</anchor>
      <arglist>(const XmlElement &amp;newState)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>adecab139b0c47342db0c9232a522b8bb</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a16a45992d6ebdbb6f91a1a62b251b0d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>ada247895744d2fdf492879863e6f614e</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>colourChanged</name>
      <anchor>a16cd0cac60fcfd0d53bb07e5905cd114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enablementChanged</name>
      <anchor>af8b931107d29b2a0bd7d249cdeb1dcb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isInterestedInFileDrag</name>
      <anchor>aca50fc760a2260f4198229eca74ccef8</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function">
      <name>fileDragEnter</name>
      <anchor>a96a70f0646b24a6f9a37fcec0babf79f</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>fileDragMove</name>
      <anchor>ab344425b9dd497f6e3222f4fadff3768</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>fileDragExit</name>
      <anchor>a1fb933d90a33ca2c8888a912561a5f0c</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function">
      <name>filesDropped</name>
      <anchor>a4a4b11ed1c5c8eadfbf73eb11da3bacc</anchor>
      <arglist>(const StringArray &amp;files, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>isInterestedInDragSource</name>
      <anchor>af2144b66b91596405039a06230aa8933</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent)</arglist>
    </member>
    <member kind="function">
      <name>itemDragEnter</name>
      <anchor>a37b749fdc6acf79e59f0e1b39e2875a4</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>itemDragMove</name>
      <anchor>a06ddb7407c296a828022cb54b3e47bd6</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>itemDragExit</name>
      <anchor>a3c637a5ac99f9c02c211d146edcb59ce</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent)</arglist>
    </member>
    <member kind="function">
      <name>itemDropped</name>
      <anchor>a729cde966890733ee47da26f0cf01478</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent, int x, int y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeViewItem</name>
    <filename>classTreeViewItem.html</filename>
    <member kind="function">
      <name>TreeViewItem</name>
      <anchor>a442058a1c6d9eef0aa6f8b918fcbf8d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~TreeViewItem</name>
      <anchor>a096327dbe3300e99a80eff28f0e20a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumSubItems</name>
      <anchor>afbe867044ac3f024c640d8972ef7c03b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSubItem</name>
      <anchor>aca6aaee4364b546f1aab30c6dbba4684</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>clearSubItems</name>
      <anchor>a3e5f73cd812c6626047d38307560aaeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addSubItem</name>
      <anchor>a536e1e4edaf0b0a472c485050d54eb5a</anchor>
      <arglist>(TreeViewItem *newItem, int insertPosition=&amp;#45;1)</arglist>
    </member>
    <member kind="function">
      <name>removeSubItem</name>
      <anchor>a80b8910184619d952841a1b93d4b75c4</anchor>
      <arglist>(int index, bool deleteItem=true)</arglist>
    </member>
    <member kind="function">
      <name>getOwnerView</name>
      <anchor>a1164ab0bde4536bcdc0f3c4e203703f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getParentItem</name>
      <anchor>afd5f00ed3a22f55ff906e2658d560bd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isOpen</name>
      <anchor>a021c37ec27ff2421b51b83c8ef1ec72f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setOpen</name>
      <anchor>ae1d86e63026471f8edea97f7dc5fd05f</anchor>
      <arglist>(bool shouldBeOpen)</arglist>
    </member>
    <member kind="function">
      <name>isSelected</name>
      <anchor>a42d9e284b27a6648c7432dbb3a0f2005</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setSelected</name>
      <anchor>a81cd469a2a0b50e6c35827293d06267f</anchor>
      <arglist>(bool shouldBeSelected, bool deselectOtherItemsFirst)</arglist>
    </member>
    <member kind="function">
      <name>getItemPosition</name>
      <anchor>a47020d8aa2aef9fce99d7084b747f59c</anchor>
      <arglist>(bool relativeToTreeViewTopLeft) const </arglist>
    </member>
    <member kind="function">
      <name>treeHasChanged</name>
      <anchor>a5f2a442bb2c1f5addae2b67a40da324b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>repaintItem</name>
      <anchor>a35c45db6f6062b532825788835b542e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRowNumberInTree</name>
      <anchor>a2b9518c2d4bc3b9c610b1035d9e91616</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>areAllParentsOpen</name>
      <anchor>ab219dff728dbfeb864df55d689963d72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setLinesDrawnForSubItems</name>
      <anchor>a710ed3b22bad9d168d9bba3d2d6c3f43</anchor>
      <arglist>(bool shouldDrawLines)</arglist>
    </member>
    <member kind="function">
      <name>mightContainSubItems</name>
      <anchor>a1d4dc3f8e9971147e2649a128bd0344d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getUniqueName</name>
      <anchor>a0ac307aa1a9d2f09decfbc8646da5a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>itemOpennessChanged</name>
      <anchor>ae675d65af3c2ab3455b98aa6d025d070</anchor>
      <arglist>(bool isNowOpen)</arglist>
    </member>
    <member kind="function">
      <name>getItemWidth</name>
      <anchor>ae7800c63ef926a84f8f0e29325b9978e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getItemHeight</name>
      <anchor>a5e75b5a4c32d6ee01e32b6358547bae0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>canBeSelected</name>
      <anchor>a72ffb7ddd950a76b4626e3bd280b7fe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createItemComponent</name>
      <anchor>af821a303a31a9256e00b94ff8fe2595d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintItem</name>
      <anchor>adc3e3a7c09443e28b1f48fe10b9569b2</anchor>
      <arglist>(Graphics &amp;g, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>paintOpenCloseButton</name>
      <anchor>a387bbc6f7f268498d31f17bb2aee8d63</anchor>
      <arglist>(Graphics &amp;g, int width, int height, bool isMouseOver)</arglist>
    </member>
    <member kind="function">
      <name>itemClicked</name>
      <anchor>a1d16cbc797adba8e7dda4db01f868f72</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>itemDoubleClicked</name>
      <anchor>a44f6bac320a0ed884006e25558c6b513</anchor>
      <arglist>(const MouseEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>itemSelectionChanged</name>
      <anchor>a2b1fe5d650ef8cc31a16f1eaed03e837</anchor>
      <arglist>(bool isNowSelected)</arglist>
    </member>
    <member kind="function">
      <name>getTooltip</name>
      <anchor>a09ed48e77a4b08974effd7b0bb6d99c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDragSourceDescription</name>
      <anchor>a0a4f231e46742afcee68a92c3e3bbdc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isInterestedInFileDrag</name>
      <anchor>abe8b909ba44b7eac0988b2adc6257c46</anchor>
      <arglist>(const StringArray &amp;files)</arglist>
    </member>
    <member kind="function">
      <name>filesDropped</name>
      <anchor>a6149fa51385ef76bfede3481d3646797</anchor>
      <arglist>(const StringArray &amp;files, int insertIndex)</arglist>
    </member>
    <member kind="function">
      <name>isInterestedInDragSource</name>
      <anchor>add438420a02fa4be4ff5f29859cda795</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent)</arglist>
    </member>
    <member kind="function">
      <name>itemDropped</name>
      <anchor>a8f902d87682a93110a45e01e032a01d8</anchor>
      <arglist>(const String &amp;sourceDescription, Component *sourceComponent, int insertIndex)</arglist>
    </member>
    <member kind="function">
      <name>setDrawsInLeftMargin</name>
      <anchor>a2ad84f2c701423fa0482f7e4b5c44e8e</anchor>
      <arglist>(bool canDrawInLeftMargin)</arglist>
    </member>
    <member kind="function">
      <name>getOpennessState</name>
      <anchor>a55bec44dbc8442b4389b282f02f2a441</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>restoreOpennessState</name>
      <anchor>a2543807283072980a45ba62f4f0eed46</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="function">
      <name>getIndexInParent</name>
      <anchor>ac62b9ca1e1b3b07105acaea707c6da84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isLastOfSiblings</name>
      <anchor>a6e03684222d8cf2be50304fb69e11a7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getItemIdentifierString</name>
      <anchor>ab5d4407b691bc33fb454a6e0fffad921</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Typeface</name>
    <base>ReferenceCountedObject</base>
    <filename>classTypeface.html</filename>
    <member kind="function">
      <name>Ptr</name>
      <anchor>a13053be679c87b7a72963e9ce60e34c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>~Typeface</name>
      <anchor>ae3f6929dec75f834504478b6ab33dcbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Typeface</name>
      <anchor>a13d6cc9d4aa9b62f5443ce9b8462b562</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <name>getName</name>
      <anchor>a290a55895f3ecc231d9da4d99e72c0a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createSystemTypefaceFor</name>
      <anchor>a4cf6af7ddcccbc4546c14b522bda839b</anchor>
      <arglist>(const Font &amp;font)</arglist>
    </member>
    <member kind="function">
      <name>getAscent</name>
      <anchor>aefd72f013b7702a719bf1532fc1f171b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>getDescent</name>
      <anchor>a47d0adeb19ac659b54cad34a832192c9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>getStringWidth</name>
      <anchor>acb8c05c634392c892c0068011e888d0f</anchor>
      <arglist>(const String &amp;text)=0</arglist>
    </member>
    <member kind="function">
      <name>getGlyphPositions</name>
      <anchor>ac4b6f9b7c3555f8440a699c845ddfca4</anchor>
      <arglist>(const String &amp;text, Array&lt; int &gt; &amp;glyphs, Array&lt; float &gt; &amp;xOffsets)=0</arglist>
    </member>
    <member kind="function">
      <name>getOutlineForGlyph</name>
      <anchor>a64aaf421db333c9150eaa1a5d4fd7cf8</anchor>
      <arglist>(int glyphNumber, Path &amp;path)=0</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>adf2787d392df086aa81c1a831d1ca3f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeOfCriticalSectionToUse</name>
    <filename>classTypeOfCriticalSectionToUse.html</filename>
  </compound>
  <compound kind="class">
    <name>UndoableAction</name>
    <filename>classUndoableAction.html</filename>
    <member kind="function">
      <name>UndoableAction</name>
      <anchor>ad486c0db9bf973bd3aae0a41274dade1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~UndoableAction</name>
      <anchor>ae1567cc5931e990c2a2912f47808593b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>perform</name>
      <anchor>a6411ef8343148b52fef4bdc0290dfe06</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>undo</name>
      <anchor>a535a5ca2bdc00edebe2b868ec7c13482</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getSizeInUnits</name>
      <anchor>a77613c64378930b1af6255ea5ec8df0d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UndoManager</name>
    <base>ChangeBroadcaster</base>
    <filename>classUndoManager.html</filename>
    <member kind="function">
      <name>UndoManager</name>
      <anchor>a80479ce847ec1ac8cccb8bdf5bb5729e</anchor>
      <arglist>(int maxNumberOfUnitsToKeep=30000, int minimumTransactionsToKeep=30)</arglist>
    </member>
    <member kind="function">
      <name>~UndoManager</name>
      <anchor>a8d02b39eef79a885fb71be93ddac1115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearUndoHistory</name>
      <anchor>a14ecaa1dcab72d09ccb826bc7a0d2743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumberOfUnitsTakenUpByStoredCommands</name>
      <anchor>a20655846f23dbbcc3401debf7c6f3866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setMaxNumberOfStoredUnits</name>
      <anchor>a371dddb00a010caf5e3bb88d4009bdfb</anchor>
      <arglist>(int maxNumberOfUnitsToKeep, int minimumTransactionsToKeep)</arglist>
    </member>
    <member kind="function">
      <name>perform</name>
      <anchor>ad16c1fef7afaa7187e3b473eff03b214</anchor>
      <arglist>(UndoableAction *action, const String &amp;actionName=String::empty)</arglist>
    </member>
    <member kind="function">
      <name>beginNewTransaction</name>
      <anchor>a75ec9e2cf8049d1824fd7ebd60bae131</anchor>
      <arglist>(const String &amp;actionName=String::empty)</arglist>
    </member>
    <member kind="function">
      <name>setCurrentTransactionName</name>
      <anchor>a920cca3e24c598a175d90b04765fe5bc</anchor>
      <arglist>(const String &amp;newName)</arglist>
    </member>
    <member kind="function">
      <name>canUndo</name>
      <anchor>a530c911b964fc6759b0b68dbf0bb2335</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getUndoDescription</name>
      <anchor>ab491f1fe0684e94d196731d14fa56420</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>undo</name>
      <anchor>a39f45c284e8d0df1a0d378e676246931</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>undoCurrentTransactionOnly</name>
      <anchor>ad81c6649e3acc3ab36726c280058d6bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getActionsInCurrentTransaction</name>
      <anchor>a5f174495e70457b64db51c810707a102</anchor>
      <arglist>(Array&lt; const UndoableAction * &gt; &amp;actionsFound) const </arglist>
    </member>
    <member kind="function">
      <name>getNumActionsInCurrentTransaction</name>
      <anchor>aa16c6f968d74ac4b629dea6ea77464d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>canRedo</name>
      <anchor>a3de157c2f343a4857c900e3f86e20304</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getRedoDescription</name>
      <anchor>ad6793c7d6fff6ac7971b2224c269b0e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>redo</name>
      <anchor>aaea507a3b9eaea3360c0e393edf69ccb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>URL</name>
    <filename>classURL.html</filename>
    <member kind="function">
      <name>OpenStreamProgressCallback</name>
      <anchor>a24e0205b0375cff235d64cc33d8c8550</anchor>
      <arglist>)(void *context, int bytesSent, int totalBytes)</arglist>
    </member>
    <member kind="function">
      <name>URL</name>
      <anchor>ad6ecb93e145465c5b20f2e90f2f1163a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>URL</name>
      <anchor>aa00fab54fc95a6a9a468228150c034d6</anchor>
      <arglist>(const String &amp;url)</arglist>
    </member>
    <member kind="function">
      <name>URL</name>
      <anchor>af069bf0e7621be7f0eec3f1c80f5560a</anchor>
      <arglist>(const URL &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~URL</name>
      <anchor>a127152050325ba77075f00ee2630c33c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a0b7c692abdea0088c065a562559101f2</anchor>
      <arglist>(const URL &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>afa99ac4c33fc491c87e569a2e069dd09</anchor>
      <arglist>(bool includeGetParameters) const </arglist>
    </member>
    <member kind="function">
      <name>isWellFormed</name>
      <anchor>a6be5388bb876debe10fd8f899d8f1865</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getDomain</name>
      <anchor>a749c06e96f628bc355d10a075569b1d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getSubPath</name>
      <anchor>a8f8c06acddd83ecfbfe9a9ed24617331</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getScheme</name>
      <anchor>aa06792256d18c4063cf38f6889452ba8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>withNewSubPath</name>
      <anchor>ae91f03b86f807becf2c8e280cfe92ce1</anchor>
      <arglist>(const String &amp;newPath) const </arglist>
    </member>
    <member kind="function">
      <name>withParameter</name>
      <anchor>a6b9719922f8cd0e286ec4929973d5f71</anchor>
      <arglist>(const String &amp;parameterName, const String &amp;parameterValue) const </arglist>
    </member>
    <member kind="function">
      <name>withFileToUpload</name>
      <anchor>a2971ef72a3657374cdf2039aa26b8ecd</anchor>
      <arglist>(const String &amp;parameterName, const File &amp;fileToUpload, const String &amp;mimeType) const </arglist>
    </member>
    <member kind="function">
      <name>getParameters</name>
      <anchor>a50ee5375427b5bcbfdb8bfa472eb4a6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getFilesToUpload</name>
      <anchor>a0cc39c1f6c4457e980062b3c23b51b17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMimeTypesOfUploadFiles</name>
      <anchor>a055846868f227b034a3999f19a887b20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>withPOSTData</name>
      <anchor>a3a0f3a8f3e4283a1d42615af7da89dcb</anchor>
      <arglist>(const String &amp;postData) const </arglist>
    </member>
    <member kind="function">
      <name>getPostData</name>
      <anchor>a54c264aaa926e74da950b0a6428be9a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>launchInDefaultBrowser</name>
      <anchor>ab56bf9814dfe828db465582b3af50c69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isProbablyAWebsiteURL</name>
      <anchor>a99df56e20fd9bf9426538571eaa06909</anchor>
      <arglist>(const String &amp;possibleURL)</arglist>
    </member>
    <member kind="function">
      <name>isProbablyAnEmailAddress</name>
      <anchor>a104e0a0539ab797a3057b19b8c531503</anchor>
      <arglist>(const String &amp;possibleEmailAddress)</arglist>
    </member>
    <member kind="function">
      <name>createInputStream</name>
      <anchor>a82a8dd303219a06c3e381bd7f2f68e06</anchor>
      <arglist>(bool usePostCommand, OpenStreamProgressCallback *progressCallback=0, void *progressCallbackContext=0, const String &amp;extraHeaders=String::empty, int connectionTimeOutMs=0) const </arglist>
    </member>
    <member kind="function">
      <name>readEntireBinaryStream</name>
      <anchor>ade18c87d31c10cb7fea4453afeee2de6</anchor>
      <arglist>(MemoryBlock &amp;destData, bool usePostCommand=false) const </arglist>
    </member>
    <member kind="function">
      <name>readEntireTextStream</name>
      <anchor>aa7c53e6e6afb3859a1c1b091458ec1a1</anchor>
      <arglist>(bool usePostCommand=false) const </arglist>
    </member>
    <member kind="function">
      <name>readEntireXmlStream</name>
      <anchor>a91141cb99e805bf469b8080fc02eefd2</anchor>
      <arglist>(bool usePostCommand=false) const </arglist>
    </member>
    <member kind="function">
      <name>addEscapeChars</name>
      <anchor>a778b803a96cfec04ffb279c9df2ef77b</anchor>
      <arglist>(const String &amp;stringToAddEscapeCharsTo, bool isParameter)</arglist>
    </member>
    <member kind="function">
      <name>removeEscapeChars</name>
      <anchor>ac5d01f1c0a743e205f7250b9a9c85f9e</anchor>
      <arglist>(const String &amp;stringToRemoveEscapeCharsFrom)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Uuid</name>
    <filename>classUuid.html</filename>
    <member kind="function">
      <name>Uuid</name>
      <anchor>a55663b31db8d26c71fa1b0258ccc34f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~Uuid</name>
      <anchor>a60727110b70ec35c6d8b8d1f70629355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Uuid</name>
      <anchor>a9509abafb51da0ada115eee741e99400</anchor>
      <arglist>(const Uuid &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Uuid</name>
      <anchor>a1c1c2279f664fb5ecd1c7a40a2427659</anchor>
      <arglist>(const String &amp;uuidString)</arglist>
    </member>
    <member kind="function">
      <name>Uuid</name>
      <anchor>a9f38c5c15f6b6226377a9a503259f24c</anchor>
      <arglist>(const uint8 *const rawData)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>aa1ca1b6f8412ff1f383cd1b6c5f3606a</anchor>
      <arglist>(const Uuid &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>a4ef0a50f34f564b1bd87c6a2ca38ed8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a94184c1d9e41399c88edd0afaab9e4cd</anchor>
      <arglist>(const Uuid &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>ab27f506f8faf54649c325f1b1e15a231</anchor>
      <arglist>(const Uuid &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>a0cac2fa1d0717841ac3e26ea2132f74a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a94d863e1d7853c72fd2a8986c52b53e0</anchor>
      <arglist>(const String &amp;uuidString)</arglist>
    </member>
    <member kind="function">
      <name>getRawData</name>
      <anchor>ad0cc3c0a065dc120375271020fe90513</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a3ddc0e34d06eb9f07d233b301b30e4e3</anchor>
      <arglist>(const uint8 *const rawData)</arglist>
    </member>
    <member kind="function">
      <name>asBytes</name>
      <anchor>a0a721521e398903bc52f3040064a3ca7</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="function">
      <name>asInt</name>
      <anchor>ac32f2767a02365b98c3632ed5615f213</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="function">
      <name>asInt64</name>
      <anchor>ab98fe3002a5ca920133de2cf8624fa42</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Value</name>
    <filename>classValue.html</filename>
    <member kind="function">
      <name>Value</name>
      <anchor>abc2a5a2e6484fac66dae2539cc955667</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Value</name>
      <anchor>acc427785c9007f762772d1dbe7535295</anchor>
      <arglist>(const Value &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Value</name>
      <anchor>ad20df25aa8a6b58ae7220abb5abea977</anchor>
      <arglist>(const var &amp;initialValue)</arglist>
    </member>
    <member kind="function">
      <name>~Value</name>
      <anchor>a3a578f458da8a4ab67052dba0f7bffdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Value</name>
      <anchor>a4ebb5e69b8fe37254465199f26eedc16</anchor>
      <arglist>(ValueSource *const valueSource)</arglist>
    </member>
    <member kind="function">
      <name>getValue</name>
      <anchor>add96b640c7dae8c4f084225a5d67d5f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator const var</name>
      <anchor>ab08814d7205bc942e45c7f0b646d6d4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>a7d5759cadaf8a1388b17764e27ff0368</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>aad44af687acd1f62ad9231e8ae47059d</anchor>
      <arglist>(const var &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a9c968011a1af3dbe03d6f6fa272fa674</anchor>
      <arglist>(const var &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <name>referTo</name>
      <anchor>a127b52830b5d62b478224b670d9e78f9</anchor>
      <arglist>(const Value &amp;valueToReferTo)</arglist>
    </member>
    <member kind="function">
      <name>refersToSameSourceAs</name>
      <anchor>ac748fe41dba23758e8891622a0eb5443</anchor>
      <arglist>(const Value &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a593ffc8716f4950dfd404f8589994976</anchor>
      <arglist>(const Value &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a0d4b1c3a4a5b2c2ef50ca3fb6279fc1b</anchor>
      <arglist>(const Value &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>adcefcff0ef71a7b2c4cce8d75177c165</anchor>
      <arglist>(Listener *const listener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>aa1dbdb0e1c0e3120e3c95389e56e4f5b</anchor>
      <arglist>(Listener *const listener)</arglist>
    </member>
    <member kind="function">
      <name>getValueSource</name>
      <anchor>a554c9a5795104e32cfc42d605376e2d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Value::Listener</name>
    <filename>classValue_1_1Listener.html</filename>
    <member kind="function">
      <name>Listener::Listener</name>
      <anchor>aca4d97f9b7f5d75109df491021e8a308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Listener::~Listener</name>
      <anchor>a10db56a1241f10e1d2497de6248f519d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Listener::valueChanged</name>
      <anchor>ab1f072eabd128b8e9a99b4926f2231a8</anchor>
      <arglist>(Value &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Value::ValueSource</name>
    <base>ReferenceCountedObject</base>
    <base>AsyncUpdater</base>
    <filename>classValue_1_1ValueSource.html</filename>
    <member kind="function">
      <name>ValueSource::ValueSource</name>
      <anchor>a38f5ca1d8aed95c1d5caaa9c1c461626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ValueSource::~ValueSource</name>
      <anchor>a4d52ea8cc66d29d25449726557c7c4a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ValueSource::ValueSource</name>
      <anchor>a3748a7c15d0a7b42547deb99fe6cf840</anchor>
      <arglist>(const ValueSource &amp;)</arglist>
    </member>
    <member kind="function">
      <name>ValueSource::getValue</name>
      <anchor>ae2ec87b22db3881eab6225fe63f5a141</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>ValueSource::setValue</name>
      <anchor>aa21be5c22b2846326b8d52cf7a79f7f9</anchor>
      <arglist>(const var &amp;newValue)=0</arglist>
    </member>
    <member kind="function">
      <name>ValueSource::sendChangeMessage</name>
      <anchor>ad8738bb51f3d83cba610230f79bf1996</anchor>
      <arglist>(const bool dispatchSynchronously)</arglist>
    </member>
    <member kind="function">
      <name>ValueSource::handleAsyncUpdate</name>
      <anchor>adb417be60cfd5d5a522da7350e442ff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ValueSource::operator=</name>
      <anchor>ac6dcc70cc07d2514933f7727ac7a0f89</anchor>
      <arglist>(const ValueSource &amp;)</arglist>
    </member>
    <member kind="function">
      <name>ValueSource::valuesWithListeners</name>
      <anchor>ac6c18c9323cbda13d3e967c1b3c7b3cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ValueTree</name>
    <filename>classValueTree.html</filename>
    <member kind="function">
      <name>ValueTree</name>
      <anchor>a5bbc9ff40cefd92f2cf199df977142a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ValueTree</name>
      <anchor>a899e31a9613ebe907d2ba7e4519421b2</anchor>
      <arglist>(const String &amp;type)</arglist>
    </member>
    <member kind="function">
      <name>ValueTree</name>
      <anchor>a685fac19f67d8138645b6ccdb37f6809</anchor>
      <arglist>(const ValueTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~ValueTree</name>
      <anchor>a4e0b4721cb1ec7f79c59192df3b97bcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ValueTree</name>
      <anchor>a7d3c0bbb554eed9489c60f7fc43f2614</anchor>
      <arglist>(SharedObject *)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>abb0ec8b6af470fb80f5fb84d080cd26c</anchor>
      <arglist>(const ValueTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>abb2ac1361ec04341adbcdbcd5b971615</anchor>
      <arglist>(const ValueTree &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>ab347821ab9ff55146e0e69df785c7504</anchor>
      <arglist>(const ValueTree &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>afc7d5ea43143bafac840a8336c5301a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createCopy</name>
      <anchor>ad212f52a1dee540a97b256a57c881fed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getType</name>
      <anchor>aca975e0c28fb6ea015da2620fcd23e0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hasType</name>
      <anchor>af793a4b7f4613e278a8a130c4ad9b1b2</anchor>
      <arglist>(const String &amp;typeName) const </arglist>
    </member>
    <member kind="function">
      <name>getProperty</name>
      <anchor>a90a73deef64935d10c98ac220db14c95</anchor>
      <arglist>(const var::identifier &amp;name) const </arglist>
    </member>
    <member kind="function">
      <name>getProperty</name>
      <anchor>abdbb9d08f0c5dc82ca60f167adfd415a</anchor>
      <arglist>(const var::identifier &amp;name, const var &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>a32ac1acf0da93d38266040b2d5a45df1</anchor>
      <arglist>(const var::identifier &amp;name) const </arglist>
    </member>
    <member kind="function">
      <name>setProperty</name>
      <anchor>a2c7ae0e2e5c4a30c72f6db5ffbfb4bce</anchor>
      <arglist>(const var::identifier &amp;name, const var &amp;newValue, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <name>hasProperty</name>
      <anchor>aa8adbe127dc1d0534e1cbc4cc68b5951</anchor>
      <arglist>(const var::identifier &amp;name) const </arglist>
    </member>
    <member kind="function">
      <name>removeProperty</name>
      <anchor>aa2b3fb2cc4cf9d89be32e11b785469a4</anchor>
      <arglist>(const var::identifier &amp;name, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <name>removeAllProperties</name>
      <anchor>a2f750331b6a680f48751302be9313467</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <name>getNumProperties</name>
      <anchor>ac83190970c072ff95edaebd1ade65c93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getPropertyName</name>
      <anchor>a7cb5be29ff22932fbd735c04a157054f</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getPropertyAsValue</name>
      <anchor>a2cc8272169713dbebb6562aeec94bc03</anchor>
      <arglist>(const var::identifier &amp;name, UndoManager *undoManager) const </arglist>
    </member>
    <member kind="function">
      <name>getNumChildren</name>
      <anchor>ab4e869902306be8d60d056a4192383c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getChild</name>
      <anchor>ae3c7ef24e903b145e7885820898240cb</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getChildWithName</name>
      <anchor>a537e45e506358fc422356577f60a133a</anchor>
      <arglist>(const String &amp;type) const </arglist>
    </member>
    <member kind="function">
      <name>getChildWithProperty</name>
      <anchor>ae82b1db35ffdd6946244158d894d8e72</anchor>
      <arglist>(const var::identifier &amp;propertyName, const var &amp;propertyValue) const </arglist>
    </member>
    <member kind="function">
      <name>addChild</name>
      <anchor>a1a90959e95367cad2e6dbc8fd9c255a3</anchor>
      <arglist>(ValueTree child, int index, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <name>removeChild</name>
      <anchor>a52b15bdb0b4a04b81c04e7059bb926c4</anchor>
      <arglist>(const ValueTree &amp;child, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <name>removeChild</name>
      <anchor>a3bee3734652dec6bb1d5c351a1268fc0</anchor>
      <arglist>(int childIndex, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <name>removeAllChildren</name>
      <anchor>a91f8a28e02a782b0c95f855d0c29f0d9</anchor>
      <arglist>(UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <name>moveChild</name>
      <anchor>ab7d20bf6964bfc8c4a975543bca8ce53</anchor>
      <arglist>(int currentIndex, int newIndex, UndoManager *undoManager)</arglist>
    </member>
    <member kind="function">
      <name>isAChildOf</name>
      <anchor>af55de3861c98a6441e04891690784eff</anchor>
      <arglist>(const ValueTree &amp;possibleParent) const </arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>aed934c5a006a21f8edf4c1b7fe39bc48</anchor>
      <arglist>(const ValueTree &amp;child) const </arglist>
    </member>
    <member kind="function">
      <name>getParent</name>
      <anchor>a238a440b17653c87e1b0981515bc2bfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>createXml</name>
      <anchor>ad4b6941292f6ba19b1f4c7a91b82f957</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>fromXml</name>
      <anchor>a0d2f1bdd6313e53f256ed015986f837a</anchor>
      <arglist>(const XmlElement &amp;xml)</arglist>
    </member>
    <member kind="function">
      <name>writeToStream</name>
      <anchor>a4030330dde3b8e95e706336627d278c3</anchor>
      <arglist>(OutputStream &amp;output)</arglist>
    </member>
    <member kind="function">
      <name>readFromStream</name>
      <anchor>ad41a9e45b2d15699b4e27bed3b31109c</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <name>addListener</name>
      <anchor>a0a0d82471cb1119fc1a7b7018e3af394</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <name>removeListener</name>
      <anchor>ac8930aa94cb6e3714ef9e7449d08e5f6</anchor>
      <arglist>(Listener *listener)</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>afd355c7f3360c85eb34da8f092d8121e</anchor>
      <arglist>(ElementComparator &amp;comparator, const bool retainOrderOfEquivalentItems=false)</arglist>
    </member>
    <member kind="function">
      <name>invalid</name>
      <anchor>af49e8bf1c5072d0722dff9ef81b84f68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ValueTree::Listener</name>
    <filename>classValueTree_1_1Listener.html</filename>
    <member kind="function">
      <name>Listener::~Listener</name>
      <anchor>a46d1eba2ac9d4ce60a849696dd015606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Listener::valueTreePropertyChanged</name>
      <anchor>a9c7da17736ccf37002a1b51013127fe2</anchor>
      <arglist>(ValueTree &amp;treeWhosePropertyHasChanged, const var::identifier &amp;property)=0</arglist>
    </member>
    <member kind="function">
      <name>Listener::valueTreeChildrenChanged</name>
      <anchor>abc873f0ec39c43c864b825a3da18155a</anchor>
      <arglist>(ValueTree &amp;treeWhoseChildHasChanged)=0</arglist>
    </member>
    <member kind="function">
      <name>Listener::valueTreeParentChanged</name>
      <anchor>a597ebac03d1095a618843fdcc3573b21</anchor>
      <arglist>(ValueTree &amp;treeWhoseParentHasChanged)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>var</name>
    <filename>classvar.html</filename>
    <member kind="function">
      <name>MethodFunction</name>
      <anchor>a97719c009a2b23429bd0d88fbb2066ca</anchor>
      <arglist>)(const var *arguments, int numArguments)</arglist>
    </member>
    <member kind="function">
      <name>var</name>
      <anchor>af87bf2817f89678071ac7588a85a7f36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~var</name>
      <anchor>ac7d2944f98e9772ab540050ae22fe9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>var</name>
      <anchor>a6a974b86936dabdfbd84bf48651960a2</anchor>
      <arglist>(const var &amp;valueToCopy)</arglist>
    </member>
    <member kind="function">
      <name>var</name>
      <anchor>ad59e869e1c36bfd151ab04085bc72e5c</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <name>var</name>
      <anchor>a5af1422a0f4d1625200e4fc647fc7d27</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <name>var</name>
      <anchor>ae3c4e3da701ed8b966ace0e5dee3a030</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <name>var</name>
      <anchor>ac8a4731c2eeebe5db6f1cc5c84dc831b</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <name>var</name>
      <anchor>a3f2d15dc7994150692a84d56cf7bdd82</anchor>
      <arglist>(const juce_wchar *value)</arglist>
    </member>
    <member kind="function">
      <name>var</name>
      <anchor>adac6da6937fb8b1c4d7e4834eba80a49</anchor>
      <arglist>(const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>var</name>
      <anchor>ad0e48e34a8ed690c845aa8e240d6c1e3</anchor>
      <arglist>(DynamicObject *object)</arglist>
    </member>
    <member kind="function">
      <name>var</name>
      <anchor>af4deea52952394d063f7209be7fe05fa</anchor>
      <arglist>(MethodFunction method)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a3517a5e573ec0fef50f8aebc6c1c7253</anchor>
      <arglist>(const var &amp;valueToCopy)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ae8b1716b035385c36097f52749bff987</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>abe4f0082fc266d3895547d7d07a46c31</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ae55dc5d3e560cfcb8538e0a675c2e799</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a4d77a47fe23cfa65b49a3363ec74810d</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ad1f7b60a95f89cfde88a18110e7bcddd</anchor>
      <arglist>(const juce_wchar *value)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a95e8f7253dae7ea355c671da8e825951</anchor>
      <arglist>(const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a1fe11df0332714a8af87c2059a70a20d</anchor>
      <arglist>(DynamicObject *object)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ac47c3c30ed75f1dc5f1e504ab017019a</anchor>
      <arglist>(MethodFunction method)</arglist>
    </member>
    <member kind="function">
      <name>swapWith</name>
      <anchor>af8655f2cd455f0e907ae50e398837662</anchor>
      <arglist>(var &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator int</name>
      <anchor>afad6e2a2eaceb5936abe57f17fa24a37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator bool</name>
      <anchor>a2fd06de41a9f9f60a0432fbd7e868c74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator float</name>
      <anchor>a4b456be7ce199cf0b7834eee1ffbc22d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator double</name>
      <anchor>adff63d0b587314b85e7e9fb45c7d10d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator const String</name>
      <anchor>af0049a4e58bb0fd00d1e27b0f837f0b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>ad0e32396b52bac16df57f9d2c90c13c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getObject</name>
      <anchor>ac37ffb716157e3815533635cc0304531</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isVoid</name>
      <anchor>a34560072109eccf735ff4091a8eea722</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isInt</name>
      <anchor>a1237bb6367ece82121295da2ec70be02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isBool</name>
      <anchor>acd3de56a1698567b3246383002cd3bc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isDouble</name>
      <anchor>a1631e25a101f99aeca00f45bffa9cd87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isString</name>
      <anchor>ab31c2d58983a97a31b0440a23a21ce64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isObject</name>
      <anchor>aa1630374e054473b8b1939f77dd178f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isMethod</name>
      <anchor>ae1fbb34b1c0bfb904593d78c76b2a02e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>writeToStream</name>
      <anchor>a0872b4cd7956230f5d8d3467be21dd5c</anchor>
      <arglist>(OutputStream &amp;output) const </arglist>
    </member>
    <member kind="function">
      <name>readFromStream</name>
      <anchor>aeb6631245e0fdb6ea8143ed056f71895</anchor>
      <arglist>(InputStream &amp;input)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>a5c3b0f158c34acc72c7c70b925e26054</anchor>
      <arglist>(const identifier &amp;propertyName) const </arglist>
    </member>
    <member kind="function">
      <name>call</name>
      <anchor>ac89d5cde996828c611041244ea5a04ff</anchor>
      <arglist>(const identifier &amp;method) const </arglist>
    </member>
    <member kind="function">
      <name>call</name>
      <anchor>a0ec80f4f7ded13dc316909defb28dea9</anchor>
      <arglist>(const identifier &amp;method, const var &amp;arg1) const </arglist>
    </member>
    <member kind="function">
      <name>call</name>
      <anchor>a2ba907f4f2a2d1f172c3448c8da26bc3</anchor>
      <arglist>(const identifier &amp;method, const var &amp;arg1, const var &amp;arg2) const </arglist>
    </member>
    <member kind="function">
      <name>call</name>
      <anchor>a906111b64ce79b6eb64451cd94290081</anchor>
      <arglist>(const identifier &amp;method, const var &amp;arg1, const var &amp;arg2, const var &amp;arg3)</arglist>
    </member>
    <member kind="function">
      <name>call</name>
      <anchor>a388e4a88c044f67bca7db166c5083c18</anchor>
      <arglist>(const identifier &amp;method, const var &amp;arg1, const var &amp;arg2, const var &amp;arg3, const var &amp;arg4) const </arglist>
    </member>
    <member kind="function">
      <name>call</name>
      <anchor>a5c197683b79b3169edd70b34b1044063</anchor>
      <arglist>(const identifier &amp;method, const var &amp;arg1, const var &amp;arg2, const var &amp;arg3, const var &amp;arg4, const var &amp;arg5) const </arglist>
    </member>
    <member kind="function">
      <name>invoke</name>
      <anchor>a430034efe68a3834d73a7ccb0b5ae093</anchor>
      <arglist>(const identifier &amp;method, const var *arguments, int numArguments) const </arglist>
    </member>
    <member kind="function">
      <name>invoke</name>
      <anchor>aafa39241585bcb2fc8bfb15770083b7f</anchor>
      <arglist>(const var &amp;targetObject, const var *arguments, int numArguments) const </arglist>
    </member>
    <member kind="function">
      <name>equals</name>
      <anchor>ac219f4ba9a0b8c4f3d8bc37b12fe2e4f</anchor>
      <arglist>(const var &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>null</name>
      <anchor>ae1550d37bca7b33d4af3b4ebf90567ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>var::identifier</name>
    <filename>classvar_1_1identifier.html</filename>
    <member kind="function">
      <name>identifier::identifier</name>
      <anchor>ad6faf6b44d26d5e3b76b19a3bb723d2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>identifier::identifier</name>
      <anchor>a29ebc9f39f276bfea3b4230083917445</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <name>identifier::identifier</name>
      <anchor>ad07991b87d362546f45407142ee5e3c2</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <name>identifier::~identifier</name>
      <anchor>a85dcff9ff7aa6c084f5be84c85f37d33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>identifier::operator==</name>
      <anchor>a1b79599daf46626468a0bd8a671c3ae8</anchor>
      <arglist>(const identifier &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>identifier::name</name>
      <anchor>a1682cf94b320f07d9888083926878e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>identifier::hashCode</name>
      <anchor>a49f7e95814d2f94b3c753ad5810f2551</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Viewport</name>
    <base>Component</base>
    <base>ComponentListener</base>
    <base>ScrollBarListener</base>
    <filename>classViewport.html</filename>
    <member kind="function">
      <name>Viewport</name>
      <anchor>aff5062b9f02046b98dfa7f6e523e7fce</anchor>
      <arglist>(const String &amp;componentName=String::empty)</arglist>
    </member>
    <member kind="function">
      <name>~Viewport</name>
      <anchor>a1e18a1ff4a52be33ef63d25034561850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setViewedComponent</name>
      <anchor>a01b8a21141c2fa795828746e52e5cca8</anchor>
      <arglist>(Component *newViewedComponent)</arglist>
    </member>
    <member kind="function">
      <name>getViewedComponent</name>
      <anchor>a3795e6f710e2b8bd873a7620ffbd6abf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setViewPosition</name>
      <anchor>a138c2e06be0437fbeab40542c00bbbe1</anchor>
      <arglist>(int xPixelsOffset, int yPixelsOffset)</arglist>
    </member>
    <member kind="function">
      <name>setViewPositionProportionately</name>
      <anchor>a69fd47f38b5a918d38dbd545e60a904c</anchor>
      <arglist>(double proportionX, double proportionY)</arglist>
    </member>
    <member kind="function">
      <name>autoScroll</name>
      <anchor>a9606c7a986679ea21552075a3f6b90f3</anchor>
      <arglist>(int mouseX, int mouseY, int distanceFromEdge, int maximumSpeed)</arglist>
    </member>
    <member kind="function">
      <name>getViewPositionX</name>
      <anchor>a1d0e45f4fed98875ef3f5081dd8985e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getViewPositionY</name>
      <anchor>a3a073320e7bb9da8d17915d82758b0b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getViewWidth</name>
      <anchor>a94cc063ecc86136967959626e1ce6638</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getViewHeight</name>
      <anchor>afdd46553d5374a95188120732da12b35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMaximumVisibleWidth</name>
      <anchor>a046d2d7ca8993a38e0dcaac3a77aa017</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getMaximumVisibleHeight</name>
      <anchor>a6bc59733a1a9dc1ad69a6cdc670e2725</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>visibleAreaChanged</name>
      <anchor>a1925e51c934d52d35b64331d4c348a69</anchor>
      <arglist>(int visibleX, int visibleY, int visibleW, int visibleH)</arglist>
    </member>
    <member kind="function">
      <name>setScrollBarsShown</name>
      <anchor>a814864377939d99f76c121d182275f34</anchor>
      <arglist>(bool showVerticalScrollbarIfNeeded, bool showHorizontalScrollbarIfNeeded)</arglist>
    </member>
    <member kind="function">
      <name>isVerticalScrollBarShown</name>
      <anchor>a9972c2b9054de9f8e28ede173ac91942</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>isHorizontalScrollBarShown</name>
      <anchor>ada4ffb5a1c41695e2ab52505d63ae46f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setScrollBarThickness</name>
      <anchor>a865ce481cedc67a4553d65f8e787acbb</anchor>
      <arglist>(int thickness)</arglist>
    </member>
    <member kind="function">
      <name>getScrollBarThickness</name>
      <anchor>a3095d6e4d6fc17aba55ad27d7b3a0914</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setSingleStepSizes</name>
      <anchor>a4a0510b81764f1d6899ad7be124bb56f</anchor>
      <arglist>(int stepX, int stepY)</arglist>
    </member>
    <member kind="function">
      <name>setScrollBarButtonVisibility</name>
      <anchor>a25e8d38748090e01d092b095feca5851</anchor>
      <arglist>(bool buttonsVisible)</arglist>
    </member>
    <member kind="function">
      <name>getVerticalScrollBar</name>
      <anchor>aa8a7556f94e93287608aa7aa85f67c66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getHorizontalScrollBar</name>
      <anchor>ad03b4a47fc64a4251ed3047226923c13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a2c7ed7b31b7289631b9f8853eee581bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scrollBarMoved</name>
      <anchor>a0f2d79464178fb6d5c67a0dbd0af1f1c</anchor>
      <arglist>(ScrollBar *scrollBarThatHasMoved, double newRangeStart)</arglist>
    </member>
    <member kind="function">
      <name>mouseWheelMove</name>
      <anchor>a04caec3d6dd5e39f42c3d9b37f214ef6</anchor>
      <arglist>(const MouseEvent &amp;e, float wheelIncrementX, float wheelIncrementY)</arglist>
    </member>
    <member kind="function">
      <name>keyPressed</name>
      <anchor>ae34ae3541b6f66674dee8c3cc526349b</anchor>
      <arglist>(const KeyPress &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>componentMovedOrResized</name>
      <anchor>a4449de31f2c3acdcdf7fcf3e179c108f</anchor>
      <arglist>(Component &amp;component, bool wasMoved, bool wasResized)</arglist>
    </member>
    <member kind="function">
      <name>useMouseWheelMoveIfNeeded</name>
      <anchor>a90089a85c7bc9153e0e67f41e5be38f3</anchor>
      <arglist>(const MouseEvent &amp;e, float wheelIncrementX, float wheelIncrementY)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WaitableEvent</name>
    <filename>classWaitableEvent.html</filename>
    <member kind="function">
      <name>WaitableEvent</name>
      <anchor>a202c17d53c9fe004e058804f283a5d8c</anchor>
      <arglist>(bool manualReset=false)</arglist>
    </member>
    <member kind="function">
      <name>~WaitableEvent</name>
      <anchor>a675ac5b8ae58b439c41afd8d34d069e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>wait</name>
      <anchor>af3c0ad1049bde2b540682f3df0af6b89</anchor>
      <arglist>(int timeOutMilliseconds=&amp;#45;1) const </arglist>
    </member>
    <member kind="function">
      <name>signal</name>
      <anchor>a991bfe576fcfa7bd796078f436dc10a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>ad52fb300f04881e92be8c2ef5b940b67</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WaitableEventImpl</name>
    <filename>classWaitableEventImpl.html</filename>
    <member kind="function">
      <name>WaitableEventImpl</name>
      <anchor>a00a18a838df4b18921dc991c930f477e</anchor>
      <arglist>(const bool manualReset_)</arglist>
    </member>
    <member kind="function">
      <name>~WaitableEventImpl</name>
      <anchor>a3d3bd0f743ff8a2e5f09d33843fe2e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>wait</name>
      <anchor>ad7c4755a5a0d3d847ce1f537b5fc43f6</anchor>
      <arglist>(const int timeOutMillisecs)</arglist>
    </member>
    <member kind="function">
      <name>signal</name>
      <anchor>aff8ab7ba5102902111974cd3e83b6d7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>acfebd7dbb77f72c09676c437dec4a2a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WavAudioFormat</name>
    <base>AudioFormat</base>
    <filename>classWavAudioFormat.html</filename>
    <member kind="function">
      <name>WavAudioFormat</name>
      <anchor>a79547799ef5300f2adf2390d0cb74982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~WavAudioFormat</name>
      <anchor>a95e94be65145788e4436237e41c5454f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createBWAVMetadata</name>
      <anchor>ac4c8cf8fc77e47e88e6fcb457b563382</anchor>
      <arglist>(const String &amp;description, const String &amp;originator, const String &amp;originatorRef, const Time &amp;dateAndTime, const int64 timeReferenceSamples, const String &amp;codingHistory)</arglist>
    </member>
    <member kind="function">
      <name>getPossibleSampleRates</name>
      <anchor>adf7373a44aa1fbb94fa4e99fa400b854</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPossibleBitDepths</name>
      <anchor>a4adf07c31e0e99c0a7863eff35213251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canDoStereo</name>
      <anchor>a1e9e0354306afef5bc52496a586f6b1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canDoMono</name>
      <anchor>ade3a903f7aa8e3032d004939ef29638e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createReaderFor</name>
      <anchor>a2dd38ef5db2ad9011eba6b4e1c60ee3d</anchor>
      <arglist>(InputStream *sourceStream, const bool deleteStreamIfOpeningFails)</arglist>
    </member>
    <member kind="function">
      <name>createWriterFor</name>
      <anchor>a52377fee2fd2b72aff558a9472bb4187</anchor>
      <arglist>(OutputStream *streamToWriteTo, double sampleRateToUse, unsigned int numberOfChannels, int bitsPerSample, const StringPairArray &amp;metadataValues, int qualityOptionIndex)</arglist>
    </member>
    <member kind="function">
      <name>replaceMetadataInFile</name>
      <anchor>a1f6a333b084402d486af76d518971160</anchor>
      <arglist>(const File &amp;wavFile, const StringPairArray &amp;newMetadata)</arglist>
    </member>
    <member kind="function">
      <name>bwavDescription</name>
      <anchor>a1b75b002a3b479b8f4b992a5e21f7076</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bwavOriginator</name>
      <anchor>aeb655b312ca07a2c89d6f1c86fe69455</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bwavOriginatorRef</name>
      <anchor>a678c3b819d78ea687ddba590a4e73891</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bwavOriginationDate</name>
      <anchor>a536849856a3e84afe84dded0feb921c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bwavOriginationTime</name>
      <anchor>a6ba890f1df411a643efe13d3b02ff130</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bwavTimeReference</name>
      <anchor>a6722c8d061d70bbd7a843e4ac213d588</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bwavCodingHistory</name>
      <anchor>a5e478da650f2e1fdb3f452e9e3c2e94f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WebBrowserComponent</name>
    <base>Component</base>
    <filename>classWebBrowserComponent.html</filename>
    <member kind="function">
      <name>WebBrowserComponent</name>
      <anchor>ad408275ac5ae9ec1e2f71d73fb0105ef</anchor>
      <arglist>(bool unloadPageWhenBrowserIsHidden=true)</arglist>
    </member>
    <member kind="function">
      <name>~WebBrowserComponent</name>
      <anchor>a546611bb84448a775d7a519969d45ae7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>goToURL</name>
      <anchor>af907eb0bedfbab52227eb1b4411b9318</anchor>
      <arglist>(const String &amp;url, const StringArray *headers=0, const MemoryBlock *postData=0)</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>a5b95c6fcefc4448c9083b90983ce5729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>goBack</name>
      <anchor>aa9d180ebeaadd482e1532aefc2298954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>goForward</name>
      <anchor>acf6bdaec26fafd31aae196a4eff12a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>ac0bd69ac52a95ae941b49308327de3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pageAboutToLoad</name>
      <anchor>afff0d888a7a77a732f0ac1ca834bbd95</anchor>
      <arglist>(const String &amp;newURL)</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>a64d081cb62aa60f8b1ab0cec0416d83f</anchor>
      <arglist>(Graphics &amp;g)</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>a297314b29ed2ac3618ce93dc094d2c77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parentHierarchyChanged</name>
      <anchor>a5716503447ae0d1c3ef0d1be9054eaa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>visibilityChanged</name>
      <anchor>a9948c88c29fe5685e1037769b2631d7a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WildcardFileFilter</name>
    <base>FileFilter</base>
    <filename>classWildcardFileFilter.html</filename>
    <member kind="function">
      <name>WildcardFileFilter</name>
      <anchor>af1f0c501f518c2dd803e77661fb42b9d</anchor>
      <arglist>(const String &amp;fileWildcardPatterns, const String &amp;directoryWildcardPatterns, const String &amp;description)</arglist>
    </member>
    <member kind="function">
      <name>~WildcardFileFilter</name>
      <anchor>a64858d78dbf60590b6144856c491c053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isFileSuitable</name>
      <anchor>a0c50cf8e1a4a81bd29b33247a6c63603</anchor>
      <arglist>(const File &amp;file) const </arglist>
    </member>
    <member kind="function">
      <name>isDirectorySuitable</name>
      <anchor>af8992269366f6ad0203139556ec9a683</anchor>
      <arglist>(const File &amp;file) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlDocument</name>
    <filename>classXmlDocument.html</filename>
    <member kind="function">
      <name>XmlDocument</name>
      <anchor>a87ad794c62c8ee9ac78961af99b2f30d</anchor>
      <arglist>(const String &amp;documentText)</arglist>
    </member>
    <member kind="function">
      <name>XmlDocument</name>
      <anchor>a0bb84c6d5a591e3ab53199b081766901</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <name>~XmlDocument</name>
      <anchor>ab18742228f580a5e4ec87e4b39c8a68c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getDocumentElement</name>
      <anchor>a39ff35e1ed7033dd0d844179cde2647a</anchor>
      <arglist>(const bool onlyReadOuterDocumentElement=false)</arglist>
    </member>
    <member kind="function">
      <name>getLastParseError</name>
      <anchor>a965996c26acad187ed88c9101d9e26bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setInputSource</name>
      <anchor>ac9d382a5e4f749800078b44a12b7b315</anchor>
      <arglist>(InputSource *const newSource)</arglist>
    </member>
    <member kind="function">
      <name>setEmptyTextElementsIgnored</name>
      <anchor>a2f6bd0087a66777eb81372436fbb13fb</anchor>
      <arglist>(const bool shouldBeIgnored)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlElement</name>
    <filename>classXmlElement.html</filename>
    <member kind="function">
      <name>XmlElement</name>
      <anchor>a3a8f5f328633c9ec5f0348651b0d2c23</anchor>
      <arglist>(const String &amp;tagName)</arglist>
    </member>
    <member kind="function">
      <name>XmlElement</name>
      <anchor>af7194adb8ea1694ab8f5a9810ae54920</anchor>
      <arglist>(const XmlElement &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~XmlElement</name>
      <anchor>a1e67b1dfcd561d1d602988d100d80d9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a61f3a94eb51ce136384eda904ae10033</anchor>
      <arglist>(const XmlElement &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>isEquivalentTo</name>
      <anchor>ac2c70bf9f5fbdc5e34bff658cd8288c1</anchor>
      <arglist>(const XmlElement *other, bool ignoreOrderOfAttributes) const </arglist>
    </member>
    <member kind="function">
      <name>createDocument</name>
      <anchor>a56675dbdae575c1a5ba70d0be48ca183</anchor>
      <arglist>(const String &amp;dtdToUse, bool allOnOneLine=false, bool includeXmlHeader=true, const String &amp;encodingType=&quot;UTF&amp;#45;8&quot;, int lineWrapLength=60) const </arglist>
    </member>
    <member kind="function">
      <name>writeToStream</name>
      <anchor>a549217f58a801ecc952520a40eb182d8</anchor>
      <arglist>(OutputStream &amp;output, const String &amp;dtdToUse, bool allOnOneLine=false, bool includeXmlHeader=true, const String &amp;encodingType=&quot;UTF&amp;#45;8&quot;, int lineWrapLength=60) const </arglist>
    </member>
    <member kind="function">
      <name>writeToFile</name>
      <anchor>ae5f6e3e6cdc4934f582f362c59730513</anchor>
      <arglist>(const File &amp;destinationFile, const String &amp;dtdToUse, const String &amp;encodingType=&quot;UTF&amp;#45;8&quot;, int lineWrapLength=60) const </arglist>
    </member>
    <member kind="function">
      <name>getTagName</name>
      <anchor>a3882bb24a1914822c51f11c2e8c3a075</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>hasTagName</name>
      <anchor>a23f7935d04f06f9f3056faf5aecf884c</anchor>
      <arglist>(const String &amp;possibleTagName) const </arglist>
    </member>
    <member kind="function">
      <name>getNumAttributes</name>
      <anchor>ab3bdfe6c4f6c9e538a59c405712770e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getAttributeName</name>
      <anchor>ac385390483db4a307c74e897454defcb</anchor>
      <arglist>(int attributeIndex) const </arglist>
    </member>
    <member kind="function">
      <name>getAttributeValue</name>
      <anchor>a7a6020a74939966dbbf685327bc7878a</anchor>
      <arglist>(int attributeIndex) const </arglist>
    </member>
    <member kind="function">
      <name>hasAttribute</name>
      <anchor>ac9e1dcd8b3689986f97a002548e83c25</anchor>
      <arglist>(const String &amp;attributeName) const </arglist>
    </member>
    <member kind="function">
      <name>getStringAttribute</name>
      <anchor>ae8f66aadac77f5507ad9c7d038caaef9</anchor>
      <arglist>(const String &amp;attributeName) const </arglist>
    </member>
    <member kind="function">
      <name>getStringAttribute</name>
      <anchor>a53ffa4654b3e5b4158e8eec280ac918f</anchor>
      <arglist>(const String &amp;attributeName, const String &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <name>compareAttribute</name>
      <anchor>aa28a098af1aec6fdfe05bcee401beb26</anchor>
      <arglist>(const String &amp;attributeName, const String &amp;stringToCompareAgainst, bool ignoreCase=false) const </arglist>
    </member>
    <member kind="function">
      <name>getIntAttribute</name>
      <anchor>a111f94851691d888557ca7f8ccfebc8d</anchor>
      <arglist>(const String &amp;attributeName, int defaultReturnValue=0) const </arglist>
    </member>
    <member kind="function">
      <name>getDoubleAttribute</name>
      <anchor>a07684d2d8b4de43b98a94fb42c302d29</anchor>
      <arglist>(const String &amp;attributeName, double defaultReturnValue=0.0) const </arglist>
    </member>
    <member kind="function">
      <name>getBoolAttribute</name>
      <anchor>a43db8641bb970839aeb4e9ba2f7fbb80</anchor>
      <arglist>(const String &amp;attributeName, bool defaultReturnValue=false) const </arglist>
    </member>
    <member kind="function">
      <name>setAttribute</name>
      <anchor>aecfa72b98bb4a7d6d01abc9edbbdef28</anchor>
      <arglist>(const String &amp;attributeName, const String &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <name>setAttribute</name>
      <anchor>ac69fa6e5a84515ec871eed3488a79120</anchor>
      <arglist>(const String &amp;attributeName, int newValue)</arglist>
    </member>
    <member kind="function">
      <name>setAttribute</name>
      <anchor>a9f58392747df30f142a5961d63f780e8</anchor>
      <arglist>(const String &amp;attributeName, double newValue)</arglist>
    </member>
    <member kind="function">
      <name>removeAttribute</name>
      <anchor>a96d4bf129761dc26125cfe431f598ea7</anchor>
      <arglist>(const String &amp;attributeName)</arglist>
    </member>
    <member kind="function">
      <name>removeAllAttributes</name>
      <anchor>a47efc7b5a42c42f631a6c0d615e6e651</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFirstChildElement</name>
      <anchor>ac71a97e718e6e59382b92d3e66e7ad40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNextElement</name>
      <anchor>a8323ef66afcecc4104d9928a37c8562b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getNextElementWithTagName</name>
      <anchor>a76436b250027e5a2e1b5c68a82e8b7b4</anchor>
      <arglist>(const String &amp;requiredTagName) const </arglist>
    </member>
    <member kind="function">
      <name>getNumChildElements</name>
      <anchor>ac0256981b38b65f82c6e30191960667d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getChildElement</name>
      <anchor>a8b2ea59cc2256806a9976422f6298e5d</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getChildByName</name>
      <anchor>a455d65ad6522e9492f7b6148f33c1b85</anchor>
      <arglist>(const String &amp;tagNameToLookFor) const </arglist>
    </member>
    <member kind="function">
      <name>addChildElement</name>
      <anchor>a500bcb1cf7f2743bccf32b2c6d0f4ef9</anchor>
      <arglist>(XmlElement *const newChildElement)</arglist>
    </member>
    <member kind="function">
      <name>insertChildElement</name>
      <anchor>a9ddc846ada1a580bb6492c782119ab81</anchor>
      <arglist>(XmlElement *newChildNode, int indexToInsertAt)</arglist>
    </member>
    <member kind="function">
      <name>createNewChildElement</name>
      <anchor>a82ce9cbd54e2b559a2c78a3ee9165ac3</anchor>
      <arglist>(const String &amp;tagName)</arglist>
    </member>
    <member kind="function">
      <name>replaceChildElement</name>
      <anchor>a2c37bff262f113aecb878b2059977f5c</anchor>
      <arglist>(XmlElement *currentChildElement, XmlElement *newChildNode)</arglist>
    </member>
    <member kind="function">
      <name>removeChildElement</name>
      <anchor>adbd4f956cbb04d533438d7874ff88f15</anchor>
      <arglist>(XmlElement *childToRemove, bool shouldDeleteTheChild)</arglist>
    </member>
    <member kind="function">
      <name>deleteAllChildElements</name>
      <anchor>a78880455017450ce7ca6094602e892f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deleteAllChildElementsWithTagName</name>
      <anchor>a963925aa16d789253325914bf925d77b</anchor>
      <arglist>(const String &amp;tagName)</arglist>
    </member>
    <member kind="function">
      <name>containsChildElement</name>
      <anchor>a41e7e4783d9f3a82291bcf6333e8c6e8</anchor>
      <arglist>(const XmlElement *const possibleChild) const </arglist>
    </member>
    <member kind="function">
      <name>findParentElementOf</name>
      <anchor>a352696c1fcdc1acd41f7d302aae8176c</anchor>
      <arglist>(const XmlElement *elementToLookFor)</arglist>
    </member>
    <member kind="function">
      <name>sortChildElements</name>
      <anchor>a01c63a5a347827f4a809712b7abf9c9a</anchor>
      <arglist>(ElementComparator &amp;comparator, const bool retainOrderOfEquivalentItems=false)</arglist>
    </member>
    <member kind="function">
      <name>isTextElement</name>
      <anchor>a020719575adeefb86060da87d35cd75c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getText</name>
      <anchor>a0689ce01d5f6e36ad2abf140b4d4da68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>ad0c14d8e9d0378e8a468e3d28067dde9</anchor>
      <arglist>(const String &amp;newText)</arglist>
    </member>
    <member kind="function">
      <name>getAllSubText</name>
      <anchor>a37066fd50c8477d622dd2433589de614</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getChildElementAllSubText</name>
      <anchor>a1d4af4aab54d3a543658853d9084b68a</anchor>
      <arglist>(const String &amp;childTagName, const String &amp;defaultReturnValue) const </arglist>
    </member>
    <member kind="function">
      <name>addTextElement</name>
      <anchor>aea61ae26c5c1e71f9119dd9dffac4f0d</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <name>deleteAllTextElements</name>
      <anchor>a8dd6e7eaecbe60381cfd852cd670b89d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createTextElement</name>
      <anchor>ab768aee16a1cf791bd6c61cc2abbe01b</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZipFile</name>
    <filename>classZipFile.html</filename>
    <member kind="function">
      <name>ZipFile</name>
      <anchor>a8b251067cc8a29f88eeaf02dfe0e3658</anchor>
      <arglist>(InputStream *inputStream, bool deleteStreamWhenDestroyed)</arglist>
    </member>
    <member kind="function">
      <name>ZipFile</name>
      <anchor>aed7c61ad49b425119915544015dab3e8</anchor>
      <arglist>(const File &amp;file)</arglist>
    </member>
    <member kind="function">
      <name>ZipFile</name>
      <anchor>aaaa0dfb96daf669363ef206b48cf889b</anchor>
      <arglist>(InputSource *inputSource)</arglist>
    </member>
    <member kind="function">
      <name>~ZipFile</name>
      <anchor>a748c38101270b6e3856738f8ca02c357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getNumEntries</name>
      <anchor>ad8a323ecbdf6ce0aea9cd47aa99be89b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>getEntry</name>
      <anchor>a8c6bea7642f7cb527f330df5744df182</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <name>getIndexOfFileName</name>
      <anchor>af466dbf1bee062f5cbd99c0697e8581d</anchor>
      <arglist>(const String &amp;fileName) const </arglist>
    </member>
    <member kind="function">
      <name>getEntry</name>
      <anchor>a196e395de1efd7eff3d440bba9014520</anchor>
      <arglist>(const String &amp;fileName) const </arglist>
    </member>
    <member kind="function">
      <name>sortEntriesByFilename</name>
      <anchor>af33762dfb0bbe8ac0973d239eba4a376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createStreamForEntry</name>
      <anchor>a5cf25194d5a64e2bd0f4cb7b06262fc3</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>uncompressTo</name>
      <anchor>abf09cde8b6da3d820d2ca5284f4c40e0</anchor>
      <arglist>(const File &amp;targetDirectory, bool shouldOverwriteFiles=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ActionBroadcaster.h</name>
    <filename>juce__ActionBroadcaster_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ActionListener.h</name>
    <filename>juce__ActionListener_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ActionListenerList.h</name>
    <filename>juce__ActionListenerList_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ActiveXControlComponent.h</name>
    <filename>juce__ActiveXControlComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AffineTransform.h</name>
    <filename>juce__AffineTransform_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AiffAudioFormat.h</name>
    <filename>juce__AiffAudioFormat_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AlertWindow.h</name>
    <filename>juce__AlertWindow_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_app_includes.h</name>
    <filename>juce__app__includes_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Application.h</name>
    <filename>juce__Application_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationCommandID.h</name>
    <filename>juce__ApplicationCommandID_8h.html</filename>
    <member kind="function">
      <name>CommandID</name>
      <anchor>afd69b5d28aad07b587b693925e09308b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationCommandInfo.h</name>
    <filename>juce__ApplicationCommandInfo_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationCommandManager.h</name>
    <filename>juce__ApplicationCommandManager_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationCommandTarget.h</name>
    <filename>juce__ApplicationCommandTarget_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ApplicationProperties.h</name>
    <filename>juce__ApplicationProperties_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Array.h</name>
    <filename>juce__Array_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ArrayAllocationBase.h</name>
    <filename>juce__ArrayAllocationBase_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ArrowButton.h</name>
    <filename>juce__ArrowButton_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AsyncUpdater.h</name>
    <filename>juce__AsyncUpdater_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Atomic.h</name>
    <filename>juce__Atomic_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioCDBurner.h</name>
    <filename>juce__AudioCDBurner_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioCDReader.h</name>
    <filename>juce__AudioCDReader_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioDataConverters.h</name>
    <filename>juce__AudioDataConverters_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioDeviceManager.h</name>
    <filename>juce__AudioDeviceManager_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioDeviceSelectorComponent.h</name>
    <filename>juce__AudioDeviceSelectorComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormat.h</name>
    <filename>juce__AudioFormat_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormatManager.h</name>
    <filename>juce__AudioFormatManager_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormatReader.h</name>
    <filename>juce__AudioFormatReader_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormatReaderSource.h</name>
    <filename>juce__AudioFormatReaderSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioFormatWriter.h</name>
    <filename>juce__AudioFormatWriter_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioIODevice.h</name>
    <filename>juce__AudioIODevice_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioIODeviceType.h</name>
    <filename>juce__AudioIODeviceType_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioPlayHead.h</name>
    <filename>juce__AudioPlayHead_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioPluginFormat.h</name>
    <filename>juce__AudioPluginFormat_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioPluginFormatManager.h</name>
    <filename>juce__AudioPluginFormatManager_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioPluginInstance.h</name>
    <filename>juce__AudioPluginInstance_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessor.h</name>
    <filename>juce__AudioProcessor_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorEditor.h</name>
    <filename>juce__AudioProcessorEditor_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorGraph.h</name>
    <filename>juce__AudioProcessorGraph_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorListener.h</name>
    <filename>juce__AudioProcessorListener_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioProcessorPlayer.h</name>
    <filename>juce__AudioProcessorPlayer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioSampleBuffer.h</name>
    <filename>juce__AudioSampleBuffer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioSource.h</name>
    <filename>juce__AudioSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioSourcePlayer.h</name>
    <filename>juce__AudioSourcePlayer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioSubsectionReader.h</name>
    <filename>juce__AudioSubsectionReader_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioThumbnail.h</name>
    <filename>juce__AudioThumbnail_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioThumbnailCache.h</name>
    <filename>juce__AudioThumbnailCache_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioTransportSource.h</name>
    <filename>juce__AudioTransportSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_AudioUnitPluginFormat.h</name>
    <filename>juce__AudioUnitPluginFormat_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_BitArray.h</name>
    <filename>juce__BitArray_8h.html</filename>
    <member kind="function">
      <name>BitArray</name>
      <anchor>af7bf1b2fb9d002127fb81af030d00cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>aad1d3fbf4eac3f0aaf3ca7d741e6faad</anchor>
      <arglist>(OutputStream &amp;stream, const BigInteger &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_BlowFish.h</name>
    <filename>juce__BlowFish_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_BooleanPropertyComponent.h</name>
    <filename>juce__BooleanPropertyComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_BorderSize.h</name>
    <filename>juce__BorderSize_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_BubbleComponent.h</name>
    <filename>juce__BubbleComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_BubbleMessageComponent.h</name>
    <filename>juce__BubbleMessageComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_BufferedInputStream.h</name>
    <filename>juce__BufferedInputStream_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_BufferingAudioSource.h</name>
    <filename>juce__BufferingAudioSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Button.h</name>
    <filename>juce__Button_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ButtonPropertyComponent.h</name>
    <filename>juce__ButtonPropertyComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ByteOrder.h</name>
    <filename>juce__ByteOrder_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_CallbackMessage.h</name>
    <filename>juce__CallbackMessage_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_CameraDevice.h</name>
    <filename>juce__CameraDevice_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ChangeBroadcaster.h</name>
    <filename>juce__ChangeBroadcaster_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ChangeListener.h</name>
    <filename>juce__ChangeListener_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ChangeListenerList.h</name>
    <filename>juce__ChangeListenerList_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ChannelRemappingAudioSource.h</name>
    <filename>juce__ChannelRemappingAudioSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_CharacterFunctions.h</name>
    <filename>juce__CharacterFunctions_8h.html</filename>
    <member kind="function">
      <name>JUCE_T</name>
      <anchor>a3e89667edc0ad368c55bf35494ddbff8</anchor>
      <arglist>(stringLiteral)</arglist>
    </member>
    <member kind="function">
      <name>T</name>
      <anchor>a6cd5681fcb4996432b933eee3779619e</anchor>
      <arglist>(stringLiteral)</arglist>
    </member>
    <member kind="function">
      <name>tchar</name>
      <anchor>a291f2a977a0462ea98a4dfd41fadd73a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ChoicePropertyComponent.h</name>
    <filename>juce__ChoicePropertyComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_CodeDocument.h</name>
    <filename>juce__CodeDocument_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_CodeEditorComponent.h</name>
    <filename>juce__CodeEditorComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_CodeTokeniser.h</name>
    <filename>juce__CodeTokeniser_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Colour.h</name>
    <filename>juce__Colour_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ColourGradient.h</name>
    <filename>juce__ColourGradient_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Colours.h</name>
    <filename>juce__Colours_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ColourSelector.h</name>
    <filename>juce__ColourSelector_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ComboBox.h</name>
    <filename>juce__ComboBox_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Component.h</name>
    <filename>juce__Component_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ComponentAnimator.h</name>
    <filename>juce__ComponentAnimator_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ComponentBoundsConstrainer.h</name>
    <filename>juce__ComponentBoundsConstrainer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ComponentDragger.h</name>
    <filename>juce__ComponentDragger_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ComponentListener.h</name>
    <filename>juce__ComponentListener_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ComponentMovementWatcher.h</name>
    <filename>juce__ComponentMovementWatcher_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ComponentPeer.h</name>
    <filename>juce__ComponentPeer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_core_includes.h</name>
    <filename>juce__core__includes_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_CPlusPlusCodeTokeniser.h</name>
    <filename>juce__CPlusPlusCodeTokeniser_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_CriticalSection.h</name>
    <filename>juce__CriticalSection_8h.html</filename>
    <member kind="function">
      <name>ScopedLock</name>
      <anchor>ad1ed2d300c6a3c26851d892bafbcdbf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ScopedUnlock</name>
      <anchor>a452e6e2f99f1375d5616931d19c0cefe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_DefineMacros.h</name>
    <filename>juce__DefineMacros_8h.html</filename>
    <member kind="function">
      <name>T</name>
      <anchor>a6cd5681fcb4996432b933eee3779619e</anchor>
      <arglist>(stringLiteral)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_DeletedAtShutdown.h</name>
    <filename>juce__DeletedAtShutdown_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Desktop.h</name>
    <filename>juce__Desktop_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DialogWindow.h</name>
    <filename>juce__DialogWindow_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DirectoryContentsDisplayComponent.h</name>
    <filename>juce__DirectoryContentsDisplayComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DirectoryContentsList.h</name>
    <filename>juce__DirectoryContentsList_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DirectoryIterator.h</name>
    <filename>juce__DirectoryIterator_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DirectXPluginFormat.h</name>
    <filename>juce__DirectXPluginFormat_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DocumentWindow.h</name>
    <filename>juce__DocumentWindow_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DragAndDropContainer.h</name>
    <filename>juce__DragAndDropContainer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DragAndDropTarget.h</name>
    <filename>juce__DragAndDropTarget_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Drawable.h</name>
    <filename>juce__Drawable_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DrawableButton.h</name>
    <filename>juce__DrawableButton_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DrawableComposite.h</name>
    <filename>juce__DrawableComposite_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DrawableImage.h</name>
    <filename>juce__DrawableImage_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DrawablePath.h</name>
    <filename>juce__DrawablePath_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DrawableText.h</name>
    <filename>juce__DrawableText_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DropShadowEffect.h</name>
    <filename>juce__DropShadowEffect_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DropShadower.h</name>
    <filename>juce__DropShadower_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_DynamicObject.h</name>
    <filename>juce__DynamicObject_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_EdgeTable.h</name>
    <filename>juce__EdgeTable_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ElementComparator.h</name>
    <filename>juce__ElementComparator_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_File.h</name>
    <filename>juce__File_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileBasedDocument.h</name>
    <filename>juce__FileBasedDocument_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileBrowserComponent.h</name>
    <filename>juce__FileBrowserComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileBrowserListener.h</name>
    <filename>juce__FileBrowserListener_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileChooser.h</name>
    <filename>juce__FileChooser_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileChooserDialogBox.h</name>
    <filename>juce__FileChooserDialogBox_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileDragAndDropTarget.h</name>
    <filename>juce__FileDragAndDropTarget_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileFilter.h</name>
    <filename>juce__FileFilter_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileInputSource.h</name>
    <filename>juce__FileInputSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileInputStream.h</name>
    <filename>juce__FileInputStream_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileListComponent.h</name>
    <filename>juce__FileListComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileLogger.h</name>
    <filename>juce__FileLogger_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FilenameComponent.h</name>
    <filename>juce__FilenameComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileOutputStream.h</name>
    <filename>juce__FileOutputStream_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FilePreviewComponent.h</name>
    <filename>juce__FilePreviewComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileSearchPath.h</name>
    <filename>juce__FileSearchPath_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileSearchPathListComponent.h</name>
    <filename>juce__FileSearchPathListComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FileTreeComponent.h</name>
    <filename>juce__FileTreeComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FillType.h</name>
    <filename>juce__FillType_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FlacAudioFormat.h</name>
    <filename>juce__FlacAudioFormat_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_FlacHeader.h</name>
    <filename>juce__FlacHeader_8h.html</filename>
    <member kind="function">
      <name>VERSION</name>
      <anchor>a1c6d5de492ac61ad29aec7aa9a436bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FLAC__NO_DLL</name>
      <anchor>a03b8c1de3bcdb7c0e939aa991d507850</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FLAC__SYS_DARWIN</name>
      <anchor>aa66ca6a3738cff35d8ad244d0011190e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Font.h</name>
    <filename>juce__Font_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_GenericAudioProcessorEditor.h</name>
    <filename>juce__GenericAudioProcessorEditor_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_GlowEffect.h</name>
    <filename>juce__GlowEffect_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_GlyphArrangement.h</name>
    <filename>juce__GlyphArrangement_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Graphics.h</name>
    <filename>juce__Graphics_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_GroupComponent.h</name>
    <filename>juce__GroupComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_GZIPCompressorOutputStream.h</name>
    <filename>juce__GZIPCompressorOutputStream_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_GZIPDecompressorInputStream.h</name>
    <filename>juce__GZIPDecompressorInputStream_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_HeapBlock.h</name>
    <filename>juce__HeapBlock_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_HyperlinkButton.h</name>
    <filename>juce__HyperlinkButton_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_IIRFilter.h</name>
    <filename>juce__IIRFilter_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_IIRFilterAudioSource.h</name>
    <filename>juce__IIRFilterAudioSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Image.h</name>
    <filename>juce__Image_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ImageButton.h</name>
    <filename>juce__ImageButton_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ImageCache.h</name>
    <filename>juce__ImageCache_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ImageConvolutionKernel.h</name>
    <filename>juce__ImageConvolutionKernel_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ImageEffectFilter.h</name>
    <filename>juce__ImageEffectFilter_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ImageFileFormat.h</name>
    <filename>juce__ImageFileFormat_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ImagePreviewComponent.h</name>
    <filename>juce__ImagePreviewComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Initialisation.h</name>
    <filename>juce__Initialisation_8h.html</filename>
    <member kind="function">
      <name>initialiseJuce_GUI</name>
      <anchor>a3370417f0c40a21f731ea493f69054b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>shutdownJuce_GUI</name>
      <anchor>a2cd9961ea76b25d9451111e4d3e72def</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>initialiseJuce_NonGUI</name>
      <anchor>a4cda33f4095745211c12cad1acbc8377</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>shutdownJuce_NonGUI</name>
      <anchor>a466fea6cb054f29b9b90e1f1955ec52d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_InputSource.h</name>
    <filename>juce__InputSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_InputStream.h</name>
    <filename>juce__InputStream_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_InterprocessConnection.h</name>
    <filename>juce__InterprocessConnection_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_InterprocessConnectionServer.h</name>
    <filename>juce__InterprocessConnectionServer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_InterProcessLock.h</name>
    <filename>juce__InterProcessLock_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Justification.h</name>
    <filename>juce__Justification_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_KeyboardFocusTraverser.h</name>
    <filename>juce__KeyboardFocusTraverser_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_KeyListener.h</name>
    <filename>juce__KeyListener_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_KeyMappingEditorComponent.h</name>
    <filename>juce__KeyMappingEditorComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_KeyPress.h</name>
    <filename>juce__KeyPress_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_KeyPressMappingSet.h</name>
    <filename>juce__KeyPressMappingSet_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_KnownPluginList.h</name>
    <filename>juce__KnownPluginList_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Label.h</name>
    <filename>juce__Label_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_LADSPAPluginFormat.h</name>
    <filename>juce__LADSPAPluginFormat_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_LassoComponent.h</name>
    <filename>juce__LassoComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Line.h</name>
    <filename>juce__Line_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_linux_NativeIncludes.h</name>
    <filename>juce__linux__NativeIncludes_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ListBox.h</name>
    <filename>juce__ListBox_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ListenerList.h</name>
    <filename>juce__ListenerList_8h.html</filename>
    <member kind="function">
      <name>LL_TEMPLATE</name>
      <anchor>a5ed097b9221e1e55c7a55972dd980fa9</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="function">
      <name>LL_PARAM</name>
      <anchor>a5574396bd15c950dae8c72b7b2d72d7d</anchor>
      <arglist>(a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_LocalisedStrings.h</name>
    <filename>juce__LocalisedStrings_8h.html</filename>
    <member kind="function">
      <name>TRANS</name>
      <anchor>af3c28ad27b0d8fa2f615888701e32b07</anchor>
      <arglist>(stringLiteral)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Logger.h</name>
    <filename>juce__Logger_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_LookAndFeel.h</name>
    <filename>juce__LookAndFeel_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_LowLevelGraphicsContext.h</name>
    <filename>juce__LowLevelGraphicsContext_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_LowLevelGraphicsPostScriptRenderer.h</name>
    <filename>juce__LowLevelGraphicsPostScriptRenderer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_LowLevelGraphicsSoftwareRenderer.h</name>
    <filename>juce__LowLevelGraphicsSoftwareRenderer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_mac_CarbonViewWrapperComponent.h</name>
    <filename>juce__mac__CarbonViewWrapperComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_mac_NativeIncludes.h</name>
    <filename>juce__mac__NativeIncludes_8h.html</filename>
    <member kind="function">
      <name>USE_COREGRAPHICS_RENDERING</name>
      <anchor>a02d1fe8b98df9f1363b87347c43259a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CGFloat</name>
      <anchor>ad2ebc596430858d7d9e5e89654b844aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_mac_ObjCSuffix.h</name>
    <filename>juce__mac__ObjCSuffix_8h.html</filename>
    <member kind="function">
      <name>appendMacro1</name>
      <anchor>ad252d03f747bdfcf958a5880d6631bbc</anchor>
      <arglist>(a, b, c, d, e)</arglist>
    </member>
    <member kind="function">
      <name>appendMacro2</name>
      <anchor>a2287b110008b09d79dd068e0c7d491d0</anchor>
      <arglist>(a, b, c, d, e)</arglist>
    </member>
    <member kind="function">
      <name>MakeObjCClassName</name>
      <anchor>ae84128b0505e01f986cc066985e51bc7</anchor>
      <arglist>(rootName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_MagnifierComponent.h</name>
    <filename>juce__MagnifierComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MathsFunctions.h</name>
    <filename>juce__MathsFunctions_8h.html</filename>
    <member kind="function">
      <name>literal64bit</name>
      <anchor>a2a04225a9df1324513c2913f2d184abc</anchor>
      <arglist>(longLiteral)</arglist>
    </member>
    <member kind="function">
      <name>PARAMETER_TYPE</name>
      <anchor>ab17e68e410cbcdaf3074214aed490ec8</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="function">
      <name>int8</name>
      <anchor>a1b956fe1df85f3c132b21edb4e116458</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uint8</name>
      <anchor>adde6aaee8457bee49c2a92621fe22b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>int16</name>
      <anchor>a259fa4834387bd68627ddf37bb3ebdb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uint16</name>
      <anchor>a05f6b0ae8f6a6e135b0e290c25fe0e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>int32</name>
      <anchor>a43d43196463bde49cb067f5c20ab8481</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uint32</name>
      <anchor>a1134b580f8da4de94ca6b1de4d37975e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>int64</name>
      <anchor>aecfc3c54bd29ad5964e1c1c3ccbf89df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uint64</name>
      <anchor>a29940ae63ec06c9998bba873e25407ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pointer_sized_int</name>
      <anchor>a8d188377fe1977ca9d1a9b738019dd78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pointer_sized_uint</name>
      <anchor>a2d432c371b407ba6f36d34aa95229423</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>juce_wchar</name>
      <anchor>a7d83261f3888884bbf04a58edc2672da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>jmax</name>
      <anchor>add6b131373d2ee13c1b5813fc4095dd4</anchor>
      <arglist>(const Type a, const Type b)</arglist>
    </member>
    <member kind="function">
      <name>jmax</name>
      <anchor>a330a554c518d7f6f54322848b927a051</anchor>
      <arglist>(const Type a, const Type b, const Type c)</arglist>
    </member>
    <member kind="function">
      <name>jmax</name>
      <anchor>af7f574530fbbe2e26f6a4ca8dd6186be</anchor>
      <arglist>(const Type a, const Type b, const Type c, const Type d)</arglist>
    </member>
    <member kind="function">
      <name>jmin</name>
      <anchor>a7b29873b69988dbe434990a7400734d5</anchor>
      <arglist>(const Type a, const Type b)</arglist>
    </member>
    <member kind="function">
      <name>jmin</name>
      <anchor>a90a4b959b61531c4f357d89b3402581f</anchor>
      <arglist>(const Type a, const Type b, const Type c)</arglist>
    </member>
    <member kind="function">
      <name>jmin</name>
      <anchor>a95ce2712650720d4d047314d2cf0c174</anchor>
      <arglist>(const Type a, const Type b, const Type c, const Type d)</arglist>
    </member>
    <member kind="function">
      <name>jlimit</name>
      <anchor>a16d9324d1621c51a6187baf0bf24fdd2</anchor>
      <arglist>(const Type lowerLimit, const Type upperLimit, const Type valueToConstrain)</arglist>
    </member>
    <member kind="function">
      <name>swapVariables</name>
      <anchor>a286f66036cf3edaf43464da885ef9d79</anchor>
      <arglist>(Type &amp;variable1, Type &amp;variable2)</arglist>
    </member>
    <member kind="function">
      <name>numElementsInArray</name>
      <anchor>acf9419b343cbbecbba7273baf7996d11</anchor>
      <arglist>(Type &amp;array)</arglist>
    </member>
    <member kind="function">
      <name>juce_hypot</name>
      <anchor>aaf87c4a18a9df8c574ce8ece27a8702a</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <name>juce_hypotf</name>
      <anchor>acf15fbd5ed5b567269150c9984c2e239</anchor>
      <arglist>(float a, float b)</arglist>
    </member>
    <member kind="function">
      <name>abs64</name>
      <anchor>a9883365027d8c3a14d2d5513c111d1ef</anchor>
      <arglist>(const int64 n)</arglist>
    </member>
    <member kind="function">
      <name>juce_isfinite</name>
      <anchor>ad8f433590c737bff13babf5a77cde856</anchor>
      <arglist>(FloatingPointType value)</arglist>
    </member>
    <member kind="function">
      <name>roundToInt</name>
      <anchor>a65d8e1b429cbffa2539ab63681008d64</anchor>
      <arglist>(const FloatType value)</arglist>
    </member>
    <member kind="function">
      <name>roundToIntAccurate</name>
      <anchor>a7ce54169550a18360068772111be4f52</anchor>
      <arglist>(const double value)</arglist>
    </member>
    <member kind="function">
      <name>roundDoubleToInt</name>
      <anchor>a39c362057ff4dab1b1601aefd62848a0</anchor>
      <arglist>(const double value)</arglist>
    </member>
    <member kind="function">
      <name>roundFloatToInt</name>
      <anchor>a5f7d2f40d121bb5a1e0578b40833db9e</anchor>
      <arglist>(const float value)</arglist>
    </member>
    <member kind="function">
      <name>double_Pi</name>
      <anchor>aa929b9e10eedb3b7a6bd8f6ba2d9ddaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>float_Pi</name>
      <anchor>ac93fbc5e59d440cab26842b9c575d161</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_MD5.h</name>
    <filename>juce__MD5_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Memory.h</name>
    <filename>juce__Memory_8h.html</filename>
    <member kind="function">
      <name>juce_malloc</name>
      <anchor>ae27beef4228fd9ad059f1e83e4e65dc1</anchor>
      <arglist>(numBytes)</arglist>
    </member>
    <member kind="function">
      <name>juce_calloc</name>
      <anchor>acab965af9c10d0cd517f8559553906e3</anchor>
      <arglist>(numBytes)</arglist>
    </member>
    <member kind="function">
      <name>juce_realloc</name>
      <anchor>aa0356b9f181a2b7cefb982daff22c30d</anchor>
      <arglist>(location, numBytes)</arglist>
    </member>
    <member kind="function">
      <name>juce_free</name>
      <anchor>a4e63eada67eb79a24fc2dfe20983687b</anchor>
      <arglist>(location)</arglist>
    </member>
    <member kind="function">
      <name>juce_ThreadLocal</name>
      <anchor>a8298af7fde34e5703f9992366538d1ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>zeromem</name>
      <anchor>a7b2c3cbcb4e6767c5dc43cd2348775ca</anchor>
      <arglist>(void *memory, size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <name>zerostruct</name>
      <anchor>ae03ce95cf2336834bed8cfc489460d20</anchor>
      <arglist>(Type &amp;structure)</arglist>
    </member>
    <member kind="function">
      <name>deleteAndZero</name>
      <anchor>ac6427718fdb27d3732034a93bdb23b90</anchor>
      <arglist>(Type &amp;pointer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_MemoryBlock.h</name>
    <filename>juce__MemoryBlock_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MemoryInputStream.h</name>
    <filename>juce__MemoryInputStream_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MemoryOutputStream.h</name>
    <filename>juce__MemoryOutputStream_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MenuBarComponent.h</name>
    <filename>juce__MenuBarComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MenuBarModel.h</name>
    <filename>juce__MenuBarModel_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Message.h</name>
    <filename>juce__Message_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MessageListener.h</name>
    <filename>juce__MessageListener_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MessageManager.h</name>
    <filename>juce__MessageManager_8h.html</filename>
    <member kind="function">
      <name>MessageCallbackFunction</name>
      <anchor>a107bb4f42cc6661a36a13b0fad22196d</anchor>
      <arglist>)(void *userData)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_MidiBuffer.h</name>
    <filename>juce__MidiBuffer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MidiFile.h</name>
    <filename>juce__MidiFile_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MidiInput.h</name>
    <filename>juce__MidiInput_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MidiKeyboardComponent.h</name>
    <filename>juce__MidiKeyboardComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MidiKeyboardState.h</name>
    <filename>juce__MidiKeyboardState_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MidiMessage.h</name>
    <filename>juce__MidiMessage_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MidiMessageCollector.h</name>
    <filename>juce__MidiMessageCollector_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MidiMessageSequence.h</name>
    <filename>juce__MidiMessageSequence_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MidiOutput.h</name>
    <filename>juce__MidiOutput_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MixerAudioSource.h</name>
    <filename>juce__MixerAudioSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ModifierKeys.h</name>
    <filename>juce__ModifierKeys_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MouseCursor.h</name>
    <filename>juce__MouseCursor_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MouseEvent.h</name>
    <filename>juce__MouseEvent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MouseHoverDetector.h</name>
    <filename>juce__MouseHoverDetector_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MouseInputSource.h</name>
    <filename>juce__MouseInputSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MouseListener.h</name>
    <filename>juce__MouseListener_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MultiDocumentPanel.h</name>
    <filename>juce__MultiDocumentPanel_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_MultiTimer.h</name>
    <filename>juce__MultiTimer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_NamedPipe.h</name>
    <filename>juce__NamedPipe_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_NamedValueSet.h</name>
    <filename>juce__NamedValueSet_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_NSViewComponent.h</name>
    <filename>juce__NSViewComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_OggVorbisAudioFormat.h</name>
    <filename>juce__OggVorbisAudioFormat_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_OggVorbisHeader.h</name>
    <filename>juce__OggVorbisHeader_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_OldSchoolLookAndFeel.h</name>
    <filename>juce__OldSchoolLookAndFeel_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_OpenGLComponent.h</name>
    <filename>juce__OpenGLComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_OutputStream.h</name>
    <filename>juce__OutputStream_8h.html</filename>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>aebbf7c4da4a8a6d00537f9c2d4601569</anchor>
      <arglist>(OutputStream &amp;stream, int number)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>adba91c15c39e3eae8ed171b50771a223</anchor>
      <arglist>(OutputStream &amp;stream, double number)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a3e089b30a6da889130d53d343c6ba956</anchor>
      <arglist>(OutputStream &amp;stream, char character)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a23f2d981ecb1e398ef4c74f3e7f190c2</anchor>
      <arglist>(OutputStream &amp;stream, const char *text)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_OwnedArray.h</name>
    <filename>juce__OwnedArray_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Path.h</name>
    <filename>juce__Path_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PathIterator.h</name>
    <filename>juce__PathIterator_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PathStrokeType.h</name>
    <filename>juce__PathStrokeType_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PerformanceCounter.h</name>
    <filename>juce__PerformanceCounter_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PixelFormats.h</name>
    <filename>juce__PixelFormats_8h.html</filename>
    <member kind="function">
      <name>PACKED</name>
      <anchor>a9630db40c25b4e42af3a365588b55303</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PACKED</name>
      <anchor>a210519eda62a8e5c33db3fb8c976d574</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_PlatformDefs.h</name>
    <filename>juce__PlatformDefs_8h.html</filename>
    <member kind="function">
      <name>JUCE_CALLTYPE</name>
      <anchor>af0b3f78ca801d88a7912f4c6bbf50e58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>juce_LogCurrentAssertion</name>
      <anchor>a003e8bb6b9c1e3bee63827de72ca76aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DBG</name>
      <anchor>a5335262a7d74113caa4edd740bded17d</anchor>
      <arglist>(dbgtext)</arglist>
    </member>
    <member kind="function">
      <name>jassertfalse</name>
      <anchor>adc044ce5efecbecf2f5a44cd00db67b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>jassert</name>
      <anchor>a07c2d36d1484504f7b6fbffa068ad818</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="function">
      <name>static_jassert</name>
      <anchor>a0eb872d7ee75ed5bb25589dd175af725</anchor>
      <arglist>(expression)</arglist>
    </member>
    <member kind="function">
      <name>JUCE_TRY</name>
      <anchor>a267fd4f83073fb084b389df70243c52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_CATCH_EXCEPTION</name>
      <anchor>a76b33d944e52097017e10dbc10de503b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_CATCH_ALL</name>
      <anchor>af8a67a7a14b17c2033ceb721e7fb7c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_CATCH_ALL_ASSERT</name>
      <anchor>a9bb6baa78f9a86902caa02b0f7c30b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>forcedinline</name>
      <anchor>ac2535cb549b141b3a96b8a08014e46cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_PlatformUtilities.h</name>
    <filename>juce__PlatformUtilities_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PluginDescription.h</name>
    <filename>juce__PluginDescription_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PluginDirectoryScanner.h</name>
    <filename>juce__PluginDirectoryScanner_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PluginListComponent.h</name>
    <filename>juce__PluginListComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Point.h</name>
    <filename>juce__Point_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PopupMenu.h</name>
    <filename>juce__PopupMenu_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PopupMenuCustomComponent.h</name>
    <filename>juce__PopupMenuCustomComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PositionableAudioSource.h</name>
    <filename>juce__PositionableAudioSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PositionedRectangle.h</name>
    <filename>juce__PositionedRectangle_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_posix_SharedCode.h</name>
    <filename>juce__posix__SharedCode_8h.html</filename>
    <member kind="function">
      <name>juce_copyFile</name>
      <anchor>a9a357f10a7395a22f75e3e7d1233fb76</anchor>
      <arglist>(const String &amp;s, const String &amp;d)</arglist>
    </member>
    <member kind="function">
      <name>juce_isDirectory</name>
      <anchor>a3a14737c769056d08729144f6752f798</anchor>
      <arglist>(const String &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <name>juce_fileExists</name>
      <anchor>a7d7eb34052b89ad6847105759a668d5e</anchor>
      <arglist>(const String &amp;fileName, const bool dontCountDirectories)</arglist>
    </member>
    <member kind="function">
      <name>juce_getFileSize</name>
      <anchor>af07a6a48ba8671f719fec12b8fe5635e</anchor>
      <arglist>(const String &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <name>juce_canWriteToFile</name>
      <anchor>a14522d142895ca50ef6eb1ef2917e6f7</anchor>
      <arglist>(const String &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <name>juce_deleteFile</name>
      <anchor>aef19f3fda3876e29af7a250c6d19f206</anchor>
      <arglist>(const String &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <name>juce_moveFile</name>
      <anchor>ad64f98554caaa9b790f20346166bc74f</anchor>
      <arglist>(const String &amp;source, const String &amp;dest)</arglist>
    </member>
    <member kind="function">
      <name>juce_createDirectory</name>
      <anchor>a9792cafb90c1be09188e960186420edb</anchor>
      <arglist>(const String &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <name>juce_fileOpen</name>
      <anchor>a0d06f72101a08950f582e25489773a89</anchor>
      <arglist>(const String &amp;fileName, bool forWriting)</arglist>
    </member>
    <member kind="function">
      <name>juce_fileClose</name>
      <anchor>ad27bad69913be00826e8110a17a817d2</anchor>
      <arglist>(void *handle)</arglist>
    </member>
    <member kind="function">
      <name>juce_fileRead</name>
      <anchor>a051d8af673371c22905514f050bfcb69</anchor>
      <arglist>(void *handle, void *buffer, int size)</arglist>
    </member>
    <member kind="function">
      <name>juce_fileWrite</name>
      <anchor>a385de98fe41b9e3f06ea54637c1b4b3d</anchor>
      <arglist>(void *handle, const void *buffer, int size)</arglist>
    </member>
    <member kind="function">
      <name>juce_fileSetPosition</name>
      <anchor>a473665daeffd9062f62eef8427c088c6</anchor>
      <arglist>(void *handle, int64 pos)</arglist>
    </member>
    <member kind="function">
      <name>juce_fileGetPosition</name>
      <anchor>aa1850c705365de6ed040d6dad0c0c8f8</anchor>
      <arglist>(void *handle)</arglist>
    </member>
    <member kind="function">
      <name>juce_fileFlush</name>
      <anchor>a7023874b44f97ea5d66ce8d48e8aedcc</anchor>
      <arglist>(void *handle)</arglist>
    </member>
    <member kind="function">
      <name>juce_getExecutableFile</name>
      <anchor>a124ff2a762e88d3725883a4f5b77974a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>juce_getVolumeLabel</name>
      <anchor>a7ae9a7ff787f87e056c4757f036eafca</anchor>
      <arglist>(const String &amp;filenameOnVolume, int &amp;volumeSerialNumber)</arglist>
    </member>
    <member kind="function">
      <name>juce_runSystemCommand</name>
      <anchor>a43125c37c3bd1625b56e66f6388dddea</anchor>
      <arglist>(const String &amp;command)</arglist>
    </member>
    <member kind="function">
      <name>juce_getOutputFromCommand</name>
      <anchor>aae446cd0fdf651281620791ffee912dd</anchor>
      <arglist>(const String &amp;command)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_PreferencesPanel.h</name>
    <filename>juce__PreferencesPanel_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Primes.h</name>
    <filename>juce__Primes_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Process.h</name>
    <filename>juce__Process_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ProgressBar.h</name>
    <filename>juce__ProgressBar_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PropertiesFile.h</name>
    <filename>juce__PropertiesFile_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PropertyComponent.h</name>
    <filename>juce__PropertyComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PropertyPanel.h</name>
    <filename>juce__PropertyPanel_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_PropertySet.h</name>
    <filename>juce__PropertySet_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_QuickTimeAudioFormat.h</name>
    <filename>juce__QuickTimeAudioFormat_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_QuickTimeMovieComponent.h</name>
    <filename>juce__QuickTimeMovieComponent_8h.html</filename>
    <member kind="function">
      <name>QTCompBaseClass</name>
      <anchor>a79cc14852fd867396157f8f46e2c2987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Random.h</name>
    <filename>juce__Random_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Range.h</name>
    <filename>juce__Range_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ReadWriteLock.h</name>
    <filename>juce__ReadWriteLock_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_RecentlyOpenedFilesList.h</name>
    <filename>juce__RecentlyOpenedFilesList_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Rectangle.h</name>
    <filename>juce__Rectangle_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_RectangleList.h</name>
    <filename>juce__RectangleList_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_RectanglePlacement.h</name>
    <filename>juce__RectanglePlacement_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ReduceOpacityEffect.h</name>
    <filename>juce__ReduceOpacityEffect_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ReferenceCountedArray.h</name>
    <filename>juce__ReferenceCountedArray_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ReferenceCountedObject.h</name>
    <filename>juce__ReferenceCountedObject_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_RelativeTime.h</name>
    <filename>juce__RelativeTime_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ResamplingAudioSource.h</name>
    <filename>juce__ResamplingAudioSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ResizableBorderComponent.h</name>
    <filename>juce__ResizableBorderComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ResizableCornerComponent.h</name>
    <filename>juce__ResizableCornerComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ResizableWindow.h</name>
    <filename>juce__ResizableWindow_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_RSAKey.h</name>
    <filename>juce__RSAKey_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Sampler.h</name>
    <filename>juce__Sampler_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ScopedLock.h</name>
    <filename>juce__ScopedLock_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ScopedPointer.h</name>
    <filename>juce__ScopedPointer_8h.html</filename>
    <member kind="function">
      <name>operator==</name>
      <anchor>a8bc3fe7c07bea494c54b33ab30fa4450</anchor>
      <arglist>(const ScopedPointer&lt; ObjectType &gt; &amp;pointer1, const ObjectType *const pointer2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a9ead2a8868afb30c1941f599ca4dfb96</anchor>
      <arglist>(const ScopedPointer&lt; ObjectType &gt; &amp;pointer1, const ObjectType *const pointer2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ScopedReadLock.h</name>
    <filename>juce__ScopedReadLock_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ScopedTryLock.h</name>
    <filename>juce__ScopedTryLock_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ScopedWriteLock.h</name>
    <filename>juce__ScopedWriteLock_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ScrollBar.h</name>
    <filename>juce__ScrollBar_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_SelectedItemSet.h</name>
    <filename>juce__SelectedItemSet_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ShapeButton.h</name>
    <filename>juce__ShapeButton_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Singleton.h</name>
    <filename>juce__Singleton_8h.html</filename>
    <member kind="function">
      <name>juce_DeclareSingleton</name>
      <anchor>ac46b66c5d38d6bd3a937af241d152a44</anchor>
      <arglist>(classname, doNotRecreateAfterDeletion)</arglist>
    </member>
    <member kind="function">
      <name>juce_ImplementSingleton</name>
      <anchor>a514301c5c269b87e3a3e3da3a6640f8f</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="function">
      <name>juce_DeclareSingleton_SingleThreaded</name>
      <anchor>a253f51f3a9ac2b4795e2ce08b2a756d9</anchor>
      <arglist>(classname, doNotRecreateAfterDeletion)</arglist>
    </member>
    <member kind="function">
      <name>juce_DeclareSingleton_SingleThreaded_Minimal</name>
      <anchor>a354e37d287b39d02097f4f74be14af51</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="function">
      <name>juce_ImplementSingleton_SingleThreaded</name>
      <anchor>a4404ed444ce628bab43d7fb68f7f1884</anchor>
      <arglist>(classname)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Slider.h</name>
    <filename>juce__Slider_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_SliderListener.h</name>
    <filename>juce__SliderListener_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_SliderPropertyComponent.h</name>
    <filename>juce__SliderPropertyComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Socket.h</name>
    <filename>juce__Socket_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_SortedSet.h</name>
    <filename>juce__SortedSet_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_SparseSet.h</name>
    <filename>juce__SparseSet_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_SplashScreen.h</name>
    <filename>juce__SplashScreen_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_StandardHeader.h</name>
    <filename>juce__StandardHeader_8h.html</filename>
    <member kind="function">
      <name>JUCE_MAJOR_VERSION</name>
      <anchor>ad39afa9c8302295c83a3c431c553bc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_MINOR_VERSION</name>
      <anchor>a2a583ff83063cc1e7f9abeb35a21dff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_BUILDNUMBER</name>
      <anchor>a9ac1dc104cd00f4cc2ff6dece8711f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_VERSION</name>
      <anchor>a8e9e97736d05e318de09b9bedab1aaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BEGIN_JUCE_NAMESPACE</name>
      <anchor>a1dc06c914932b049f6da865592e0ab48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>END_JUCE_NAMESPACE</name>
      <anchor>aafc33f559fdf9e45779ce468afe39d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_API</name>
      <anchor>a65961b3bfbda0ffb83750d914cee38fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_PUBLIC_FUNCTION</name>
      <anchor>a96fbdc03e0c892905daef7b47337c84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>juce_isRunningUnderDebugger</name>
      <anchor>a4d4c4400736c8bb724ec51dc95a748ad</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_StretchableLayoutManager.h</name>
    <filename>juce__StretchableLayoutManager_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_StretchableLayoutResizerBar.h</name>
    <filename>juce__StretchableLayoutResizerBar_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_StretchableObjectResizer.h</name>
    <filename>juce__StretchableObjectResizer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_String.h</name>
    <filename>juce__String_8h.html</filename>
    <member kind="function">
      <name>operator+</name>
      <anchor>a1d149088f7bb0162a393cfe1c0063bf7</anchor>
      <arglist>(const char *string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>a0f55865e43441f49d178bafcd7a40c02</anchor>
      <arglist>(const juce_wchar *string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>ad7bf40147d989d62042ec0fadbcd5952</anchor>
      <arglist>(char string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>a6610e8ceba5b6a723b08b60ee051e62b</anchor>
      <arglist>(juce_wchar string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>a9f118220fd84a29fafff074078a8154e</anchor>
      <arglist>(String string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>a1dca986543ae4ec06417bd765838989c</anchor>
      <arglist>(String string1, const char *string2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>abbb62bd9eb452fd44787b5637b2bfd93</anchor>
      <arglist>(String string1, const juce_wchar *string2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>a484673a845aec449ae7ea8e5cba86576</anchor>
      <arglist>(String string1, char characterToAppend)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>af26a52ef54859a7ac7484c9ac345db31</anchor>
      <arglist>(String string1, juce_wchar characterToAppend)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a41828b76f5fe0076f5d64c9c8e231d2f</anchor>
      <arglist>(String &amp;string1, char characterToAppend)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a5bfdd9c1f5bac6ed17c5e41b0c107211</anchor>
      <arglist>(String &amp;string1, juce_wchar characterToAppend)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a4c59d8e99d5b809ce2603ae450165237</anchor>
      <arglist>(String &amp;string1, const char *string2)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a533754cddffb0b2d3e862c893a96c676</anchor>
      <arglist>(String &amp;string1, const juce_wchar *string2)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a8bba341aedaeb0cee5587e4c7a851819</anchor>
      <arglist>(String &amp;string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a4777a3a6aeecaacea069b0375375d14a</anchor>
      <arglist>(String &amp;string1, short number)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>af8ba97d3cc86aab91398379d7158ebe7</anchor>
      <arglist>(String &amp;string1, int number)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a6cfb484f27ef8a6dff42031b04596a33</anchor>
      <arglist>(String &amp;string1, unsigned int number)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a4842563660b345b1f8c98b9dfd714131</anchor>
      <arglist>(String &amp;string1, long number)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a0ca92c2326d03b1314cbcbc0deb22d79</anchor>
      <arglist>(String &amp;string1, unsigned long number)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a86c6e9d13ed8ea0e8fe62a7cf3759e27</anchor>
      <arglist>(String &amp;string1, float number)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>ae64b559df449432be68269c1b8b74f0f</anchor>
      <arglist>(String &amp;string1, double number)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>a1f0e242433a476a87c47f82e75c64d1a</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>ae317a1e14e41d5936e4e018b8dfe919c</anchor>
      <arglist>(const String &amp;string1, const char *string2)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>aa84011858fd28b137fa6fc46a84b9093</anchor>
      <arglist>(const String &amp;string1, const juce_wchar *string2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a9eb386979f2180638146fc6f346b0b50</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a177c270baa72078624e136d3ab846b17</anchor>
      <arglist>(const String &amp;string1, const char *string2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>ab02d650727aebf00cc2f6a55a03409b9</anchor>
      <arglist>(const String &amp;string1, const juce_wchar *string2)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>acbad45f4f8a7d4a2a37afdacbea8c832</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>a1d0306d566a5feda658852b4b868d2f0</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>a6335f129de028fb8f5956ab4ce76951b</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>ae2fe9a53ef6b09c075d2f5e772d309df</anchor>
      <arglist>(const String &amp;string1, const String &amp;string2)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>aba992a3d9941309e50a37b2733246853</anchor>
      <arglist>(std::basic_ostream&lt; charT, traits &gt; &amp;stream, const String &amp;stringToWrite)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>ac901d3c5a8302bbd3f18cf01471c61bc</anchor>
      <arglist>(OutputStream &amp;stream, const String &amp;text)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_StringArray.h</name>
    <filename>juce__StringArray_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_StringPairArray.h</name>
    <filename>juce__StringPairArray_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_SubregionStream.h</name>
    <filename>juce__SubregionStream_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Synthesiser.h</name>
    <filename>juce__Synthesiser_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_SystemClipboard.h</name>
    <filename>juce__SystemClipboard_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_SystemStats.h</name>
    <filename>juce__SystemStats_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_SystemTrayIconComponent.h</name>
    <filename>juce__SystemTrayIconComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TabbedButtonBar.h</name>
    <filename>juce__TabbedButtonBar_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TabbedComponent.h</name>
    <filename>juce__TabbedComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TableHeaderComponent.h</name>
    <filename>juce__TableHeaderComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TableListBox.h</name>
    <filename>juce__TableListBox_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TargetPlatform.h</name>
    <filename>juce__TargetPlatform_8h.html</filename>
    <member kind="function">
      <name>JUCE_DEBUG</name>
      <anchor>a5f55c9671da5cfdf8377deba11c06044</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_BIG_ENDIAN</name>
      <anchor>ae7c65e2fe39a04d255d8c723668969bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_INTEL</name>
      <anchor>af1c7ad8bdab01aa04e43c5f431faf08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_32BIT</name>
      <anchor>a298f3b24ad0e105ede05218dc834dd24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_LITTLE_ENDIAN</name>
      <anchor>a1884f6a8acfa296a0721157234e2edc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_32BIT</name>
      <anchor>a298f3b24ad0e105ede05218dc834dd24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>JUCE_INTEL</name>
      <anchor>af1c7ad8bdab01aa04e43c5f431faf08c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_TemporaryFile.h</name>
    <filename>juce__TemporaryFile_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TextButton.h</name>
    <filename>juce__TextButton_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TextEditor.h</name>
    <filename>juce__TextEditor_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TextInputTarget.h</name>
    <filename>juce__TextInputTarget_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TextLayout.h</name>
    <filename>juce__TextLayout_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TextPropertyComponent.h</name>
    <filename>juce__TextPropertyComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Thread.h</name>
    <filename>juce__Thread_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ThreadPool.h</name>
    <filename>juce__ThreadPool_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ThreadWithProgressWindow.h</name>
    <filename>juce__ThreadWithProgressWindow_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Time.h</name>
    <filename>juce__Time_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Timer.h</name>
    <filename>juce__Timer_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TimeSliceThread.h</name>
    <filename>juce__TimeSliceThread_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ToggleButton.h</name>
    <filename>juce__ToggleButton_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ToneGeneratorAudioSource.h</name>
    <filename>juce__ToneGeneratorAudioSource_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Toolbar.h</name>
    <filename>juce__Toolbar_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ToolbarButton.h</name>
    <filename>juce__ToolbarButton_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ToolbarItemComponent.h</name>
    <filename>juce__ToolbarItemComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ToolbarItemFactory.h</name>
    <filename>juce__ToolbarItemFactory_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_ToolbarItemPalette.h</name>
    <filename>juce__ToolbarItemPalette_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TooltipClient.h</name>
    <filename>juce__TooltipClient_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TooltipWindow.h</name>
    <filename>juce__TooltipWindow_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TopLevelWindow.h</name>
    <filename>juce__TopLevelWindow_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_TreeView.h</name>
    <filename>juce__TreeView_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Typeface.h</name>
    <filename>juce__Typeface_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_UndoableAction.h</name>
    <filename>juce__UndoableAction_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_UndoManager.h</name>
    <filename>juce__UndoManager_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_URL.h</name>
    <filename>juce__URL_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Uuid.h</name>
    <filename>juce__Uuid_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Value.h</name>
    <filename>juce__Value_8h.html</filename>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>a5bd7c2b7291a351dd8098d19ee57b9ce</anchor>
      <arglist>(OutputStream &amp;stream, const Value &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ValueTree.h</name>
    <filename>juce__ValueTree_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_Variant.h</name>
    <filename>juce__Variant_8h.html</filename>
    <member kind="function">
      <name>operator==</name>
      <anchor>a96a6ba562256c749b6fb47248821f329</anchor>
      <arglist>(const var &amp;v1, const var &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a99488e93b10068ac905c88cc87143284</anchor>
      <arglist>(const var &amp;v1, const var &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>ad2293ef6dd355e7fe5c7abc4f5122f90</anchor>
      <arglist>(const var &amp;v1, const String &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>afb4dcbae8a3d012bdd8ffd0ec9ffab38</anchor>
      <arglist>(const var &amp;v1, const String &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>DynamicObject</name>
      <anchor>a87af585347698e8b7c0a44e80e5044a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_Viewport.h</name>
    <filename>juce__Viewport_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_VoidArray.h</name>
    <filename>juce__VoidArray_8h.html</filename>
    <member kind="function">
      <name>VoidArray</name>
      <anchor>ae2b17df3d4126e20fc7c465d43c8f5bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_VSTMidiEventList.h</name>
    <filename>juce__VSTMidiEventList_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_VSTPluginFormat.h</name>
    <filename>juce__VSTPluginFormat_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_WaitableEvent.h</name>
    <filename>juce__WaitableEvent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_WavAudioFormat.h</name>
    <filename>juce__WavAudioFormat_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_WebBrowserComponent.h</name>
    <filename>juce__WebBrowserComponent_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_WildcardFileFilter.h</name>
    <filename>juce__WildcardFileFilter_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_win32_AutoLinkLibraries.h</name>
    <filename>juce__win32__AutoLinkLibraries_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_win32_DynamicLibraryLoader.h</name>
    <filename>juce__win32__DynamicLibraryLoader_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_win32_NativeIncludes.h</name>
    <filename>juce__win32__NativeIncludes_8h.html</filename>
    <member kind="function">
      <name>WIN32_LEAN_AND_MEAN</name>
      <anchor>ac7bef5d85e3dcd73eef56ad39ffc84a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_WIN32_WINNT</name>
      <anchor>ac50762666aa00bd3a4308158510f1748</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_UNICODE</name>
      <anchor>a78880e1abcefc90f14185aee93ad0e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UNICODE</name>
      <anchor>a09ecca53f2cd1b8d1c566bedb245e141</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_WIN32_IE</name>
      <anchor>ad4562ce705fe4682e63dc8f1ea9dd344</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_WithoutMacros.h</name>
    <filename>juce__WithoutMacros_8h.html</filename>
    <member kind="function">
      <name>JUCE_DONT_DEFINE_MACROS</name>
      <anchor>aa42ed962f34bc8f00ce213f66b00196e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_XmlDocument.h</name>
    <filename>juce__XmlDocument_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>juce_XmlElement.h</name>
    <filename>juce__XmlElement_8h.html</filename>
    <member kind="function">
      <name>forEachXmlChildElement</name>
      <anchor>ace692e5be62f7ab58363d91b52eb839e</anchor>
      <arglist>(parentXmlElement, childElementVariableName)</arglist>
    </member>
    <member kind="function">
      <name>forEachXmlChildElementWithTagName</name>
      <anchor>a6cf39e14a10e2e46f753b0c79c66f2f9</anchor>
      <arglist>(parentXmlElement, childElementVariableName, requiredTagName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>juce_ZipFile.h</name>
    <filename>juce__ZipFile_8h.html</filename>
  </compound>
  <compound kind="class">
    <name>ApplicationCommandInfo</name>
    <filename>structApplicationCommandInfo.html</filename>
    <member kind="function">
      <name>CommandFlags</name>
      <anchor>ab9633f0a25ad57236fde726c98b29d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sDisabled</name>
      <anchor>ab9633f0a25ad57236fde726c98b29d72a202cb5c15583e30f2f59b48e6c18c90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sTicked</name>
      <anchor>ab9633f0a25ad57236fde726c98b29d72af0c8f1c0103edb7a8e9ea852d3d3dee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>antsKeyUpDownCallbacks</name>
      <anchor>ab9633f0a25ad57236fde726c98b29d72ab8ea56bbed1d23f3df3cbd3c20f2a8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>iddenFromKeyEditor</name>
      <anchor>ab9633f0a25ad57236fde726c98b29d72a626b4f9f1aa2bd0761b89b376063d254</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eadOnlyInKeyEditor</name>
      <anchor>ab9633f0a25ad57236fde726c98b29d72a57e236658a383bd74c76fadfe6c49370</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ontTriggerVisualFeedback</name>
      <anchor>ab9633f0a25ad57236fde726c98b29d72a362e5c4decffcd4c7ec6f508f672e443</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ApplicationCommandInfo</name>
      <anchor>a68cd4a52b075b76f161ad5a08e8ad04a</anchor>
      <arglist>(CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <name>setInfo</name>
      <anchor>ac42ad89d7e2e3a7f782d91c1f645ddcf</anchor>
      <arglist>(const String &amp;shortName, const String &amp;description, const String &amp;categoryName, int flags)</arglist>
    </member>
    <member kind="function">
      <name>setActive</name>
      <anchor>a58b2d823a5faa29d1d4c9446c15d216c</anchor>
      <arglist>(bool isActive)</arglist>
    </member>
    <member kind="function">
      <name>setTicked</name>
      <anchor>a1693ec28d4ac7a84bf327ef82aa9ab11</anchor>
      <arglist>(bool isTicked)</arglist>
    </member>
    <member kind="function">
      <name>addDefaultKeypress</name>
      <anchor>a62479dacac44e146c49574ce77964b0d</anchor>
      <arglist>(int keyCode, const ModifierKeys &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>commandID</name>
      <anchor>ac8265d08896874e8aad4f9bfee9e7e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>shortName</name>
      <anchor>a2da18de634cf7794fcd0b26e4121e3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>description</name>
      <anchor>a9d36981d292001925176c0be0d2e6b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>categoryName</name>
      <anchor>a38af85def791bf7f344d18ddb6f65f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>defaultKeypresses</name>
      <anchor>acae1903bdfd8214162adb8326d1ee9da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>flags</name>
      <anchor>a45fa351a09f7a6df3e76fe466c476905</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ApplicationCommandTarget::InvocationInfo</name>
    <filename>structApplicationCommandTarget_1_1InvocationInfo.html</filename>
    <member kind="function">
      <name>InvocationInfo::InvocationMethod</name>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>irect</name>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22a5da64d78c06aae22ea9c1315e99f9557</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>romKeyPress</name>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22af89cceaaf6b2fbe277117d06f4c71cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>romMenu</name>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22aa026666fb6700a11ab0822ca15ee0a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>romButton</name>
      <anchor>a87e99a7b4b51787a40700bce2a7acc22ad4374a114c5dc22c1767e03274176f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>InvocationInfo::InvocationInfo</name>
      <anchor>aa907354cb0e5c69320bf795bed2e13ef</anchor>
      <arglist>(const CommandID commandID)</arglist>
    </member>
    <member kind="function">
      <name>InvocationInfo::commandID</name>
      <anchor>a4416781aae4ac0dd75477ddd98cb31d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>InvocationInfo::commandFlags</name>
      <anchor>a26fba7d10531e7613beb8e3ad0ffc239</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>InvocationInfo::invocationMethod</name>
      <anchor>a4e4ea7fee8feb65189634b26003e0fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>InvocationInfo::originatingComponent</name>
      <anchor>a829cd8dbab1753320b750727df99ba41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>InvocationInfo::keyPress</name>
      <anchor>a733ad27cfb5ad231add1b1c82cced236</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>InvocationInfo::isKeyDown</name>
      <anchor>a40f339e15279d78b003e3598f11c1424</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>InvocationInfo::millisecsSinceKeyPressed</name>
      <anchor>a0c1817f71536452a5d69a8e28ecc8534</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioDeviceManager::AudioDeviceSetup</name>
    <filename>structAudioDeviceManager_1_1AudioDeviceSetup.html</filename>
    <member kind="function">
      <name>AudioDeviceSetup::AudioDeviceSetup</name>
      <anchor>a0386acffa5672ff88151c4d998363e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AudioDeviceSetup::operator==</name>
      <anchor>a006af4c030d43a833b002f0c6bc87e62</anchor>
      <arglist>(const AudioDeviceSetup &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>AudioDeviceSetup::outputDeviceName</name>
      <anchor>a5112cd247e403671a6977344c6764e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AudioDeviceSetup::inputDeviceName</name>
      <anchor>af1c134f5280bec722facace7c9fa0f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AudioDeviceSetup::sampleRate</name>
      <anchor>afa56530d7a661131d8891f7b9874fcd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AudioDeviceSetup::bufferSize</name>
      <anchor>a2b6b158660e8f9381be469ce87232b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AudioDeviceSetup::inputChannels</name>
      <anchor>a9365767334c0819bb45754100c743fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AudioDeviceSetup::useDefaultInputChannels</name>
      <anchor>af4ee7e75cc152be926202c6a7a822d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AudioDeviceSetup::outputChannels</name>
      <anchor>ab95916f70e697107288dc0c44af25aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AudioDeviceSetup::useDefaultOutputChannels</name>
      <anchor>a0506caa1460f630b207e1dcf1093f791</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioIODeviceType::DeviceSetupDetails</name>
    <filename>structAudioIODeviceType_1_1DeviceSetupDetails.html</filename>
    <member kind="function">
      <name>DeviceSetupDetails::manager</name>
      <anchor>a5f6fd815bee3eb93c0294500e4ad749e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DeviceSetupDetails::minNumInputChannels</name>
      <anchor>a2d6321a04e491874d0b453163fe958f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DeviceSetupDetails::maxNumInputChannels</name>
      <anchor>a58c6a6efd804741821a6fc8e4e4ed853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DeviceSetupDetails::minNumOutputChannels</name>
      <anchor>aab15d56865678d0ce401c56a55a9f201</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DeviceSetupDetails::maxNumOutputChannels</name>
      <anchor>a943143c7e2263bcaacfbdda384c7d02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DeviceSetupDetails::useStereoPairs</name>
      <anchor>aed098fa41ff5b7b5a8ff7c4fbbaa58cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioPlayHead::CurrentPositionInfo</name>
    <filename>structAudioPlayHead_1_1CurrentPositionInfo.html</filename>
    <member kind="function">
      <name>CurrentPositionInfo::operator==</name>
      <anchor>a441d91e08ad4f96ca94e6f5fb0511b3b</anchor>
      <arglist>(const CurrentPositionInfo &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>CurrentPositionInfo::operator!=</name>
      <anchor>a3591842153e4204312135e79dc2f781d</anchor>
      <arglist>(const CurrentPositionInfo &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>CurrentPositionInfo::resetToDefault</name>
      <anchor>a4eb2e1834c4f9e932ef43301c0cd99ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CurrentPositionInfo::bpm</name>
      <anchor>a70442777df0b88595ac6865acd936722</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CurrentPositionInfo::timeSigNumerator</name>
      <anchor>aaf8ad36ef3b2d39d401542ae5ca0100c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CurrentPositionInfo::timeSigDenominator</name>
      <anchor>a953c3ad29ef6e0ced883e15f901b0a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CurrentPositionInfo::timeInSeconds</name>
      <anchor>a9da5cfbe320a2e6bf67c3a064ab34fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CurrentPositionInfo::editOriginTime</name>
      <anchor>a5a8c7375646228f378c4eb673f49a9e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CurrentPositionInfo::ppqPosition</name>
      <anchor>aae819730a8f2918f97b9869970ff8c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CurrentPositionInfo::ppqPositionOfLastBarStart</name>
      <anchor>ad7967e1315115628cb35f93f389a3448</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CurrentPositionInfo::frameRate</name>
      <anchor>aca5544d9204e4fedfdf6088dcdf339aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CurrentPositionInfo::isPlaying</name>
      <anchor>a84105c58665f2daae7a18809c964b397</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CurrentPositionInfo::isRecording</name>
      <anchor>a26d4f8779d4f64ba6c3a0a0df5607a36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioProcessorGraph::Connection</name>
    <filename>structAudioProcessorGraph_1_1Connection.html</filename>
    <member kind="function">
      <name>Connection::sourceNodeId</name>
      <anchor>aeffe3c3426cd49761f8dbf0e01b8be97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Connection::sourceChannelIndex</name>
      <anchor>ab65e13dc0013dabb4700e89c4820b179</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Connection::destNodeId</name>
      <anchor>a7f1b8d717bcb7f30c1ebc45e553ba20a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Connection::destChannelIndex</name>
      <anchor>a542e23f5e9b746d2b13485545cce791e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AudioSourceChannelInfo</name>
    <filename>structAudioSourceChannelInfo.html</filename>
    <member kind="function">
      <name>clearActiveBufferRegion</name>
      <anchor>a988b6665c085bf47b1b5fd4f1e6b7f8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>buffer</name>
      <anchor>abed0807b4447de67b8ffd29ef2f2d2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>startSample</name>
      <anchor>a42e88ccc05d4893015e2415785390259</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numSamples</name>
      <anchor>a6669c809cf3b47afa94af63d4fa48101</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectoryContentsList::FileInfo</name>
    <filename>structDirectoryContentsList_1_1FileInfo.html</filename>
    <member kind="function">
      <name>FileInfo::filename</name>
      <anchor>a14b9647b7281512bbedddb25ebeee1b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FileInfo::fileSize</name>
      <anchor>a0ef892081704ac1b7d4de84854b60a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FileInfo::modificationTime</name>
      <anchor>a35f194ff92e35671d7616d1d9e1524b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FileInfo::creationTime</name>
      <anchor>a903e1211fd14c33fe7af486e4e91b9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FileInfo::isDirectory</name>
      <anchor>a493b51197cd6cc4042d9c8b13a0dbdab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FileInfo::isReadOnly</name>
      <anchor>a73e256209bd193d238465977d4493114</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyCriticalSection::ScopedLockType</name>
    <filename>structDummyCriticalSection_1_1ScopedLockType.html</filename>
    <member kind="function">
      <name>ScopedLockType::ScopedLockType</name>
      <anchor>a41ef420144eb76177ce7f19339a3e896</anchor>
      <arglist>(const DummyCriticalSection &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowLevelGraphicsPostScriptRenderer::SavedState</name>
    <filename>structLowLevelGraphicsPostScriptRenderer_1_1SavedState.html</filename>
    <member kind="function">
      <name>SavedState::SavedState</name>
      <anchor>a45d789ecb774106d92269b21cf1591c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SavedState::~SavedState</name>
      <anchor>a94b080a2305995c6bb5796a705287bcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SavedState::clip</name>
      <anchor>af49eca03e67c284afd9d676304c29c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SavedState::xOffset</name>
      <anchor>a10d46be69faae4c3c27ae95dfac5a713</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SavedState::yOffset</name>
      <anchor>a0f4d17295aea556882e47a9a8b07b9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SavedState::fillType</name>
      <anchor>a36435de04c6937319a263ddbf37d3f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SavedState::font</name>
      <anchor>a350201db969d79ab1783c0bde1030469</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MidiOutput::PendingMessage</name>
    <filename>structMidiOutput_1_1PendingMessage.html</filename>
    <member kind="function">
      <name>PendingMessage::PendingMessage</name>
      <anchor>ae9704b26953866caace2d49f1d196481</anchor>
      <arglist>(const uint8 *data, int len, double sampleNumber)</arglist>
    </member>
    <member kind="function">
      <name>PendingMessage::message</name>
      <anchor>ab7524ba0c6aa2bcef900c2557e245529</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PendingMessage::next</name>
      <anchor>a8a471d0fb09ef85b5b691adadd369171</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeHelpers::ParameterType</name>
    <filename>structTypeHelpers_1_1ParameterType.html</filename>
    <member kind="function">
      <name>ParameterType::type</name>
      <anchor>a90e2de8ebb3e15f18a94a73a08aaad46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> bool </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01bool_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; bool &gt;::type</name>
      <anchor>a2d1afb43a04bc0f0290172a16ff3a00d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> char </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01char_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; char &gt;::type</name>
      <anchor>a33e86a63dbc492d184f170f6182c454e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> double </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01double_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; double &gt;::type</name>
      <anchor>a3a2b51c16656c98789663a9b0b533a5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> float </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01float_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; float &gt;::type</name>
      <anchor>a72ca067c9675d5c674549cfdf7284aed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> int64 </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01int64_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; int64 &gt;::type</name>
      <anchor>a1da591e7bc128a915a7d0a60645df3d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> int </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01int_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; int &gt;::type</name>
      <anchor>af93d5fcfee3ae20e1033a9e13d0a51b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> long </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01long_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; long &gt;::type</name>
      <anchor>a27a12c14e6991d0ed50f72df8a3e1f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> short </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01short_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; short &gt;::type</name>
      <anchor>a7ef5703084d5219c1f63b113c384648f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> Type * </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01Type_01_5_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; Type * &gt;::type</name>
      <anchor>a0bd49d2f18bb7b6618781171970212c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> Type </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01Type_01_6_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01Type_01_6_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; Type &amp; &gt;::type</name>
      <anchor>a5e7316995fee32f1dac2a241df97f92d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> uint64 </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01uint64_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; uint64 &gt;::type</name>
      <anchor>ad504554f1d27e9fd3d208d6980980ed2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> unsigned char </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01unsigned_01char_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; unsigned char &gt;::type</name>
      <anchor>a8ec5d767a777e42c9a6c02aec07b95f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> unsigned int </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01unsigned_01int_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; unsigned int &gt;::type</name>
      <anchor>a1175366a43692ced7de3944ce7f07be6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> unsigned long </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01unsigned_01long_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; unsigned long &gt;::type</name>
      <anchor>abe9a178a5f1bc7dfa716a654a3615031</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> unsigned short </name>
    <filename>structTypeHelpers_1_1ParameterType_3_01unsigned_01short_01_4.html</filename>
    <member kind="function">
      <name>ParameterType&lt; unsigned short &gt;::type</name>
      <anchor>a268e79cc8323767853d4228d663393b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZipFile::ZipEntry</name>
    <filename>structZipFile_1_1ZipEntry.html</filename>
    <member kind="function">
      <name>ZipEntry::filename</name>
      <anchor>a77663bd8a97be2fbc840693ac653e78b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ZipEntry::uncompressedSize</name>
      <anchor>a5788ff509e208d0a1fa68c6c1a424e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ZipEntry::fileTime</name>
      <anchor>ae4ba65278656cea2fdf56636fa0c8476</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
